/*
 * -------------------------------------------------------------------------------------------------
 * 版权信息：	中国英谷平台 版权所有 2015
 * 功能描述：	Comment业务逻辑
 * 
 * 创建人：　	Chenjt
 * 创建日期：	2015/11/17 15:07:31
 * 创建说明：	自动生成代码，严禁修改
 * -------------------------------------------------------------------------------------------------
 * This file is generated by CodeGenerator(Ver 2.2), a product of ZhouYonghua(Zhou_Yonghua@163.com).
 * -------------------------------------------------------------------------------------------------
 */

using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Globalization;
using System.Runtime.Serialization;
using System.Text;

#if EnableWCF
using System.ServiceModel;
#endif
#if EnableDTC
using System.Transactions;
#endif

using Share.Framework;
using Share.Framework.Caching;
using Share.Framework.Logging;

using Zkjj.Zgyinggu.BusinessEntities;
using Zkjj.Zgyinggu.BusinessLogic.Caching;
using Zkjj.Zgyinggu.BusinessLogic.Logging;
using Zkjj.Zgyinggu.DataAccess;
using Zkjj.Zgyinggu.DataAccess;
#if EnableIDAL
using Zkjj.Zgyinggu.DataAccess.Interface;
#else
using Zkjj.Zgyinggu.DataAccess.SQLServer;
#endif
using Zkjj.Zgyinggu.Exceptions;
#if EnableWCF || EnableServiceContracts
using Zkjj.Zgyinggu.ServiceContracts;
#endif



namespace Zkjj.Zgyinggu.BusinessLogic
{
	/// <summary>
	/// Comment业务逻辑
	/// </summary>
	[System.ComponentModel.DataObject]
	public partial class CommentLogic : CommentLogicBase
#if EnableWCF || EnableServiceContracts
		, ICommentService
#endif
	{
		//Do Not Code Here!
	}
	
	/// <summary>
	/// Comment业务逻辑基类
	/// </summary>
	public abstract class CommentLogicBase
	{
#if EnableIDAL
		protected static readonly ICommentDataAccess DalComment = DalFactory.CreateComment();//数据访问对象
#else
		protected static readonly CommentDataAccess DalComment = new CommentDataAccess();//数据访问对象
#endif
		protected int _TotalRecords;//记录总数

		#region 缓存
		/// <summary>
		/// 移除根据标识获取Comment对象的缓存
		/// </summary>
		/// <param name="id">Id</param>
		protected internal virtual void RemoveGetByIdCache(Int32 id)
		{
			CacheHelper.Remove(BizCacheEnum.CommentGetById.ToString(), new string[] {id.ToString()}, true);
		}
		#endregion
		
		/// <summary>
		/// 增加
		/// </summary>
		/// <param name="transaction">事务</param>
		/// <param name="needLog">是否记录日志</param>
		/// <param name="comment">Comment</param>
		internal virtual void Add(DbTransaction transaction, bool needLog, Comment comment)
		{
			DalComment.Add(transaction, comment);
			
			if(needLog)
			{
				LogHelper.Instance().WriteBusinessLog(
					BizLogEnum.CommentAdd.ToString(),
					new StringBuilder().Append("Id: ").Append(comment.Id.ToString()).ToString(),
					"增加Comment");
			}
		}
		
		/// <summary>
		/// 增加
		/// </summary>
		/// <param name="comment">Comment</param>
		public virtual void Add(Comment comment)
		{
			Add(null, true, comment);
		}

		/// <summary>
		/// 删除
		/// </summary>
		/// <param name="transaction">事务</param>
		/// <param name="needLog">是否记录日志</param>
		/// <param name="id">Id</param>
		internal virtual void Remove(DbTransaction transaction, bool needLog, Int32 id)
		{
			DalComment.Remove(transaction, id);
			RemoveGetByIdCache(id);
			
			if(needLog)
			{
				LogHelper.Instance().WriteBusinessLog(
					BizLogEnum.CommentRemove.ToString(),
					new StringBuilder().Append("Id: ").Append(id.ToString()).ToString(),
					"删除Comment");
			}
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		/// <param name="id">Id</param>
		public virtual void Remove(Int32 id)
		{
			Remove(null, true, id);
		}

		/// <summary>
		/// 删除
		/// </summary>
		/// <param name="transaction">事务</param>
		/// <param name="needLog">是否记录日志</param>
		/// <param name="comment">Comment</param>
		internal virtual void Remove(DbTransaction transaction, bool needLog, Comment comment)
		{
			Remove(transaction, needLog, comment.Id);
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		/// <param name="comment">Comment</param>
		public virtual void Remove(Comment comment)
		{
			Remove(null, true, comment);
		}
		    
		/// <summary>
		/// 保存
		/// </summary>
		/// <param name="transaction">事务</param>
		/// <param name="needLog">是否记录日志</param>
		/// <param name="comment">Comment</param>
		internal virtual void Save(DbTransaction transaction, bool needLog, Comment comment)
		{
			DalComment.Save(transaction, comment);
			RemoveGetByIdCache(comment.Id);
			
			if(needLog)
			{
				LogHelper.Instance().WriteBusinessLog(
					BizLogEnum.CommentSave.ToString(),
					new StringBuilder().Append("Id: ").Append(comment.Id.ToString()).ToString(),
					"保存Comment");
			}
		}

		/// <summary>
		/// 保存
		/// </summary>
		/// <param name="comment">Comment</param>
		public virtual void Save(Comment comment)
		{
			Save(null, true, comment);
		}
		
#if GetNewId
		/// <summary>
		/// 获取新ID（序列）
		/// </summary>
		/// <returns>新ID</returns>
		public virtual decimal GetNewId()
		{
			return DalComment.GetNewId();
		}
#endif
    
		/// <summary>
		/// 根据标识获取Comment对象（如果没有满足条件的记录，抛出异常）
		/// </summary>
		/// <param name="id">Id</param>
		/// <returns>Comment</returns>
		public virtual Comment GetById(Int32 id)
		{
			return GetById(id, true);
		}	
		
		/// <summary>
		/// 根据标识获取Comment对象
		/// </summary>
		/// <param name="id">Id</param>
		/// <param name="throwNotFoundException">如果没有满足条件的记录是否抛出异常</param>
		/// <returns>Comment</returns>
		public virtual Comment GetById(Int32 id, bool throwNotFoundException)
		{
			Comment comment = CacheHelper.Get<Comment, Int32>(
				BizCacheEnum.CommentGetById.ToString(),
				id,
				new CacheMissedGetDataHandler<Comment, Int32>(DalComment.GetById)
				);
			
			if (throwNotFoundException && comment == null)
			{
				CommentNotFoundException commentNotFoundException = new CommentNotFoundException(id);
#if EnableWCF
				throw new FaultException<CommentNotFoundException>(commentNotFoundException, commentNotFoundException.Message);
#else
				throw commentNotFoundException;
#endif
			}
			
			return comment;
		}		

		/// <summary>
		/// 获取所有Comment对象列表（分页，可排序）
		/// </summary>
		/// <param name="startRowIndex">起始记录号</param>
		/// <param name="maximumRows">行数</param>
		/// <param name="sortExpression">排序表达式</param>
		/// <returns>Comment列表</returns>
		public virtual CommentList GetPagedListAll(int startRowIndex, int maximumRows, string sortExpression)
		{
			CommentList commentList = DalComment.GetPagedListAll(startRowIndex, maximumRows, sortExpression, out _TotalRecords);
			
			return commentList;
		}
		
		/// <summary>
		/// 获取所有Comment对象记录总数
		/// </summary>
		/// <param name="startRowIndex">起始记录号</param>
		/// <param name="maximumRows">行数</param>
		/// <param name="sortExpression">排序表达式</param>
		/// <returns>Comment记录总数</returns>
		public virtual int GetRowCountAll(int startRowIndex, int maximumRows, string sortExpression)
		{
			return _TotalRecords;
		}

#if GetPagedListByCriteria
		/// <summary>
		/// 根据条件获取Comment对象列表（分页，可排序）
		/// </summary>
		/// <param name="startRowIndex">起始记录号</param>
		/// <param name="maximumRows">行数</param>
		/// <param name="sortExpression">排序表达式</param>
		/// <param name="criteria">查询条件(以And开头)</param>
		/// <returns>Comment列表</returns>
		internal virtual CommentList GetPagedListByCriteria(int startRowIndex, int maximumRows, string sortExpression, string criteria)
		{
			CommentList commentList = DalComment.GetPagedListByCriteria(startRowIndex, maximumRows, sortExpression, criteria, out _TotalRecords);
			
			return commentList;
		}
		
		/// <summary>
		/// 根据条件获取Comment对象记录总数
		/// </summary>
		/// <param name="startRowIndex">起始记录号</param>
		/// <param name="maximumRows">行数</param>
		/// <param name="sortExpression">排序表达式</param>
		/// <param name="criteria">查询条件(以And开头)</param>
		/// <returns>Comment记录总数</returns>
		internal virtual int GetRowCountByCriteria(int startRowIndex, int maximumRows, string sortExpression, string criteria)
		{
			return _TotalRecords;
		}
#endif
	}	
}

