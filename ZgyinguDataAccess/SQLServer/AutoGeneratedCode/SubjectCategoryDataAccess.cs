/*
 * -------------------------------------------------------------------------------------------------
 * 版权信息：	中国英谷平台 版权所有 2015
 * 功能描述：	SubjectCategory数据访问
 * 
 * 创建人：　	Chenjt
 * 创建日期：	2015/11/17 15:07:31
 * 创建说明：	自动生成代码，严禁修改
 * -------------------------------------------------------------------------------------------------
 * This file is generated by CodeGenerator(Ver 2.2), a product of ZhouYonghua(Zhou_Yonghua@163.com).
 * -------------------------------------------------------------------------------------------------
 */

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Globalization;
using System.Text;

using Microsoft.ApplicationBlocks.Data;

using Share.Framework.Data;
using Share.Framework.Logging;

using Zkjj.Zgyinggu.BusinessEntities;
#if EnableIDAL
using Zkjj.Zgyinggu.DataAccess.Interface;
#endif

namespace Zkjj.Zgyinggu.DataAccess.SQLServer
{
	/// <summary>
	/// SubjectCategory数据访问
	/// </summary>
	public partial class SubjectCategoryDataAccess : SubjectCategoryDataAccessBase
#if EnableIDAL
		, ISubjectCategoryDataAccess
#endif
	{
		//Do Not Code Here!
	}
	
	/// <summary>
	/// SubjectCategory数据访问基类
	/// </summary>
	public class SubjectCategoryDataAccessBase
	{

		/// <summary>
		/// 增加（事务处理）
		/// </summary>
		/// <param name="transaction">事务</param>
		/// <param name="subjectCategory">SubjectCategory</param>
		public virtual void Add(DbTransaction transaction, SubjectCategory subjectCategory)
		{
			string commandName = "dbo.Pr_SubjectCategory_Insert";
						
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ZgyinguWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@Id", SqlDbType.Int),
					new SqlParameter("@SubjectCategoryName", SqlDbType.NVarChar, 50)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ZgyinguWrite, commandName, parms);
			}

			#region 输出参数设置
			parms[0].Direction = ParameterDirection.Output;
			#endregion
			
			#region 参数赋值
			if (subjectCategory.SubjectCategoryName != null){ parms[1].Value = subjectCategory.SubjectCategoryName; } else { parms[1].Value = DBNull.Value; }
			#endregion
			#endregion
			
			#region 数据调试日志
			StringBuilder dataDebugInfo = new StringBuilder(string.Format("准备执行{0}, 参数如下：", commandName));
			dataDebugInfo.AppendLine().Append("(").Append(parms[0].Direction.ToString()).Append(")").Append("Id: ").Append(parms[0].Value);
			dataDebugInfo.AppendLine().Append("(").Append(parms[1].Direction.ToString()).Append(")").Append("SubjectCategoryName: ").Append(parms[1].Value);
			LogHelper.Instance().WriteBusinessLog("DataDebug", dataDebugInfo.ToString(), "数据调试");
			#endregion
			
			try
			{
				if (transaction == null)
				{
					SqlHelper.ExecuteNonQuery(ConnectionString.ZgyinguWrite, CommandType.StoredProcedure, commandName, parms);
				}
				else
				{
					SqlHelper.ExecuteNonQuery((SqlTransaction)transaction, CommandType.StoredProcedure, commandName, parms);
				}
			}
			catch (SqlException ex)
			{
				DBContraintExceptionHandler.Handle(ex, DBOperateType.Insert, null);
				throw;
			}

			#region 获取输出参数值
			subjectCategory.Id = (Int32)parms[0].Value;
			#endregion
		}

		///// <summary>
		///// 增加
		///// </summary>
		///// <param name="subjectCategory">SubjectCategory</param>
		//public virtual void Add(SubjectCategory subjectCategory)
		//{
		//  Add(null, subjectCategory);
		//}
		
		/// <summary>
		/// 删除（事务处理）
		/// </summary>
		/// <param name="transaction">事务</param>
		/// <param name="id">Id</param>
		public virtual void Remove(DbTransaction transaction, Int32 id)
		{
			string commandName = "dbo.Pr_SubjectCategory_Delete";

			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ZgyinguWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@Id", SqlDbType.Int)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ZgyinguWrite, commandName, parms);
			}
			
			#region 参数赋值
			parms[0].Value = id;
			#endregion
			#endregion
			
			#region 数据调试日志
			StringBuilder dataDebugInfo = new StringBuilder(string.Format("准备执行{0}, 参数如下：", commandName));
			dataDebugInfo.AppendLine().Append("(").Append(parms[0].Direction.ToString()).Append(")").Append("Id: ").Append(parms[0].Value);
			LogHelper.Instance().WriteBusinessLog("DataDebug", dataDebugInfo.ToString(), "数据调试");
			#endregion
			
			try
			{
				if (transaction == null)
				{
					SqlHelper.ExecuteNonQuery(ConnectionString.ZgyinguWrite, CommandType.StoredProcedure, commandName, parms);
				}
				else
				{
					SqlHelper.ExecuteNonQuery((SqlTransaction)transaction, CommandType.StoredProcedure, commandName, parms);
				}
			}
			catch (SqlException ex)
			{
				DBContraintExceptionHandler.Handle(ex, DBOperateType.Delete, new string[] { id.ToString() });
				throw;
			}
		}

		///// <summary>
		///// 删除
		///// </summary>
		///// <param name="id">Id</param>
		//public virtual void Remove(Int32 id)
		//{
		//  Remove(null, id);
		//}
		
		/// <summary>
		/// 保存（事务处理）
		/// </summary>
		/// <param name="transaction">事务</param>
		/// <param name="subjectCategory">SubjectCategory</param>
		public virtual void Save(DbTransaction transaction, SubjectCategory subjectCategory)
		{
			string commandName = "dbo.Pr_SubjectCategory_Update";

			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ZgyinguWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@Id", SqlDbType.Int),
					new SqlParameter("@SubjectCategoryName", SqlDbType.NVarChar, 50)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ZgyinguWrite, commandName, parms);
			}
			
			#region 参数赋值
			parms[0].Value = subjectCategory.Id;
			if (subjectCategory.SubjectCategoryName != null){ parms[1].Value = subjectCategory.SubjectCategoryName; } else { parms[1].Value = DBNull.Value; }
			#endregion
			#endregion
			
			#region 数据调试日志
			StringBuilder dataDebugInfo = new StringBuilder(string.Format("准备执行{0}, 参数如下：", commandName));
			dataDebugInfo.AppendLine().Append("(").Append(parms[0].Direction.ToString()).Append(")").Append("Id: ").Append(parms[0].Value);
			dataDebugInfo.AppendLine().Append("(").Append(parms[1].Direction.ToString()).Append(")").Append("SubjectCategoryName: ").Append(parms[1].Value);
			LogHelper.Instance().WriteBusinessLog("DataDebug", dataDebugInfo.ToString(), "数据调试");
			#endregion
			
			try
			{
				if (transaction == null)
				{
					SqlHelper.ExecuteNonQuery(ConnectionString.ZgyinguWrite, CommandType.StoredProcedure, commandName, parms);
				}
				else
				{
					SqlHelper.ExecuteNonQuery((SqlTransaction)transaction, CommandType.StoredProcedure, commandName, parms);
				}
			}
			catch (SqlException ex)
			{
				DBContraintExceptionHandler.Handle(ex, DBOperateType.Update, null);
				throw;
			}
		}

		///// <summary>
		///// 保存
		///// </summary>
		///// <param name="subjectCategory">SubjectCategory</param>
		//public virtual void Save(SubjectCategory subjectCategory)
		//{
		//  Save(null, subjectCategory);
		//}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		/// <param name="id">Id</param>
		/// <returns>SubjectCategory</returns>
		public virtual SubjectCategory GetById(Int32 id)
		{
			SubjectCategory subjectCategory = null;
			
			string commandName = "dbo.Pr_SubjectCategory_GetByPk";

			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ZgyinguRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@Id", SqlDbType.Int)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ZgyinguRead, commandName, parms);
			}
			
			#region 参数赋值
			parms[0].Value = id;
			#endregion
			#endregion

			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ZgyinguRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					subjectCategory = PopulateSubjectCategoryFromDataReader(dataReader);
				}
			}
			
			return subjectCategory;
		}
	
		/// <summary>
		/// 获取所有对象列表（分页，可排序）
		/// </summary>
		/// <param name="startRowIndex">起始记录号</param>
		/// <param name="maximumRows">行数</param>
		/// <param name="sortExpression">排序表达式</param>
		/// <param name="totalRecords">（返回）记录总数</param>
		/// <returns>SubjectCategory列表</returns>
		public virtual SubjectCategoryList GetPagedListAll(int startRowIndex, int maximumRows, string sortExpression, out int totalRecords)
		{
			SubjectCategoryList subjectCategoryList = new SubjectCategoryList();
			
			string commandName = "dbo.Pr_SubjectCategory_GetPagedListAll";

			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ZgyinguRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@StartRowIndex", SqlDbType.Int),
					new SqlParameter("@MaximumRows", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ZgyinguRead, commandName, parms);
			}
			
			#region 参数赋值
			parms[0].Value = startRowIndex;
			parms[1].Value = maximumRows;
			parms[2].Value = sortExpression;
			#endregion
			#endregion

			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ZgyinguRead, CommandType.StoredProcedure, commandName, parms))
			{
				while (dataReader.Read())
				{
					subjectCategoryList.Add(PopulateSubjectCategoryFromDataReader(dataReader));
				}
			}
			
			#region 获取输出参数值
			totalRecords = (int)parms[3].Value;
			#endregion
			
			return subjectCategoryList;
		}
		
		/// <summary>
		/// 从DataReader中读取数据到业务对象
		/// </summary>
		/// <param name="reader">DataReader</param>
		/// <returns>SubjectCategory</returns>
		protected virtual SubjectCategory PopulateSubjectCategoryFromDataReader(SqlDataReader reader)
		{
			return DataReaderUtility.FillData<SubjectCategory>(reader);
		}
	}
}
