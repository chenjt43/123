<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Share.Framework</name>
    </assembly>
    <members>
        <member name="T:Share.Framework.Logging.LogHelper">
            <summary>
            鏃ュ織璁板綍杈呭姪鍣ㄧ被
            </summary>
            <remarks>ZhouYonghua, 2008-6-18</remarks>
        </member>
        <member name="M:Share.Framework.Logging.LogHelper.Instance">
            <summary>
            鑾峰彇鏃ュ織璁板綍杈呭姪鍣ㄥ疄渚?
            </summary>
            <returns>鏃ュ織璁板綍杈呭姪鍣ㄥ疄渚?/returns>
        </member>
        <member name="M:Share.Framework.Logging.LogHelper.WriteBusinessLog(System.String,System.String,System.String,System.String)">
            <summary>
            璁板綍涓氬姟鏃ュ織
            </summary>
            <param name="username">鐢ㄦ埛鍚?/param>
            <param name="logItemName">鏃ュ織椤瑰悕绉?/param>
            <param name="target">鎿嶄綔瀵硅薄</param>
            <param name="remark">澶囨敞</param>
        </member>
        <member name="M:Share.Framework.Logging.LogHelper.WriteBusinessLog(System.String,System.String,System.String)">
            <summary>
            璁板綍涓氬姟鏃ュ織
            </summary>
            <param name="logItemName">鏃ュ織椤瑰悕绉?/param>
            <param name="target">鎿嶄綔瀵硅薄</param>
            <param name="remark">澶囨敞</param>
        </member>
        <member name="M:Share.Framework.Logging.LogHelper.WriteErrorLog(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            璁板綍閿欒鏃ュ織
            </summary>
            <param name="logItemName">鏃ュ織椤瑰悕绉?/param>
            <param name="notifyMessage">鎻愮ず淇℃伅</param>
            <param name="baseErrorMessage">鍘熷寮傚父淇℃伅</param>
            <param name="trace">閿欒鍫嗘爤</param>
            <param name="errorSource">寮傚父鏉ユ簮</param>
            <param name="remark">澶囨敞</param>
        </member>
        <member name="M:Share.Framework.Logging.LogHelper.WriteErrorLog(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            璁板綍閿欒鏃ュ織
            </summary>
            <param name="username">鐢ㄦ埛鍚?/param>
            <param name="logItemName">鏃ュ織椤瑰悕绉?/param>
            <param name="notifyMessage">鎻愮ず淇℃伅</param>
            <param name="baseErrorMessage">鍘熷寮傚父淇℃伅</param>
            <param name="trace">閿欒鍫嗘爤</param>
            <param name="errorSource">寮傚父鏉ユ簮</param>
            <param name="remark">澶囨敞</param>
        </member>
        <member name="M:Share.Framework.Logging.LogHelper.WriteLog(Share.Framework.Logging.BizLogItem,System.Object)">
            <summary>
            璁板綍鏃ュ織
            </summary>
            <param name="logItem">鏃ュ織椤?/param>
            <param name="logObject">鏃ュ織瀵硅薄</param>
        </member>
        <member name="T:Share.Framework.Logging.LogRepository">
            <summary>
            鏃ュ織绠＄悊鍣紙浠呮敮鎸佹暟鎹簱鏃ュ織锛?
            </summary>
        </member>
        <member name="M:Share.Framework.Logging.LogRepository.ErrorLogGetPagedListByUser(System.Int32,System.Int32,System.String)">
            <summary>
            鏍规嵁鐢ㄦ埛鍚嶈幏鍙栭敊璇棩蹇楀垪琛紙鍒嗛〉锛?
            </summary>
            <param name="startRowIndex">璧峰璁板綍鍙?/param>
            <param name="maximumRows">鍒嗛〉澶у皬</param>
            <param name="userName">鐢ㄦ埛鍚?/param>
            <returns>閿欒鏃ュ織鍒楄〃</returns>
        </member>
        <member name="M:Share.Framework.Logging.LogRepository.ErrorLogGetRowCount(System.Int32,System.Int32,System.String)">
            <summary>
            鑾峰彇閿欒鏃ュ織鎬绘暟
            </summary>
            <param name="startRowIndex">璧峰璁板綍鍙?/param>
            <param name="maximumRows">鍒嗛〉澶у皬</param>
            <param name="userName">鐢ㄦ埛鍚?/param>
            <returns>閿欒鏃ュ織鎬绘暟</returns>
        </member>
        <member name="T:Microsoft.ApplicationBlocks.Data.SqlHelper">
            <summary>
            The SqlHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of SqlClient
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of SqlParameters to be added to command</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The SqlCommand to be prepared</param>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteCommand(Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteType,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset / a 1x1 resultset) against the specified SqlConnection / SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            ZhouYonghua, 2010-5-21: 鏀寔鏁版嵁绛惧悕锛堥槻绡℃敼锛?
            </remarks>
            <param name="executeType">鎵ц绫诲瀷</param>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="transaction">SqlTransaction</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],Microsoft.ApplicationBlocks.Data.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Private helper method that execute a SqlCommand (that returns a resultset) against the specified SqlTransaction and SqlConnection
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid transact-SQL statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid transact-SQL statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid transact-SQL statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary>
            Simplify the creation of a Sql command object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <remarks>
            e.g.:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid SqlCommand object</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.  
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified
            SqlTransaction using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the store procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="T:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteType">
            <summary>
            鎵ц绫诲瀷
            </summary>
            <remarks>
            ZhouYonghua, 2010-5-24: 涓烘敮鎸佹暟鎹鍚嶏紙闃茬鏀癸級锛孍xecuteNonQuery鍜孍xecuteScalar鍋氱粺涓€瀹炵幇
            </remarks>
        </member>
        <member name="T:Microsoft.ApplicationBlocks.Data.SqlHelper.SqlConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:Microsoft.ApplicationBlocks.Data.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:Microsoft.ApplicationBlocks.Data.SqlHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:Microsoft.ApplicationBlocks.Data.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of SqlParameters for a stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Deep copy of cached SqlParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters to be cached</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An array of SqlParamters</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="T:Share.Framework.Caching.OpenObjectCache">
            <summary>
            绯荤粺瀵硅薄Cache,浣滅敤鏄伩鍏嶉噸澶嶉绻佺殑鍒涘缓绫汇€?
            </summary>
        </member>
        <member name="F:Share.Framework.Caching.OpenObjectCache._ClassCache">
            <summary>
            鏁版嵁璁块棶 Cache
            </summary>
        </member>
        <member name="F:Share.Framework.Caching.OpenObjectCache._ObjectCache">
            <summary>
            鏁版嵁璁块棶宸ュ巶
            </summary>
        </member>
        <member name="M:Share.Framework.Caching.OpenObjectCache.#ctor">
            <summary>
            鏋勯€犲嚱鏁?
            </summary>
        </member>
        <member name="M:Share.Framework.Caching.OpenObjectCache.GetInstance">
            <summary>
            鍙栧緱鏁版嵁璁块棶宸ュ巶鐨勫疄渚?
            </summary>
            <returns></returns>
        </member>
        <member name="M:Share.Framework.Caching.OpenObjectCache.GetObject``1(System.Type)">
            <summary>
            鏍规嵁浼犲叆鐨勭被鍨嬶紝绯荤粺鑷姩鍒涘缓鍏跺疄渚嬪苟涓斿皢姝ゅ疄渚嬫斁鍒扮被缂撳瓨涓€?
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Share.Framework.Caching.OpenObjectCache.Clear">
            <summary>
            娓呯┖淇℃伅銆?
            </summary>
        </member>
        <member name="T:Share.Framework.Security.RSASignatureProvider">
            <summary>
            RSA鏁板瓧绛惧悕Provider
            </summary>
        </member>
        <member name="T:Share.Framework.Security.ISignatureProvider">
            <summary>
            鏁板瓧绛惧悕Provider
            </summary>
        </member>
        <member name="M:Share.Framework.Security.ISignatureProvider.Signature(System.Byte[])">
            <summary>
            绛惧悕
            </summary>
            <param name="hash">闇€瑕佽繘琛岀鍚嶇殑鍝堝笇鍊?byte[])</param>
            <returns>绛惧悕鍊?byte[])</returns>
        </member>
        <member name="M:Share.Framework.Security.ISignatureProvider.Signature(System.String)">
            <summary>
            绛惧悕
            </summary>
            <param name="hash">闇€瑕佽繘琛岀鍚嶇殑鍝堝笇鍊?Base64String)</param>
            <returns>绛惧悕鍊?Base64String)</returns>
        </member>
        <member name="M:Share.Framework.Security.ISignatureProvider.VerifySignature(System.Byte[],System.Byte[])">
            <summary>
            绛惧悕楠岃瘉
            </summary>
            <param name="hash">闇€瑕佽繘琛岀鍚嶉獙璇佺殑鍝堝笇鍊?/param>
            <param name="signature">绛惧悕</param>
            <returns>绛惧悕鏄惁姝ｇ‘</returns>
        </member>
        <member name="M:Share.Framework.Security.ISignatureProvider.VerifySignature(System.String,System.String)">
            <summary>
            绛惧悕楠岃瘉
            </summary>
            <param name="hash">闇€瑕佽繘琛岀鍚嶉獙璇佺殑鍝堝笇鍊?Base64String)</param>
            <param name="signature">绛惧悕(Base64String)</param>
            <returns>绛惧悕鏄惁姝ｇ‘</returns>
        </member>
        <member name="P:Share.Framework.Security.ISignatureProvider.HashAlgorithmName">
            <summary>
            鍝堝笇绠楁硶鍚嶇О
            </summary>
        </member>
        <member name="P:Share.Framework.Security.ISignatureProvider.Key">
            <summary>
            瀵嗛挜
            </summary>
        </member>
        <member name="M:Share.Framework.Security.RSASignatureProvider.#ctor">
            <summary>
            RSA鏁板瓧绛惧悕Provider
            </summary>
        </member>
        <member name="M:Share.Framework.Security.RSASignatureProvider.#ctor(System.String,System.String)">
            <summary>
            RSA鏁板瓧绛惧悕Provider
            </summary>
            <param name="hashAlgorithmName">鍝堝笇绠楁硶鍚嶇О</param>
            <param name="key">瀵嗛挜</param>
        </member>
        <member name="M:Share.Framework.Security.RSASignatureProvider.Signature(System.Byte[])">
            <summary>
            绛惧悕
            </summary>
            <param name="hash">闇€瑕佽繘琛岀鍚嶇殑鍝堝笇鍊?byte[])</param>
            <returns>绛惧悕鍊?byte[])</returns>
        </member>
        <member name="M:Share.Framework.Security.RSASignatureProvider.Signature(System.String)">
            <summary>
            绛惧悕
            </summary>
            <param name="hash">闇€瑕佽繘琛岀鍚嶇殑鍝堝笇鍊?Base64String)</param>
            <returns>绛惧悕鍊?Base64String)</returns>
        </member>
        <member name="M:Share.Framework.Security.RSASignatureProvider.VerifySignature(System.Byte[],System.Byte[])">
            <summary>
            绛惧悕楠岃瘉
            </summary>
            <param name="hash">闇€瑕佽繘琛岀鍚嶉獙璇佺殑鍝堝笇鍊?/param>
            <param name="signature">绛惧悕</param>
            <returns>绛惧悕鏄惁姝ｇ‘</returns>
        </member>
        <member name="M:Share.Framework.Security.RSASignatureProvider.VerifySignature(System.String,System.String)">
            <summary>
            绛惧悕楠岃瘉
            </summary>
            <param name="hash">闇€瑕佽繘琛岀鍚嶉獙璇佺殑鍝堝笇鍊?Base64String)</param>
            <param name="signature">绛惧悕(Base64String)</param>
            <returns>绛惧悕鏄惁姝ｇ‘</returns>
        </member>
        <member name="M:Share.Framework.Security.RSASignatureProvider.InitCheck">
            <summary>
            鍒濆鍖栨鏌?
            </summary>
        </member>
        <member name="P:Share.Framework.Security.RSASignatureProvider.HashAlgorithmName">
            <summary>
            鍝堝笇绠楁硶鍚嶇О
            </summary>
        </member>
        <member name="P:Share.Framework.Security.RSASignatureProvider.Key">
            <summary>
            瀵嗛挜
            </summary>
        </member>
        <member name="T:Share.Framework.Security.Signature">
            <summary>
            鏁板瓧绛惧悕
            </summary>
        </member>
        <member name="M:Share.Framework.Security.Signature.GetProvider">
            <summary>
            鑾峰彇榛樿Provider
            </summary>
            <returns>鏁板瓧绛惧悕Provider</returns>
        </member>
        <member name="M:Share.Framework.Security.Signature.GetProvider(System.String)">
            <summary>
            鏍规嵁Provider鍚嶇О鑾峰彇Provider
            </summary>
            <param name="providerName">Provider鍚嶇О</param>
            <returns>鏁板瓧绛惧悕Provider</returns>
        </member>
        <member name="M:Share.Framework.Security.Signature.GetConfigProvider(System.String)">
            <summary>
            鏍规嵁Provider鍚嶇О鑾峰彇Provider
            </summary>
            <param name="providerName">Provider鍚嶇О</param>
            <returns>Provider</returns>
        </member>
        <member name="P:Share.Framework.Security.Signature.ProviderConfiguration">
            <summary>
            Provider閰嶇疆
            </summary>
        </member>
        <member name="P:Share.Framework.Security.Signature.DefaultProviderName">
            <summary>
            榛樿Provider鍚嶇О
            </summary>
        </member>
        <member name="T:Share.Framework.Security.AsymmetricCrypto">
            <summary>
            闈炲绉板姞瀵?
            </summary>
        </member>
        <member name="M:Share.Framework.Security.AsymmetricCrypto.GetProvider">
            <summary>
            鑾峰彇榛樿Provider
            </summary>
            <returns>闈炲绉板姞瀵哖rovider</returns>
        </member>
        <member name="M:Share.Framework.Security.AsymmetricCrypto.GetProvider(System.String)">
            <summary>
            鏍规嵁Provider鍚嶇О鑾峰彇Provider
            </summary>
            <param name="providerName">Provider鍚嶇О</param>
            <returns>闈炲绉板姞瀵哖rovider</returns>
        </member>
        <member name="M:Share.Framework.Security.AsymmetricCrypto.GetConfigProvider(System.String)">
            <summary>
            鏍规嵁Provider鍚嶇О鑾峰彇Provider
            </summary>
            <param name="providerName">Provider鍚嶇О</param>
            <returns>Provider</returns>
        </member>
        <member name="P:Share.Framework.Security.AsymmetricCrypto.ProviderConfiguration">
            <summary>
            Provider閰嶇疆
            </summary>
        </member>
        <member name="P:Share.Framework.Security.AsymmetricCrypto.DefaultProviderName">
            <summary>
            榛樿Provider鍚嶇О
            </summary>
        </member>
        <member name="M:Share.Framework.Package.StringCompress.Compress(System.String)">
            <summary>
            鍘嬬缉瀛楃涓?
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Share.Framework.Logging.BusinessLog">
            <summary>
            涓氬姟鎿嶄綔鏃ュ織
            </summary>
        </member>
        <member name="M:Share.Framework.Logging.BusinessLog.#ctor">
            <summary>
            涓氬姟鎿嶄綔鏃ュ織鏋勯€犲嚱鏁?-榛樿
            </summary>
        </member>
        <member name="M:Share.Framework.Logging.BusinessLog.#ctor(System.Int32,System.DateTime,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            涓氬姟鎿嶄綔鏃ュ織鏋勯€犲嚱鏁?-鎵€鏈夊睘鎬?
            </summary>
        </member>
        <member name="P:Share.Framework.Logging.BusinessLog.LogId">
            <summary>
            鏃ュ織ID
            </summary>
        </member>
        <member name="P:Share.Framework.Logging.BusinessLog.CreateTime">
            <summary>
            鍒涘缓鏃堕棿
            </summary>
        </member>
        <member name="P:Share.Framework.Logging.BusinessLog.UserName">
            <summary>
            鎿嶄綔浜?
            </summary>
        </member>
        <member name="P:Share.Framework.Logging.BusinessLog.OperationType">
            <summary>
            鎿嶄綔瀵硅薄绫诲瀷
            </summary>
        </member>
        <member name="P:Share.Framework.Logging.BusinessLog.Target">
            <summary>
            鎿嶄綔瀵硅薄
            </summary>
        </member>
        <member name="P:Share.Framework.Logging.BusinessLog.ServerName">
            <summary>
            Web鏈嶅姟鍣ㄥ悕绉?
            </summary>
        </member>
        <member name="P:Share.Framework.Logging.BusinessLog.IpAddress">
            <summary>
            IP鍦板潃
            </summary>
        </member>
        <member name="P:Share.Framework.Logging.BusinessLog.PageURL">
            <summary>
            椤甸潰鍦板潃
            </summary>
        </member>
        <member name="P:Share.Framework.Logging.BusinessLog.Remark">
            <summary>
            澶囨敞
            </summary>
        </member>
        <member name="T:Share.Framework.Xml.XmlConverter`1">
            <summary>
            XML杞崲鍣紙搴忓垪鍖?鍙嶅簭鍒楀寲锛?
            </summary>
            <typeparam name="T">闇€瑕佽浆鎹㈢殑绫诲瀷</typeparam>
        </member>
        <member name="M:Share.Framework.Xml.XmlConverter`1.#ctor">
            <summary>
            鏋勯€燲ML杞崲鍣紙浣跨敤UTF8缂栫爜杩涜搴忓垪鍖栨搷浣滐紝鏃燘OM锛?
            </summary>
        </member>
        <member name="M:Share.Framework.Xml.XmlConverter`1.#ctor(System.Text.Encoding)">
            <summary>
            鏋勯€燲ML杞崲鍣紙浣跨敤鎸囧畾缂栫爜杩涜搴忓垪鍖栨搷浣滐級
            </summary>
            <param name="serializerEncoding">搴忓垪鍖栫紪鐮?/param>
        </member>
        <member name="M:Share.Framework.Xml.XmlConverter`1.LoadFromString(System.String)">
            <summary>
            浠嶺ML鏂囨湰鍔犺浇瀵硅薄
            </summary>
            <param name="xmlString">XML鍐呭</param>
        </member>
        <member name="M:Share.Framework.Xml.XmlConverter`1.LoadFromStream(System.IO.FileStream)">
            <summary>
            浠庢枃浠舵祦鍔犺浇瀵硅薄
            </summary>
            <param name="fileStream">鏂囦欢娴?/param>
            <returns>鐩爣瀵硅薄</returns>
        </member>
        <member name="M:Share.Framework.Xml.XmlConverter`1.LoadFromStream(System.IO.Stream)">
            <summary>
            浠庢祦鍔犺浇瀵硅薄
            </summary>
            <param name="stream">娴?/param>
            <returns>鐩爣瀵硅薄</returns>
        </member>
        <member name="M:Share.Framework.Xml.XmlConverter`1.LoadFromFile(System.String)">
            <summary>
            浠庢枃浠跺姞杞藉璞?
            </summary>
            <param name="filename">XML鏂囦欢鍚?/param>
        </member>
        <member name="M:Share.Framework.Xml.XmlConverter`1.GetXmlSerializerNamespaces(`0)">
            <summary>
            鑾峰彇XML鍛藉悕绌洪棿
            </summary>
            <param name="source">瀵硅薄</param>
            <returns>鍛藉悕绌洪棿</returns>
        </member>
        <member name="M:Share.Framework.Xml.XmlConverter`1.SaveToFile(`0,System.String)">
            <summary>
            灏嗗璞′繚瀛樿嚦鏂囦欢
            </summary>
            <param name="source">瀵硅薄</param>
            <param name="filename">XML鏂囦欢鍚?/param>
        </member>
        <member name="M:Share.Framework.Xml.XmlConverter`1.GetString(`0)">
            <summary>
            鑾峰彇XML鍐呭
            </summary>
            <param name="source">瀵硅薄</param>
            <returns>XML鍐呭</returns>
        </member>
        <member name="M:Share.Framework.Xml.XmlConverter`1.GetStream(`0)">
            <summary>
            鑾峰彇瀵硅薄娴?
            娉ㄦ剰锛氫娇鐢ㄥ悗璇峰叧闂祦锛侊紒锛?
            </summary>
            <param name="source">瀵硅薄</param>
            <returns>瀵硅薄娴?/returns>
        </member>
        <member name="T:Share.Framework.WebRequestUtility">
            <summary>
            Web璇锋眰鍔熻兘绫?
            </summary>
        </member>
        <member name="M:Share.Framework.WebRequestUtility.Authenticate(System.Web.HttpContext)">
            <summary>
            璇锋眰鏉ユ簮楠岃瘉
            </summary>
            <param name="context">璇锋眰涓婁笅鏂?/param>
            <returns>璇锋眰鏄惁鍚堟硶</returns>
            <remarks>
            鍙厑璁告潵鑷狝ppSettings["WebRequestAllowedHost"]涓寘鍚殑鍩熷悕鐨勮姹?
            </remarks>
        </member>
        <member name="M:Share.Framework.WebRequestUtility.GetQueryString(System.String)">
            <summary>
            鑾峰彇QueryString瀛楃涓插€?
            锛堣姹備笉鑳界己灏戯紝涓嶈兘涓虹┖涓诧級
            </summary>
            <param name="queryStringName">QueryString鍚嶇О</param>
            <returns>QueryString瀛楃涓插€?/returns>
        </member>
        <member name="M:Share.Framework.WebRequestUtility.GetQueryString(System.String,System.String)">
            <summary>
            鑾峰彇QueryString瀛楃涓插€硷紙濡傛灉涓虹┖锛屽垯缃负榛樿鍊硷級
            </summary>
            <param name="queryStringName">QueryString鍚嶇О</param>
            <param name="defaultValue">榛樿鍊?/param>
            <returns>QueryString瀛楃涓插€?/returns>
        </member>
        <member name="M:Share.Framework.WebRequestUtility.GetQueryStringInt(System.String)">
            <summary>
            鑾峰彇QueryString鏁存暟鍊?
            锛堣姹備笉鑳界己灏戯級
            </summary>
            <param name="queryStringName">QueryString鍚嶇О</param>
            <returns>QueryString鏁存暟鍊?/returns>
        </member>
        <member name="M:Share.Framework.WebRequestUtility.GetQueryStringInt(System.String,System.Int32)">
            <summary>
            鑾峰彇QueryString鏁存暟鍊硷紙濡傛灉涓虹┖锛屽垯缃负榛樿鍊硷級
            </summary>
            <param name="queryStringName">QueryString鍚嶇О</param>
            <param name="defaultValue">榛樿鍊?/param>
            <returns>QueryString鏁存暟鍊?/returns>
        </member>
        <member name="M:Share.Framework.WebRequestUtility.GetQueryStringUnsignedInt(System.String)">
            <summary>
            鑾峰彇QueryString姝ｆ暣鏁板€?
            锛堣姹備笉鑳界己灏戯級
            </summary>
            <param name="queryStringName">QueryString鍚嶇О</param>
            <returns>QueryString姝ｆ暣鏁板€?/returns>
        </member>
        <member name="M:Share.Framework.WebRequestUtility.GetQueryStringUnsignedInt(System.String,System.UInt32)">
            <summary>
            鑾峰彇QueryString姝ｆ暣鏁板€硷紙濡傛灉涓虹┖锛屽垯缃负榛樿鍊硷級
            </summary>
            <param name="queryStringName">QueryString鍚嶇О</param>
            <param name="defaultValue">榛樿鍊?/param>
            <returns>QueryString姝ｆ暣鏁板€?/returns>
        </member>
        <member name="M:Share.Framework.WebRequestUtility.GetQueryStringGuid(System.String)">
            <summary>
            鑾峰彇QueryStringGUID鍊?
            锛堣姹備笉鑳界己灏戯級
            </summary>
            <param name="queryStringName">QueryString鍚嶇О</param>
            <returns>QueryStringGUID鍊?/returns>
        </member>
        <member name="M:Share.Framework.WebRequestUtility.GetQueryStringGuid(System.String,System.Guid)">
            <summary>
            鑾峰彇QueryStringGUID鍊硷紙濡傛灉涓虹┖锛屽垯缃负榛樿鍊硷級
            </summary>
            <param name="queryStringName">QueryString鍚嶇О</param>
            <param name="defaultValue">榛樿鍊?/param>
            <returns>QueryStringGUID鍊?/returns>
        </member>
        <member name="M:Share.Framework.WebRequestUtility.GetUserIdentity">
            <summary>
            鑾峰彇鐢ㄦ埛鏍囪瘑
            閫傜敤Forms楠岃瘉銆乄indows楠岃瘉
            </summary>
            <returns>鐢ㄦ埛鏍囪瘑</returns>
        </member>
        <member name="M:Share.Framework.WebRequestUtility.GetRequestIp">
            <summary>
            鑾峰彇鐢ㄦ埛IP鍦板潃
            </summary>
            <returns>鐢ㄦ埛IP鍦板潃</returns>
        </member>
        <member name="M:Share.Framework.WebRequestUtility.GetRequestUrl">
            <summary>
            鑾峰彇璇锋眰鍦板潃
            </summary>
            <returns>璇锋眰鍦板潃</returns>
        </member>
        <member name="M:Share.Framework.WebRequestUtility.GetClientUrl(System.String)">
            <summary>
            鏍规嵁鏈嶅姟鍣ㄧ鍦板潃鑾峰彇瀹㈡埛绔湴鍧€
            锛堝鍔犲簲鐢ㄦ牴璺緞锛?
            </summary>
            <param name="serverUrl">鏈嶅姟鍣ㄧ鍦板潃</param>
            <returns>瀹㈡埛绔湴鍧€</returns>
        </member>
        <member name="T:Share.Framework.Providers.ProviderConfiguration">
            <summary>
            Provider閰嶇疆
            </summary>
        </member>
        <member name="M:Share.Framework.Providers.ProviderConfiguration.#ctor(System.Xml.XmlNode)">
            <summary>
            Provider閰嶇疆鍒濆鍖?
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Share.Framework.Providers.ProviderConfiguration.GetProviderConfiguration(System.String)">
            <summary>
            鑾峰彇Provider閰嶇疆
            </summary>
            <param name="providerSectionName">Provider閰嶇疆鑺傚悕绉?/param>
            <returns>Provider閰嶇疆</returns>
        </member>
        <member name="M:Share.Framework.Providers.ProviderConfiguration.GetProviders(System.Xml.XmlNode)">
            <summary>
            浠庨厤缃妭鑾峰彇Provider
            </summary>
            <param name="node">閰嶇疆鑺?/param>
        </member>
        <member name="P:Share.Framework.Providers.ProviderConfiguration.Providers">
            <summary>
            Provider鍒楄〃
            </summary>
        </member>
        <member name="P:Share.Framework.Providers.ProviderConfiguration.DefaultProvider">
            <summary>
            榛樿Provider
            </summary>
        </member>
        <member name="T:Share.Framework.Package.CompressParameter">
            <summary>
            鐢ㄤ簬杩涜鏂囦欢鍘嬬缉鐨勫弬鏁?
            </summary>
        </member>
        <member name="T:Share.Framework.Data.SqlUniqueIndexExceptionHandler">
            <summary>
            SQLServer鎯熶竴绱㈠紩寮傚父澶勭悊鍣?
            </summary>
        </member>
        <member name="M:Share.Framework.Data.SqlUniqueIndexExceptionHandler.Handle(System.Data.SqlClient.SqlException)">
            <summary>
            寮傚父澶勭悊
            </summary>
            <param name="ex">寮傚父</param>
        </member>
        <member name="T:Share.Framework.Data.OracleUniqueIndexExceptionHandler">
            <summary>
            Oracle鎯熶竴绱㈠紩寮傚父澶勭悊鍣?
            </summary>
        </member>
        <member name="T:Share.Framework.Data.ForeignKey">
            <summary>
            澶栭敭绾︽潫
            </summary>
        </member>
        <member name="M:Share.Framework.Data.ForeignKey.#ctor">
            <summary>
            澶栭敭绾︽潫
            </summary>
        </member>
        <member name="M:Share.Framework.Data.ForeignKey.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            澶栭敭绾︽潫
            </summary>
            <param name="name">鍚嶇О</param>
            <param name="parent">涓昏〃</param>
            <param name="child">瀛愯〃</param>
            <param name="parentKeys">涓昏〃涓婚敭</param>
            <param name="childKeys">瀛愯〃澶栭敭</param>
        </member>
        <member name="P:Share.Framework.Data.ForeignKey.Name">
            <summary>
            鍚嶇О
            </summary>
        </member>
        <member name="P:Share.Framework.Data.ForeignKey.Parent">
            <summary>
            涓昏〃
            </summary>
        </member>
        <member name="P:Share.Framework.Data.ForeignKey.Child">
            <summary>
            瀛愯〃
            </summary>
        </member>
        <member name="P:Share.Framework.Data.ForeignKey.ParentKeys">
            <summary>
            涓昏〃涓婚敭
            </summary>
        </member>
        <member name="P:Share.Framework.Data.ForeignKey.ChildKeys">
            <summary>
            瀛愯〃澶栭敭
            </summary>
        </member>
        <member name="T:Share.Framework.Data.ForeignKeys">
            <summary>
            澶栭敭绾︽潫闆嗗悎
            </summary>
        </member>
        <member name="M:Share.Framework.Data.ForeignKeys.#ctor(System.String,System.String,System.Collections.Generic.List{Share.Framework.Data.ForeignKey})">
            <summary>
            鏁版嵁搴撳閿害鏉?
            </summary>
            <param name="insertUpdateViolationMessage">澧炲姞/淇敼杩濆弽绾︽潫娑堟伅</param>
            <param name="deleteViolationMessage">鍒犻櫎杩濆弽绾︽潫娑堟伅</param>
            <param name="foreignKeyList">澶栭敭绾︽潫鍒楄〃</param>
        </member>
        <member name="P:Share.Framework.Data.ForeignKeys.InsertUpdateViolationMessage">
            <summary>
            澧炲姞/淇敼杩濆弽绾︽潫娑堟伅
            </summary>
        </member>
        <member name="P:Share.Framework.Data.ForeignKeys.DeleteViolationMessage">
            <summary>
            鍒犻櫎杩濆弽绾︽潫娑堟伅
            </summary>
        </member>
        <member name="P:Share.Framework.Data.ForeignKeys.ForeignKeyList">
            <summary>
            澶栭敭绾︽潫鍒楄〃
            </summary>
        </member>
        <member name="T:Share.Framework.Data.PrimaryKey">
            <summary>
            涓婚敭锛堝€欓€夐敭锛夌害鏉?
            </summary>
        </member>
        <member name="M:Share.Framework.Data.PrimaryKey.#ctor">
            <summary>
            涓婚敭绾︽潫
            </summary>
        </member>
        <member name="M:Share.Framework.Data.PrimaryKey.#ctor(System.String,System.String,System.String)">
            <summary>
            涓婚敭绾︽潫
            </summary>
            <param name="name">鍚嶇О</param>
            <param name="table">琛?/param>
            <param name="keyColumns">涓昏〃鍒?/param>
        </member>
        <member name="P:Share.Framework.Data.PrimaryKey.Name">
            <summary>
            鍚嶇О
            </summary>
        </member>
        <member name="P:Share.Framework.Data.PrimaryKey.Table">
            <summary>
            琛?
            </summary>
        </member>
        <member name="P:Share.Framework.Data.PrimaryKey.KeyColumns">
            <summary>
            涓婚敭鍒?
            </summary>
        </member>
        <member name="T:Share.Framework.Data.PrimaryKeys">
            <summary>
            涓婚敭锛堝€欓€夐敭锛夌害鏉熼泦鍚?
            </summary>
        </member>
        <member name="M:Share.Framework.Data.PrimaryKeys.#ctor">
            <summary>
            涓婚敭绾︽潫闆嗗悎
            </summary>
        </member>
        <member name="M:Share.Framework.Data.PrimaryKeys.#ctor(System.String,System.Collections.Generic.List{Share.Framework.Data.PrimaryKey})">
            <summary>
            涓婚敭绾︽潫闆嗗悎
            </summary>
            <param name="insertUpdateViolationMessage">澧炲姞/淇敼杩濆弽绾︽潫娑堟伅</param>
            <param name="primaryKeyList">涓婚敭绾︽潫鍒楄〃</param>
        </member>
        <member name="P:Share.Framework.Data.PrimaryKeys.InsertUpdateViolationMessage">
            <summary>
            澧炲姞/淇敼杩濆弽绾︽潫娑堟伅
            </summary>
        </member>
        <member name="P:Share.Framework.Data.PrimaryKeys.PrimaryKeyList">
            <summary>
            涓婚敭绾︽潫鍒楄〃
            </summary>
        </member>
        <member name="T:Share.Framework.Data.UniqueIndex">
            <summary>
            鍞竴绱㈠紩绾︽潫
            </summary>
        </member>
        <member name="M:Share.Framework.Data.UniqueIndex.#ctor">
            <summary>
            鍞竴绱㈠紩绾︽潫
            </summary>
        </member>
        <member name="M:Share.Framework.Data.UniqueIndex.#ctor(System.String,System.String,System.String)">
            <summary>
            鍞竴绱㈠紩绾︽潫
            </summary>
            <param name="name">鍚嶇О</param>
            <param name="table">琛?/param>
            <param name="indexColumns">绱㈠紩鍒?/param>
        </member>
        <member name="P:Share.Framework.Data.UniqueIndex.Name">
            <summary>
            鍚嶇О
            </summary>
        </member>
        <member name="P:Share.Framework.Data.UniqueIndex.Table">
            <summary>
            琛?
            </summary>
        </member>
        <member name="P:Share.Framework.Data.UniqueIndex.IndexColumns">
            <summary>
            绱㈠紩鍒?
            </summary>
        </member>
        <member name="T:Share.Framework.Data.UniqueIndexes">
            <summary>
            鍞竴绱㈠紩绾︽潫闆嗗悎
            </summary>
        </member>
        <member name="M:Share.Framework.Data.UniqueIndexes.#ctor">
            <summary>
            鍞竴绱㈠紩闆嗗悎
            </summary>
        </member>
        <member name="M:Share.Framework.Data.UniqueIndexes.#ctor(System.String,System.Collections.Generic.List{Share.Framework.Data.UniqueIndex})">
            <summary>
            涓婚敭绾︽潫闆嗗悎
            </summary>
            <param name="insertUpdateViolationMessage">澧炲姞/淇敼杩濆弽绾︽潫娑堟伅</param>
            <param name="uniqueIndexList">鍞竴绱㈠紩鍒楄〃</param>
        </member>
        <member name="P:Share.Framework.Data.UniqueIndexes.InsertUpdateViolationMessage">
            <summary>
            澧炲姞/淇敼杩濆弽绾︽潫娑堟伅
            </summary>
        </member>
        <member name="P:Share.Framework.Data.UniqueIndexes.UniqueIndexList">
            <summary>
            鍞竴绱㈠紩鍒楄〃
            </summary>
        </member>
        <member name="T:Share.Framework.Data.DBContraint">
            <summary>
            鏁版嵁搴撶害鏉?
            </summary>
        </member>
        <member name="M:Share.Framework.Data.DBContraint.GetDBContraintConfig">
            <summary>
            浠庨厤缃枃浠惰幏鍙栨暟鎹簱绾︽潫
            </summary>
            <returns></returns>
        </member>
        <member name="P:Share.Framework.Data.DBContraint.ForeignKeys">
            <summary>
            澶栭敭绾︽潫闆嗗悎
            </summary>
        </member>
        <member name="P:Share.Framework.Data.DBContraint.PrimaryKeys">
            <summary>
            涓婚敭锛堝€欓€夐敭锛夌害鏉熼泦鍚?
            </summary>
        </member>
        <member name="P:Share.Framework.Data.DBContraint.UniqueIndexes">
            <summary>
            鍞竴绱㈠紩绾︽潫闆嗗悎
            </summary>
        </member>
        <member name="P:Share.Framework.Data.DBContraint.FileName">
            <summary>
            鏁版嵁搴撶害鏉熼厤缃枃浠跺悕绉?
            </summary>
        </member>
        <member name="P:Share.Framework.Data.DBContraint.DBContraints">
            <summary>
            鎵€鏈夋暟鎹簱绾︽潫
            </summary>
        </member>
        <member name="T:Share.Framework.Data.DataReaderUtility">
            <summary>
            DataReader鍔熻兘绫?
            </summary>
        </member>
        <member name="M:Share.Framework.Data.DataReaderUtility.IsDBNull(System.Data.IDataReader,System.String)">
            <summary>
            鍒ゆ柇鍒楁槸鍚︽槸绌哄€?
            </summary>
            <param name="dr">DataReader</param>
            <param name="columnName">鍒楀悕</param>
            <returns>鍒楁槸鍚︽槸绌哄€?/returns>
        </member>
        <member name="M:Share.Framework.Data.DataReaderUtility.GetString(System.Data.IDataReader,System.String)">
            <summary>
            鑾峰彇瀛楃涓插垪鍊?
            </summary>
            <param name="dr">DataReader</param>
            <param name="columnName">鍒楀悕</param>
            <returns>鍒楀€?/returns>
        </member>
        <member name="M:Share.Framework.Data.DataReaderUtility.GetString(System.Data.IDataReader,System.String,System.String)">
            <summary>
            鑾峰彇瀛楃涓插垪鍊硷紙Null鍒欎娇鐢ㄩ粯璁ゅ€硷級
            </summary>
            <param name="dr">DataReader</param>
            <param name="columnName">鍒楀悕</param>
            <param name="defaultValue">榛樿鍊?/param>
            <returns>鍒楀€?/returns>
        </member>
        <member name="M:Share.Framework.Data.DataReaderUtility.GetInt16(System.Data.IDataReader,System.String)">
            <summary>
            鑾峰彇Int16鍒楀€硷紙Null杞负0锛?
            </summary>
            <param name="dr">DataReader</param>
            <param name="columnName">鍒楀悕</param>
            <returns>鍒楀€?/returns>
        </member>
        <member name="M:Share.Framework.Data.DataReaderUtility.GetInt16(System.Data.IDataReader,System.String,System.Int16)">
            <summary>
            鑾峰彇Int16鍒楀€硷紙Null鍒欎娇鐢ㄩ粯璁ゅ€硷級
            </summary>
            <param name="dr">DataReader</param>
            <param name="columnName">鍒楀悕</param>
            <param name="defaultValue">榛樿鍊?/param>
            <returns>鍒楀€?/returns>
        </member>
        <member name="M:Share.Framework.Data.DataReaderUtility.GetNullableInt16(System.Data.IDataReader,System.String)">
            <summary>
            鑾峰彇Int16鍒楀€?
            </summary>
            <param name="dr">DataReader</param>
            <param name="columnName">鍒楀悕</param>
            <returns>鍒楀€?/returns>
        </member>
        <member name="M:Share.Framework.Data.DataReaderUtility.GetInt32(System.Data.IDataReader,System.String)">
            <summary>
            鑾峰彇Int32鍒楀€硷紙Null杞负0锛?
            </summary>
            <param name="dr">DataReader</param>
            <param name="columnName">鍒楀悕</param>
            <returns>鍒楀€?/returns>
        </member>
        <member name="M:Share.Framework.Data.DataReaderUtility.GetInt32(System.Data.IDataReader,System.String,System.Int32)">
            <summary>
            鑾峰彇Int32鍒楀€硷紙Null鍒欎娇鐢ㄩ粯璁ゅ€硷級
            </summary>
            <param name="dr">DataReader</param>
            <param name="columnName">鍒楀悕</param>
            <param name="defaultValue">榛樿鍊?/param>
            <returns>鍒楀€?/returns>
        </member>
        <member name="M:Share.Framework.Data.DataReaderUtility.GetNullableInt32(System.Data.IDataReader,System.String)">
            <summary>
            鑾峰彇Int32鍒楀€?
            </summary>
            <param name="dr">DataReader</param>
            <param name="columnName">鍒楀悕</param>
            <returns>鍒楀€?/returns>
        </member>
        <member name="M:Share.Framework.Data.DataReaderUtility.GetDecimal(System.Data.IDataReader,System.String)">
            <summary>
            鑾峰彇Decimal鍒楀€硷紙Null杞负0锛?
            </summary>
            <param name="dr">DataReader</param>
            <param name="columnName">鍒楀悕</param>
            <returns>鍒楀€?/returns>
        </member>
        <member name="M:Share.Framework.Data.DataReaderUtility.GetDecimal(System.Data.IDataReader,System.String,System.Decimal)">
            <summary>
            鑾峰彇Decimal鍒楀€硷紙Null鍒欎娇鐢ㄩ粯璁ゅ€硷級
            </summary>
            <param name="dr">DataReader</param>
            <param name="columnName">鍒楀悕</param>
            <param name="defaultValue">榛樿鍊?/param>
            <returns>鍒楀€?/returns>
        </member>
        <member name="M:Share.Framework.Data.DataReaderUtility.GetNullableDecimal(System.Data.IDataReader,System.String)">
            <summary>
            鑾峰彇Decimal鍒楀€?
            </summary>
            <param name="dr">DataReader</param>
            <param name="columnName">鍒楀悕</param>
            <returns>鍒楀€?/returns>
        </member>
        <member name="M:Share.Framework.Data.DataReaderUtility.GetDateTime(System.Data.IDataReader,System.String)">
            <summary>
            鑾峰彇DateTime鍒楀€硷紙Null杞负MinValue锛?
            </summary>
            <param name="dr">DataReader</param>
            <param name="columnName">鍒楀悕</param>
            <returns>鍒楀€?/returns>
        </member>
        <member name="M:Share.Framework.Data.DataReaderUtility.GetDateTime(System.Data.IDataReader,System.String,System.DateTime)">
            <summary>
            鑾峰彇DateTime鍒楀€硷紙Null鍒欎娇鐢ㄩ粯璁ゅ€硷級
            </summary>
            <param name="dr">DataReader</param>
            <param name="columnName">鍒楀悕</param>
            <param name="defaultValue">榛樿鍊?/param>
            <returns>鍒楀€?/returns>
        </member>
        <member name="M:Share.Framework.Data.DataReaderUtility.GetNullableDateTime(System.Data.IDataReader,System.String)">
            <summary>
            鑾峰彇DateTime鍒楀€?
            </summary>
            <param name="dr">DataReader</param>
            <param name="columnName">鍒楀悕</param>
            <returns>鍒楀€?/returns>
        </member>
        <member name="M:Share.Framework.Data.DataReaderUtility.GetBoolean(System.Data.IDataReader,System.String)">
            <summary>
            鑾峰彇Boolean鍒楀€硷紙Null杞负false锛屽厑璁稿皢鈥?鈥?1杞负true锛屸€?鈥?0杞负false锛?
            </summary>
            <param name="dr">DataReader</param>
            <param name="columnName">鍒楀悕</param>
            <returns>鍒楀€?/returns>
        </member>
        <member name="M:Share.Framework.Data.DataReaderUtility.GetBoolean(System.Data.IDataReader,System.String,System.Boolean)">
            <summary>
            鑾峰彇Boolean鍒楀€硷紙Null鍒欎娇鐢ㄩ粯璁ゅ€硷紝鍏佽灏嗏€?鈥?1杞负true锛屽叾浣欒浆涓篺alse锛?
            </summary>
            <param name="dr">DataReader</param>
            <param name="columnName">鍒楀悕</param>
            <param name="defaultValue">榛樿鍊?/param>
            <returns>鍒楀€?/returns>
        </member>
        <member name="M:Share.Framework.Data.DataReaderUtility.GetNullableBoolean(System.Data.IDataReader,System.String)">
            <summary>
            鑾峰彇Boolean鍒楀€硷紙鍏佽灏嗏€?鈥?1杞负true锛屸€?鈥?0杞负false锛?
            </summary>
            <param name="dr">DataReader</param>
            <param name="columnName">鍒楀悕</param>
            <returns>鍒楀€?/returns>
        </member>
        <member name="M:Share.Framework.Data.DataReaderUtility.GetByte(System.Data.IDataReader,System.String)">
            <summary>
            鑾峰彇Byte鍒楀€硷紙Null杞负MinValue锛?
            </summary>
            <param name="dr">DataReader</param>
            <param name="columnName">鍒楀悕</param>
            <returns>鍒楀€?/returns>
        </member>
        <member name="M:Share.Framework.Data.DataReaderUtility.GetByte(System.Data.IDataReader,System.String,System.Byte)">
            <summary>
            鑾峰彇Byte鍒楀€硷紙Null鍒欎娇鐢ㄩ粯璁ゅ€硷級
            </summary>
            <param name="dr">DataReader</param>
            <param name="columnName">鍒楀悕</param>
            <param name="defaultValue">榛樿鍊?/param>
            <returns>鍒楀€?/returns>
        </member>
        <member name="M:Share.Framework.Data.DataReaderUtility.GetNullableByte(System.Data.IDataReader,System.String)">
            <summary>
            鑾峰彇Byte鍒楀€?
            </summary>
            <param name="dr">DataReader</param>
            <param name="columnName">鍒楀悕</param>
            <returns>鍒楀€?/returns>
        </member>
        <member name="M:Share.Framework.Data.DataReaderUtility.GetGuid(System.Data.IDataReader,System.String)">
            <summary>
            鑾峰彇Guid鍒楀€硷紙Null杞负Empty锛?
            </summary>
            <param name="dr">DataReader</param>
            <param name="columnName">鍒楀悕</param>
            <returns>鍒楀€?/returns>
        </member>
        <member name="M:Share.Framework.Data.DataReaderUtility.GetNullableGuid(System.Data.IDataReader,System.String)">
            <summary>
            鑾峰彇Guid鍒楀€?
            </summary>
            <param name="dr">DataReader</param>
            <param name="columnName">鍒楀悕</param>
            <returns>鍒楀€?/returns>
        </member>
        <member name="M:Share.Framework.Data.DataReaderUtility.FillData``1(System.Data.IDataReader)">
            <summary>
            濉厖鏁版嵁鍒版暟鎹璞?
            </summary>
            <typeparam name="T">鏁版嵁瀵硅薄绫诲瀷</typeparam>
            <param name="dr">DataReader</param>
            <returns>鏁版嵁瀵硅薄</returns>
        </member>
        <member name="T:Share.Framework.DataConvert.BinaryImport`1">
            <summary>
            瀵硅薄杩涜浜岃繘鍒跺弽搴忓垪鍖栫殑绫汇€?
            </summary>
            <typeparam name="T">闇€瑕佽浆鎹㈢殑绫诲瀷</typeparam>
        </member>
        <member name="T:Share.Framework.IDataImport`1">
            <summary>
            鏁版嵁杞崲锛堣浆鍏ワ級鎺ュ彛
            </summary>
            <typeparam name="T">闇€瑕佽浆鎹㈢殑绫诲瀷</typeparam>
        </member>
        <member name="M:Share.Framework.DataConvert.BinaryImport`1.Import(System.Object)">
            <summary>
             灏嗘寚瀹氫簩杩涘埗鏂囦欢杞崲涓哄璞?
            </summary>
            <param name="_object">鏂囦欢璺緞</param>
            <returns>闇€瑕佽浆鎹㈢殑瀵硅薄绫诲瀷</returns>
        </member>
        <member name="T:Share.Framework.ArrayUtility">
            <summary>
            鏁扮粍鍔熻兘绫?
            </summary>
        </member>
        <member name="M:Share.Framework.ArrayUtility.HasSameContent(System.String[])">
            <summary>
            瀛楃鏁扮粍涓槸鍚﹀瓨鍦ㄧ浉鍚岀殑椤?
            </summary>
            <param name="strList">瀛楃鏁扮粍</param>
            <returns>鏄惁瀛樺湪鐩稿悓鐨勯」</returns>
        </member>
        <member name="T:Share.Framework.Logging.BusinessLogLayout">
            <summary>
            涓氬姟鏃ュ織鏍煎紡鍖栧櫒
            </summary>
        </member>
        <member name="M:Share.Framework.Logging.BusinessLogLayout.#ctor">
            <summary>
            鏋勯€犱笟鍔℃棩蹇楁牸寮忓寲鍣?
            </summary>
        </member>
        <member name="T:Share.Framework.Data.DBContraintExceptionHandler">
            <summary>
            鏁版嵁搴撶害鏉熷紓甯稿鐞嗗櫒
            </summary>
        </member>
        <member name="M:Share.Framework.Data.DBContraintExceptionHandler.Handle(System.Data.SqlClient.SqlException,Share.Framework.Data.DBOperateType,System.String[])">
            <summary>
            寮傚父澶勭悊
            锛堣嚜鍔ㄥ鐞嗗紓甯告秷鎭紝杞崲涓篋BContraintException鐨勭浉搴斿瓙绫诲鎶涳級
            </summary>
            <param name="sqlEx">鍘熷紓甯?/param>
            <param name="operateType">鏁版嵁鎿嶄綔绫诲瀷</param>
            <param name="args">鍙傛暟</param>
        </member>
        <member name="M:Share.Framework.Data.DBContraintExceptionHandler.Handle(System.Data.OracleClient.OracleException,Share.Framework.Data.DBOperateType,System.String[])">
            <summary>
            寮傚父澶勭悊
            锛堣嚜鍔ㄥ鐞嗗紓甯告秷鎭紝杞崲涓篋BContraintException鐨勭浉搴斿瓙绫诲鎶涳級
            </summary>
            <param name="oraEx">鍘熷紓甯?/param>
            <param name="operateType">鏁版嵁鎿嶄綔绫诲瀷</param>
            <param name="args">鍙傛暟</param>
        </member>
        <member name="M:Share.Framework.Data.DBContraintExceptionHandler.Handle(System.Exception,Share.Framework.Data.DBOperateType,System.String[])">
            <summary>
            寮傚父澶勭悊
            锛堣嚜鍔ㄥ鐞嗗紓甯告秷鎭紝杞崲涓篋BContraintException鐨勭浉搴斿瓙绫诲鎶涳級
            </summary>
            <param name="ex">鍘熷紓甯?/param>
            <param name="operateType">鏁版嵁鎿嶄綔绫诲瀷</param>
            <param name="args">鍙傛暟</param>
        </member>
        <member name="M:Share.Framework.Data.DBContraintExceptionHandler.Handle(System.Exception,Share.Framework.Data.DBOperateType)">
            <summary>
            寮傚父澶勭悊
            </summary>
            <param name="ex">鍘熷紓甯?/param>
            <param name="operateType">鏁版嵁鎿嶄綔绫诲瀷</param>
            <returns>鏄惁澶勭悊浜嗗紓甯?false锛屽凡澶勭悊鐨勫紓甯歌浆鎹负DBContraintException澶栨姏)</returns>
        </member>
        <member name="T:Share.Framework.StringUtility">
            <summary>
            瀛楃涓插姛鑳界被
            </summary>
        </member>
        <member name="M:Share.Framework.StringUtility.TextToHtml(System.String)">
            <summary>
            灏嗘櫘閫氭枃鏈浆涓篐TML鏂囨湰
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Share.Framework.StringUtility.JoinToString``1(System.Collections.Generic.IList{``0},System.Char)">
            <summary>
            灏嗗垪琛ㄩ摼鎺ユ垚瀛楃涓?
            </summary>
            <typeparam name="T">鍒楄〃鍏冪礌绫诲瀷</typeparam>
            <param name="lstT">鍒楄〃</param>
            <param name="separator">鍒嗛殧绗?/param>
            <returns>瀛楃涓?/returns>
        </member>
        <member name="M:Share.Framework.StringUtility.JoinToString``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            灏嗗垪琛ㄩ摼鎺ユ垚瀛楃涓?
            </summary>
            <typeparam name="T">鍒楄〃鍏冪礌绫诲瀷</typeparam>
            <param name="lstT">鍒楄〃</param>
            <param name="separator">鍒嗛殧绗?/param>
            <returns>瀛楃涓?/returns>
        </member>
        <member name="M:Share.Framework.StringUtility.JoinToString(System.Collections.IList,System.Char)">
            <summary>
            灏嗗垪琛ㄩ摼鎺ユ垚瀛楃涓?
            </summary>
            <param name="lst">鍒楄〃</param>
            <param name="separator">鍒嗛殧绗?/param>
            <returns>瀛楃涓?/returns>
        </member>
        <member name="M:Share.Framework.StringUtility.JoinToString(System.Collections.IList,System.String)">
            <summary>
            灏嗗垪琛ㄩ摼鎺ユ垚瀛楃涓?
            </summary>
            <param name="lst">鍒楄〃</param>
            <param name="separator">鍒嗛殧绗?/param>
            <returns>瀛楃涓?/returns>
        </member>
        <member name="M:Share.Framework.StringUtility.GetGBNumberString(System.Int32)">
            <summary>
            鑾峰彇鏁板€肩殑姹夊瓧琛ㄧず
            </summary>
            <param name="digitalNumber">鏁板€?/param>
            <returns>鏁板€肩殑姹夊瓧琛ㄧず</returns>
        </member>
        <member name="M:Share.Framework.StringUtility.GetShortString(System.String,System.Int32)">
            <summary>
            鑾峰彇瀛楃涓茬缉鍐?
            </summary>
            <param name="str">瀛楃涓?/param>
            <param name="maxLength">鏈€澶т綅鏁?/param>
            <returns>瀛楃涓茬缉鍐?/returns>
            <remarks>
            濡傛灉瀛楃涓查暱搴﹁秴杩噈axLength锛屽彇鍓峬axLength浣嶅瓧绗﹀苟琛ュ厖......
            </remarks>
        </member>
        <member name="M:Share.Framework.StringUtility.GetStringWithoutHTMLTag(System.String)">
            <summary>
            鏇挎崲Html鏍囩
            </summary>
            <param name="source">婧愬瓧绗︿覆</param>
            <returns>杩囨护鍚庣殑瀛楃涓?/returns>
        </member>
        <member name="M:Share.Framework.StringUtility.GetByteLength(System.String)">
            <summary>
            鑾峰彇瀛楃涓茬殑瀛楄妭鏁?
            </summary>
            <param name="source">婧愬瓧绗︿覆</param>
            <returns>瀛楄妭鏁?/returns>
        </member>
        <member name="M:Share.Framework.StringUtility.IsInt(System.String)">
            <summary>
            鍒ゆ柇鏄惁鏄暣鏁?
            </summary>
            <param name="value">瀛楃涓插€?/param>
            <returns>鏄惁鏄暣鏁?/returns>
        </member>
        <member name="M:Share.Framework.StringUtility.IsUnsignedInt(System.String)">
            <summary>
            鍒ゆ柇鏄惁鏄潪璐熸暣鏁?
            </summary>
            <param name="value">瀛楃涓插€?/param>
            <returns>鏄惁鏄潪璐熸暣鏁?/returns>
        </member>
        <member name="M:Share.Framework.StringUtility.IsGuid(System.String)">
            <summary>
            鍒ゆ柇鏄惁鏄疓UID
            </summary>
            <param name="value">瀛楃涓插€?/param>
            <returns>鏄惁鏄疓UID</returns>
        </member>
        <member name="M:Share.Framework.StringUtility.IsChineseLetter(System.String,System.Int32)">
            <summary>
            鍒ゆ柇婧愬瓧绗︿覆鎸囧畾浣嶇疆鏄惁鏄腑鏂囧瓧绗?
            </summary>
            <param name="source">婧愬瓧绗︿覆</param>
            <param name="index">鎸囧畾浣嶇疆</param>
            <returns>鏄惁鏄腑鏂囧瓧绗?/returns>
        </member>
        <member name="M:Share.Framework.StringUtility.GetPinyin(System.Char)">
            <summary>
            鑾峰彇婧愬瓧绗︾殑鎷奸煶
            锛堣姹傛簮瀛楃涓轰腑鏂囧瓧绗︼紝瀵逛簬澶氶煶瀛楄繑鍥炵1绉嶆嫾闊筹級
            </summary>
            <param name="source">婧愬瓧绗?/param>
            <returns>鎷奸煶</returns>
        </member>
        <member name="M:Share.Framework.StringUtility.GetPinyin(System.String,System.Boolean,System.Int32)">
            <summary>
            鑾峰彇婧愬瓧绗︿覆鐨勬嫾闊?
            锛堥檺瀹氱粨鏋滄渶澶ч暱搴︼級
            </summary>
            <param name="source">婧愬瓧绗︿覆</param>
            <param name="getFirst">鏄惁鍙彇鎷奸煶棣栧瓧姣?/param>
            <param name="maxLength">缁撴灉鏈€澶ч暱搴︼紝0琛ㄧず涓嶉檺瀹?/param>
            <returns>婧愬瓧绗︿覆鐨勬嫾闊?/returns>
        </member>
        <member name="M:Share.Framework.StringUtility.GetPinyin(System.String,System.Boolean)">
            <summary>
            鑾峰彇婧愬瓧绗︿覆鐨勬嫾闊?
            锛堜笉闄愬畾缁撴灉鏈€澶ч暱搴︼級
            </summary>
            <param name="source">婧愬瓧绗︿覆</param>
            <param name="getFirst">鏄惁鍙彇鎷奸煶棣栧瓧姣?/param>
            <returns>婧愬瓧绗︿覆鐨勬嫾闊?/returns>
        </member>
        <member name="M:Share.Framework.StringUtility.GetPinyin(System.String)">
            <summary>
            鑾峰彇婧愬瓧绗︿覆鐨勬嫾闊?
            锛堝彧鍙栭瀛楁瘝锛屼笉闄愬畾缁撴灉鏈€澶ч暱搴︼級
            </summary>
            <param name="source">婧愬瓧绗︿覆</param>
            <returns>婧愬瓧绗︿覆鐨勬嫾闊?/returns>
        </member>
        <member name="M:Share.Framework.StringUtility.GetCombineSubSetList(System.String,System.Char)">
            <summary>
            鑾峰彇鎸夋寚瀹氬垎闅旂鍒嗛殧鐨勫瓧绗︿覆鐨勭粍鍚堝瓙闆?
            锛堝a,b,c鐨勭粍鍚堝瓙闆嗕负a,b,c/a,b/a,c/a/b,c/b/c锛?
            </summary>
            <param name="source">婧愬瓧绗︿覆</param>
            <param name="separator">鍒嗛殧绗?/param>
            <returns>缁勫悎鍒楄〃</returns>
        </member>
        <member name="T:Share.Framework.SqlDBArgumentUtility">
            <summary>
            SQL鏁版嵁搴撳弬鏁板姛鑳界被
            </summary>
        </member>
        <member name="M:Share.Framework.SqlDBArgumentUtility.CheckStringArgument(System.String@,System.String,System.Boolean)">
            <summary>
            妫€鏌ュ瓧绗︿覆鍙傛暟锛堝彲浠ユ寚瀹氭槸鍚﹀厑璁稿弬鏁颁负绌猴級
            濡傛灉涓嶇鍚堣姹傦紝鎶涘嚭寮傚父
            </summary>
            <param name="argument">寰呮鏌ョ殑瀛楃涓插弬鏁?/param>
            <param name="argumentName">鍙傛暟鍚嶇О</param>
            <param name="allowNullOrEmpty">鏄惁鍏佽涓虹┖</param>
            <remarks>
            褰撳墠璁剧疆锛氫笉鍏佽鍖呭惈SQL娉ㄩ噴锛涘崟寮曞彿("'")鏀逛负2涓崟寮曞彿("''")
            璀﹀憡锛氱┖鏍间細琚埅鍙?
            </remarks>
        </member>
        <member name="M:Share.Framework.SqlDBArgumentUtility.CheckStringArgument(System.String@,System.String)">
            <summary>
            妫€鏌ュ瓧绗︿覆鍙傛暟
            濡傛灉涓嶇鍚堣姹傦紝鎶涘嚭寮傚父
            </summary>
            <param name="argument">寰呮鏌ョ殑瀛楃涓插弬鏁?/param>
            <param name="argumentName">鍙傛暟鍚嶇О</param>
            <remarks>
            褰撳墠璁剧疆锛氫笉鍏佽涓虹┖锛屼笉鍏佽涓虹┖涓?鍏ㄧ┖鏍硷紱涓嶅厑璁稿寘鍚玈QL娉ㄩ噴锛涘崟寮曞彿("'")鏀逛负2涓崟寮曞彿("''")
            璀﹀憡锛氱┖鏍间細琚埅鍙?
            </remarks>
        </member>
        <member name="M:Share.Framework.SqlDBArgumentUtility.CheckStringArgument(System.String@,System.Int32,System.String)">
            <summary>
            妫€鏌ュ瓧绗︿覆鍙傛暟锛堥檺瀹氬瓧绗︿覆闀垮害锛?
            濡傛灉涓嶇鍚堣姹傦紝鎶涘嚭寮傚父
            </summary>
            <param name="argument">寰呮鏌ョ殑瀛楃涓插弬鏁?/param>
            <param name="maxLength">鏈€澶ч暱搴?/param>
            <param name="argumentName">鍙傛暟鍚嶇О</param>
            <remarks>
            褰撳墠璁剧疆锛氫笉鍏佽涓虹┖锛屼笉鍏佽涓虹┖涓?鍏ㄧ┖鏍硷紝涓嶅厑璁歌秴鍑烘渶澶ч暱搴?
            璀﹀憡锛氱┖鏍间細琚埅鍙?
            </remarks>
        </member>
        <member name="M:Share.Framework.SqlDBArgumentUtility.CheckStringArrayArgument(System.String[]@,System.String)">
            <summary>
            妫€鏌ュ瓧绗︿覆鏁扮粍鍙傛暟锛屽鏋滀笉绗﹀悎瑕佹眰锛屾姏鍑哄紓甯?
            </summary>
            <param name="argument">寰呮鏌ョ殑瀛楃涓叉暟缁勫弬鏁?/param>
            <param name="argumentName">鍙傛暟鍚嶇О</param>
            <remarks>
            褰撳墠璁剧疆锛氭暟缁勪笉鍏佽涓虹┖锛岄暱搴︿笉鍏佽涓?锛涘瓧绗︿覆涓嶈兘涓虹┖涓?鍏ㄧ┖鏍?
            璀﹀憡锛氭暟缁勫唴绌烘牸浼氳鎴彇
            </remarks>
        </member>
        <member name="M:Share.Framework.SqlDBArgumentUtility.CheckStringArrayArgument(System.String[]@,System.Int32,System.String)">
            <summary>
            妫€鏌ュ瓧绗︿覆鏁扮粍鍙傛暟锛屽鏋滀笉绗﹀悎瑕佹眰锛屾姏鍑哄紓甯?
            </summary>
            <param name="argument">寰呮鏌ョ殑瀛楃涓叉暟缁勫弬鏁?/param>
            <param name="maxLength">姣忎釜瀛楃涓插厑璁哥殑鏈€澶ч暱搴?/param>
            <param name="argumentName">鍙傛暟鍚嶇О</param>
            <remarks>
            褰撳墠璁剧疆锛氭暟缁勪笉鍏佽涓虹┖锛岄暱搴︿笉鍏佽涓?锛涘瓧绗︿覆涓嶈兘涓虹┖涓?鍏ㄧ┖鏍硷紱瀛楃涓查暱搴︿笉鑳借秴杩噈axLength
            璀﹀憡锛氭暟缁勫唴绌烘牸浼氳鎴彇
            </remarks>
        </member>
        <member name="M:Share.Framework.SqlDBArgumentUtility.CheckIntArgument(System.Int32@,System.Int32,System.Int32,System.String)">
            <summary>
            鏁存暟鍙傛暟妫€鏌?
            </summary>
            <param name="argument">鍙傛暟鍊?/param>
            <param name="minvalue">鏈€灏忓€?/param>
            <param name="maxvalue">鏈€澶у€?/param>
            <param name="argumentName">鍙傛暟鍚嶇О</param>
        </member>
        <member name="T:Share.Framework.Caching.OpenCache2`2">
            <summary>
            浠呬粎鐢ㄤ簬瀛樻斁缁撴瀯鍖?struct)鏁版嵁鐨勭殑缂撳瓨锛?
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:Share.Framework.Caching.IOpenCache`2._cache">
            <summary>
            鍐呴儴缂撳瓨杞戒綋锛?
            </summary>
        </member>
        <member name="M:Share.Framework.Caching.IOpenCache`2.#ctor">
            <summary>
            鏋勯€犲嚱鏁?
            </summary>
        </member>
        <member name="M:Share.Framework.Caching.IOpenCache`2.Add(`0,`1)">
            <summary>
            澧炲姞鏁版嵁鍒扮紦瀛樸€?
            </summary>
            <param name="tKey">閿€?/param>
            <param name="tValue">鏁版嵁</param>
        </member>
        <member name="M:Share.Framework.Caching.IOpenCache`2.Contains(`0)">
            <summary>
            妫€鏌ョ紦瀛樹腑鏄惁鍖呭惈鎸囧畾鐨勯敭鍊笺€?
            </summary>
            <param name="tKey">閿€?/param>
            <returns></returns>
        </member>
        <member name="M:Share.Framework.Caching.IOpenCache`2.Remove(`0)">
            <summary>
            浠庢寚瀹氱殑鍖哄煙绉婚櫎鎸囧畾鐨勪俊鎭€?
            </summary>
            <param name="tKey">閿€?/param>
        </member>
        <member name="M:Share.Framework.Caching.IOpenCache`2.TryGetValue(`0)">
            <summary>
            鍙杢Key鎵€鎸囧畾鐨勯敭鍊肩殑鏁版嵁
            </summary>
            <param name="tKey">閿€?/param>
            <returns></returns>
        </member>
        <member name="M:Share.Framework.Caching.IOpenCache`2.SetValue(`0,`1)">
            <summary>
            閲嶆柊璁剧疆宸茬粡瀛樺湪鐨勯敭鍊肩殑鏁板€?
            </summary>
            <param name="tKey">閿€?/param>
            <param name="tValue">鏂版暟鍊?/param>
        </member>
        <member name="M:Share.Framework.Caching.IOpenCache`2.GetAllData">
            <summary>
            浠庣紦瀛樹腑鍙栧叏閮ㄧ殑鏁版嵁.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Share.Framework.Caching.IOpenCache`2.Clear">
            <summary>
            娓呯┖缂撳瓨鐨勬暟鎹€?
            </summary>
        </member>
        <member name="M:Share.Framework.Caching.IOpenCache`2.Dispose">
            <summary>
            瀹炵幇IDisposable.Dispose()
            </summary>
        </member>
        <member name="P:Share.Framework.Caching.IOpenCache`2.Count">
            <summary>
            缂撳瓨鐨勫疄闄呭厓绱犳暟閲忥紟
            </summary>
        </member>
        <member name="T:Share.Framework.Security.ISymmetricCryptoProvider">
            <summary>
            瀵圭О鍔犲瘑Provider鎺ュ彛
            </summary>
        </member>
        <member name="M:Share.Framework.Security.ISymmetricCryptoProvider.Encrypt(System.Byte[])">
            <summary>
            鍔犲瘑
            </summary>
            <param name="data">寰呭姞瀵嗘暟鎹?byte[])</param>
            <returns>鍔犲瘑鍚庢暟鎹?byte[])</returns>
        </member>
        <member name="M:Share.Framework.Security.ISymmetricCryptoProvider.Encrypt(System.String)">
            <summary>
            鍔犲瘑
            </summary>
            <param name="data">寰呭姞瀵嗘暟鎹?瀛楃涓?</param>
            <returns>鍔犲瘑鍚庢暟鎹?Base64String)</returns>
        </member>
        <member name="M:Share.Framework.Security.ISymmetricCryptoProvider.EncryptToBytes(System.String)">
            <summary>
            鍔犲瘑
            </summary>
            <param name="data">寰呭姞瀵嗘暟鎹?瀛楃涓?</param>
            <returns>鍔犲瘑鍚庢暟鎹?byte[])</returns>
        </member>
        <member name="M:Share.Framework.Security.ISymmetricCryptoProvider.Decrypt(System.Byte[])">
            <summary>
            瑙ｅ瘑
            </summary>
            <param name="data">寰呰В瀵嗘暟鎹?byte[])</param>
            <returns>瑙ｅ瘑鍚庢暟鎹?byte[])</returns>
        </member>
        <member name="M:Share.Framework.Security.ISymmetricCryptoProvider.Decrypt(System.String)">
            <summary>
            瑙ｅ瘑
            </summary>
            <param name="data">寰呰В瀵嗘暟鎹?Base64String)</param>
            <returns>鍔犲瘑鍚庢暟鎹?瀛楃涓?</returns>
        </member>
        <member name="M:Share.Framework.Security.ISymmetricCryptoProvider.DecryptToBytes(System.String)">
            <summary>
            瑙ｅ瘑
            </summary>
            <param name="data">寰呰В瀵嗘暟鎹?Base64String)</param>
            <returns>瑙ｅ瘑鍚庢暟鎹?byte[])</returns>
        </member>
        <member name="M:Share.Framework.Security.ISymmetricCryptoProvider.GenerateKey">
            <summary>
            鐢熸垚瀵嗛挜
            </summary>
            <returns>瀵嗛挜</returns>
        </member>
        <member name="M:Share.Framework.Security.ISymmetricCryptoProvider.GenerateIV">
            <summary>
            鐢熸垚鍒濆鍚戦噺IV
            </summary>
            <returns>鍒濊瘯鍚戦噺IV</returns>
        </member>
        <member name="P:Share.Framework.Security.ISymmetricCryptoProvider.Algorithm">
            <summary>
            鍔犲瘑绠楁硶
            </summary>
        </member>
        <member name="P:Share.Framework.Security.ISymmetricCryptoProvider.Key">
            <summary>
            鑾峰彇/璁剧疆褰撳墠浣跨敤鐨凨ey(Base64String)
            </summary>
        </member>
        <member name="P:Share.Framework.Security.ISymmetricCryptoProvider.IV">
            <summary>
            鑾峰彇/璁剧疆褰撳墠浣跨敤鐨処V(Base64String)
            </summary>
        </member>
        <member name="T:Share.Framework.Logging.LogXmlLayout">
            <summary>
            鏃ュ織XML杈撳嚭鏍煎紡
            </summary>
        </member>
        <member name="M:Share.Framework.Logging.LogXmlLayout.ActivateOptions">
            <summary>
            婵€娲婚€夐」锛堟棤锛?
            </summary>
        </member>
        <member name="M:Share.Framework.Logging.LogXmlLayout.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            鏍煎紡鍖?
            </summary>
            <param name="writer">璁板綍鍣?/param>
            <param name="loggingEvent">鏃ュ織浜嬩欢</param>
        </member>
        <member name="T:Share.Framework.Data.SqlErrorCode">
            <summary>
            SQLServer閿欒浠ｇ爜
            </summary>
        </member>
        <member name="F:Share.Framework.Data.SqlErrorCode.NotNull">
            <summary>
            闈炵┖
            </summary>
        </member>
        <member name="F:Share.Framework.Data.SqlErrorCode.ForeignKey">
            <summary>
            澶栭敭
            </summary>
        </member>
        <member name="F:Share.Framework.Data.SqlErrorCode.UniqueIndex">
            <summary>
            鎯熶竴绱㈠紩
            </summary>
        </member>
        <member name="F:Share.Framework.Data.SqlErrorCode.PrimaryKey">
            <summary>
            涓婚敭锛堝€欓€夐敭锛?
            </summary>
        </member>
        <member name="T:Share.Framework.Data.OracleErrorCode">
            <summary>
            Oracle閿欒浠ｇ爜
            </summary>
        </member>
        <member name="F:Share.Framework.Data.OracleErrorCode.ForeignKeyInsertUpdate">
            <summary>
            澶栭敭鎻掑叆/淇敼
            </summary>
        </member>
        <member name="F:Share.Framework.Data.OracleErrorCode.ForeignKeyDelete">
            <summary>
            澶栭敭鍒犻櫎
            </summary>
        </member>
        <member name="T:Share.Framework.Security.Hash">
            <summary>
            鍝堝笇
            </summary>
        </member>
        <member name="M:Share.Framework.Security.Hash.GetProvider">
            <summary>
            鑾峰彇榛樿Provider
            </summary>
            <returns>鍝堝笇Provider</returns>
        </member>
        <member name="M:Share.Framework.Security.Hash.GetProvider(System.String)">
            <summary>
            鏍规嵁Provider鍚嶇О鑾峰彇Provider
            </summary>
            <param name="providerName">Provider鍚嶇О</param>
            <returns>鍝堝笇Provider</returns>
        </member>
        <member name="M:Share.Framework.Security.Hash.GetConfigProvider(System.String)">
            <summary>
            鏍规嵁Provider鍚嶇О鑾峰彇Provider
            </summary>
            <param name="providerName">Provider鍚嶇О</param>
            <returns>Provider</returns>
        </member>
        <member name="P:Share.Framework.Security.Hash.ProviderConfiguration">
            <summary>
            Provider閰嶇疆
            </summary>
        </member>
        <member name="P:Share.Framework.Security.Hash.DefaultProviderName">
            <summary>
            榛樿Provider鍚嶇О
            </summary>
        </member>
        <member name="T:Share.Framework.MSOffice.ExcelUtility">
            <summary>
             Excel鍔熻兘绫?
            </summary>
        </member>
        <member name="M:Share.Framework.MSOffice.ExcelUtility.IsExcelFile(System.String)">
            <summary>
             鏍规嵁鏂囦欢鍚庣紑鍒ゆ柇鏄惁鏄痚xcel鏂囦欢
            </summary>
            <param name="fileName">鏂囦欢鍚嶇О</param>
            <returns>鏂囦欢鏄惁鏄痚xcel鏂囦欢</returns>
        </member>
        <member name="M:Share.Framework.MSOffice.ExcelUtility.GetOleDbConnection(System.String)">
            <summary>
             鑾峰彇鍒癳xcel鏂囦欢鐨勮繛鎺?
            </summary>
            <param name="fileName">鏂囦欢鍚嶇О</param>
            <returns>鍒癳xcel鏂囦欢鐨勮繛鎺?/returns>
        </member>
        <member name="M:Share.Framework.MSOffice.ExcelUtility.GetDataSet(System.String,System.String)">
            <summary>
             鏍规嵁鏌ヨ璇█鑾峰彇Excel鏁版嵁琛ㄤ腑鏁版嵁
            </summary>
            <param name="fileName">鏂囦欢鍚嶇О</param>
            <param name="cmdStr">鏌ヨ璇彞</param>
            <returns>DataSet瀵硅薄</returns>
        </member>
        <member name="M:Share.Framework.MSOffice.ExcelUtility.GetDataSetInSheet(System.String,System.String)">
            <summary>
             鏍规嵁鏁版嵁琛ㄥ悕绉拌幏鍙朎xcel鏁版嵁琛ㄤ腑鏁版嵁
            </summary>
            <param name="fileName">鏂囦欢鍚嶇О</param>
            <param name="sheetName">宸ヤ綔琛ㄥ悕绉?/param>
            <returns>鏁版嵁琛ㄤ腑鏁版嵁(DataSet)</returns>
        </member>
        <member name="M:Share.Framework.MSOffice.ExcelUtility.IsRowEmpty(System.Data.DataRow,System.Int32)">
            <summary>
             妫€鏌ヨ鏄惁涓虹┖琛?
            </summary>
            <param name="curRow">褰撳墠琛?/param>
            <param name="colRange">鍒楁暟鑼冨洿</param>
            <returns>鏄惁涓虹┖琛?/returns>
        </member>
        <member name="M:Share.Framework.MSOffice.ExcelUtility.GetSheetNames(System.String)">
            <summary>
             鑾峰彇鍙闂殑宸ヤ綔琛ㄥ悕绉伴泦鍚?
            </summary>
            <param name="fileName">鏂囦欢鍚嶇О</param>
            <returns>宸ヤ綔琛ㄥ悕绉伴泦鍚?/returns>
        </member>
        <member name="M:Share.Framework.MSOffice.ExcelUtility.IsSheetExist(System.String,System.String)">
            <summary>
             鎸囧畾鍚嶇О鐨勫伐浣滆〃鏄惁瀛樺湪
            </summary>
            <param name="fileName">鏂囦欢鍚嶇О</param>
            <param name="sheetName">宸ヤ綔琛ㄥ悕</param>
            <returns></returns>
        </member>
        <member name="M:Share.Framework.MSOffice.ExcelUtility.IsTableEmpty(System.Data.DataTable,System.Int32)">
            <summary>
             鏁版嵁琛ㄦ槸鍚︿负绌?
            </summary>
            <param name="dataTable">鏁版嵁琛?/param>
            <param name="colRange">妫€娴嬬殑鍒楁暟</param>
            <returns>鏁版嵁琛ㄦ槸鍚︿负绌?/returns>
        </member>
        <member name="M:Share.Framework.MSOffice.ExcelUtility.ExportData(System.String,System.String)">
            <summary>
             瀵煎嚭鏁版嵁
            </summary>
            <param name="fileName">鏂囦欢鍚嶇О</param>
            <param name="content">鍐呭</param>
        </member>
        <member name="M:Share.Framework.MSOffice.ExcelUtility.ExportData(System.String,System.Web.UI.Control)">
            <summary>
             瀵煎嚭鏁版嵁
            </summary>
            <param name="fileName">鏂囦欢鍚嶇О</param>
            <param name="sourceControl">婧愭帶浠?/param>
        </member>
        <member name="M:Share.Framework.MSOffice.ExcelUtility.ExportData(System.String,System.Web.UI.WebControls.GridView)">
            <summary>
             瀵煎嚭鏁版嵁
            </summary>
            <param name="fileName">鏂囦欢鍚嶇О</param>
            <param name="sourceControl">婧愭帶浠?GridView)</param>
        </member>
        <member name="M:Share.Framework.MSOffice.ExcelUtility.ExportData(System.String,System.Web.UI.WebControls.GridView,System.Boolean,System.Boolean)">
            <summary>
             瀵煎嚭鏁版嵁
            </summary>
            <param name="fileName">鏂囦欢鍚嶇О</param>
            <param name="sourceControl">婧愭帶浠?GridView)</param>
            <param name="exportFirstColumn">鏄惁瀵煎嚭绗竴鍒?/param>
            <param name="exportLastColumn">鏄惁瀵煎嚭鏈€鍚庝竴鍒?/param>
        </member>
        <member name="M:Share.Framework.MSOffice.ExcelUtility.ExportData(System.String,System.Data.DataSet)">
            <summary>
             灏咲ataSet涓殑鏁版嵁瀵煎嚭鍒癊xcel
             锛堝彧鑳藉鍑虹1涓狣ataTable锛?
            </summary>
            <param name="fileName">鏂囦欢鍚嶇О</param>
            <param name="ds">DataSet</param>
        </member>
        <member name="M:Share.Framework.MSOffice.ExcelUtility.ExportData(System.String,System.Data.DataTable)">
            <summary>
             灏咲ataTable涓殑鏁版嵁瀵煎嚭鍒癊xcel
            </summary>
            <param name="fileName">鏂囦欢鍚嶇О</param>
            <param name="dt">DataTable</param>
        </member>
        <member name="M:Share.Framework.MSOffice.ExcelUtility.FormatSheetName(System.String)">
            <summary>
            鏍煎紡鍖栭〉鍚嶇О
            </summary>
            <param name="sheetName">婧愰〉鍚嶇О</param>
            <returns>鏍煎紡鍖栫殑椤靛悕绉?/returns>
            <remarks>
            濡傛灉鏄嫳鏂囧悕绉帮紝鍘绘帀$
            濡傛灉鏄腑鏂囧悕绉帮紝鍘绘帀鍓嶅悗鐨勫崟寮曞彿锛屽啀鍘绘帀鍚庨潰鐨?
            </remarks>
        </member>
        <member name="T:Share.Framework.External.Win32API">
            <summary>
            Win32API
            </summary>
            <remarks>
            鎻愪緵Kernel32銆乽ser32涓殑澶栭儴鍑芥暟璋冪敤
            </remarks>
        </member>
        <member name="T:Share.Framework.Resource.ResourceHelper">
            <summary>
            璧勬簮鏂囦欢澶勭悊绫?
            </summary>
        </member>
        <member name="M:Share.Framework.Resource.ResourceHelper.GetResourceValueByKey(System.String)">
            <summary>
            鏍规嵁閿幏寰楀€?
            </summary>
            <param name="key">璧勬簮鏂囦欢鐨凨ey鍊?/param>
            <returns>璧勬簮鏂囦欢鐨刅alue鍊?/returns>
        </member>
        <member name="M:Share.Framework.Resource.ResourceHelper.GetResourceValueByKey(System.String,System.String)">
            <summary>
            鏍规嵁閿幏寰楀€?
            </summary>
            <param name="key">璧勬簮鏂囦欢鐨凨ey鍊?/param>
            <param name="language">璇█鍖呮枃浠跺悕</param>
            <returns>璧勬簮鏂囦欢鐨刅alue鍊?/returns>
        </member>
        <member name="M:Share.Framework.Resource.ResourceHelper.GetGlobalResource(System.String)">
            <summary>
            鏍规嵁閿幏寰楀€?
            (App_GlobalResources/Resources.resx)
            </summary>
            <param name="key">璧勬簮鏂囦欢鐨凨ey鍊?/param>
            <returns>璧勬簮鏂囦欢鐨刅alue鍊?/returns>
        </member>
        <member name="M:Share.Framework.Resource.ResourceHelper.GetGlobalResource(System.String,System.String,System.String)">
            <summary>
            鏍规嵁閿幏寰楀€?
            </summary>
            <param name="resourceFile">璧勬簮鏂囦欢鍚?/param>
            <param name="key">璧勬簮鏂囦欢鐨凨ey鍊?/param>
            <param name="language">璇█鍖呮枃浠跺悕</param>
            <returns>璧勬簮鏂囦欢鐨刅alue鍊?/returns>
        </member>
        <member name="M:Share.Framework.Resource.ResourceHelper.GetGlobalResourceString(System.String)">
            <summary>
            鏍规嵁閿幏寰楀€?
            (App_LocalResources/Resources.resx)
            </summary>
            <param name="key">璧勬簮鏂囦欢鐨凨ey鍊?/param>
            <returns>璧勬簮鏂囦欢鐨刅alue鍊?/returns>
        </member>
        <member name="M:Share.Framework.Resource.ResourceHelper.GetGlobalResourceString(System.String,System.String,System.String)">
            <summary>
            鏍规嵁閿幏寰楀€?
            </summary>
            <param name="resourceFile">璧勬簮鏂囦欢鍚?/param>
            <param name="key">璧勬簮鏂囦欢鐨凨ey鍊?/param>
            <param name="language">璇█鍖呮枃浠跺悕</param>
            <returns>璧勬簮鏂囦欢鐨刅alue鍊?/returns>
        </member>
        <member name="M:Share.Framework.Resource.ResourcePage.GetResourceValueByKey(System.String,System.String)">
            <summary>
            鏍规嵁閿幏寰楀€?
            </summary>
            <param name="key">閿?/param>
            <param name="Language">璇█</param>
            <returns></returns>
        </member>
        <member name="T:Share.Framework.Caching.DistributedCacheSetting">
            <summary>
            鍒嗗竷寮忕紦瀛樿缃」
            </summary>
        </member>
        <member name="M:Share.Framework.Caching.DistributedCacheSetting.#ctor">
            <summary>
            鏋勯€犲垎甯冨紡缂撳瓨璁剧疆椤?
            </summary>
        </member>
        <member name="M:Share.Framework.Caching.DistributedCacheSetting.#ctor(System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            鏋勯€犲垎甯冨紡缂撳瓨璁剧疆椤?
            </summary>
            <param name="name">鍚嶇О</param>
            <param name="host">瀹夸富</param>
            <param name="port">绔彛</param>
            <param name="service">鏈嶅姟鍚嶇О</param>
            <param name="cacheName">缂撳瓨鍚嶇О</param>
        </member>
        <member name="P:Share.Framework.Caching.DistributedCacheSetting.Name">
            <summary>
            鍚嶇О
            </summary>
        </member>
        <member name="P:Share.Framework.Caching.DistributedCacheSetting.Host">
            <summary>
            瀹夸富
            </summary>
        </member>
        <member name="P:Share.Framework.Caching.DistributedCacheSetting.Port">
            <summary>
            绔彛
            </summary>
        </member>
        <member name="P:Share.Framework.Caching.DistributedCacheSetting.Service">
            <summary>
            鏈嶅姟鍚嶇О
            </summary>
        </member>
        <member name="P:Share.Framework.Caching.DistributedCacheSetting.CacheName">
            <summary>
            缂撳瓨鍚嶇О
            </summary>
        </member>
        <member name="T:Share.Framework.Security.SymmetricCryptoProvider">
            <summary>
            瀵圭О鍔犲瘑Provider
            </summary>
        </member>
        <member name="M:Share.Framework.Security.SymmetricCryptoProvider.#ctor">
            <summary>
            瀵圭О鍔犲瘑
            </summary>
        </member>
        <member name="M:Share.Framework.Security.SymmetricCryptoProvider.#ctor(System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            瀵圭О鍔犲瘑
            </summary>
            <param name="algorithm">绠楁硶</param>
        </member>
        <member name="M:Share.Framework.Security.SymmetricCryptoProvider.#ctor(System.Security.Cryptography.SymmetricAlgorithm,System.String,System.String)">
            <summary>
            瀵圭О鍔犲瘑
            </summary>
            <param name="algorithm">绠楁硶</param>
            <param name="key">Key(Base64String)</param>
            <param name="iv">IV(Base64String)</param>
        </member>
        <member name="M:Share.Framework.Security.SymmetricCryptoProvider.#ctor(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[],System.Byte[])">
            <summary>
            瀵圭О鍔犲瘑
            </summary>
            <param name="algorithm">绠楁硶</param>
            <param name="key">Key</param>
            <param name="iv">IV</param>
        </member>
        <member name="M:Share.Framework.Security.SymmetricCryptoProvider.Encrypt(System.Byte[])">
            <summary>
            鍔犲瘑
            </summary>
            <param name="data">寰呭姞瀵嗘暟鎹?byte[])</param>
            <returns>鍔犲瘑鍚庢暟鎹?byte[])</returns>
        </member>
        <member name="M:Share.Framework.Security.SymmetricCryptoProvider.Encrypt(System.String)">
            <summary>
            鍔犲瘑
            </summary>
            <param name="data">寰呭姞瀵嗘暟鎹?瀛楃涓?</param>
            <returns>鍔犲瘑鍚庢暟鎹?Base64String)</returns>
        </member>
        <member name="M:Share.Framework.Security.SymmetricCryptoProvider.EncryptToBytes(System.String)">
            <summary>
            鍔犲瘑
            </summary>
            <param name="data">寰呭姞瀵嗘暟鎹?瀛楃涓?</param>
            <returns>鍔犲瘑鍚庢暟鎹?byte[])</returns>
        </member>
        <member name="M:Share.Framework.Security.SymmetricCryptoProvider.Decrypt(System.Byte[])">
            <summary>
            瑙ｅ瘑
            </summary>
            <param name="data">寰呰В瀵嗘暟鎹?byte[])</param>
            <returns>瑙ｅ瘑鍚庢暟鎹?byte[])</returns>
        </member>
        <member name="M:Share.Framework.Security.SymmetricCryptoProvider.Decrypt(System.String)">
            <summary>
            瑙ｅ瘑
            </summary>
            <param name="data">寰呰В瀵嗘暟鎹?Base64String)</param>
            <returns>瑙ｅ瘑鍚庢暟鎹?瀛楃涓?</returns>
        </member>
        <member name="M:Share.Framework.Security.SymmetricCryptoProvider.DecryptToBytes(System.String)">
            <summary>
            瑙ｅ瘑
            </summary>
            <param name="data">寰呰В瀵嗘暟鎹?Base64String)</param>
            <returns>瑙ｅ瘑鍚庢暟鎹?byte[])</returns>
        </member>
        <member name="M:Share.Framework.Security.SymmetricCryptoProvider.GenerateKey">
            <summary>
            鐢熸垚瀵嗛挜
            </summary>
            <returns>瀵嗛挜</returns>
        </member>
        <member name="M:Share.Framework.Security.SymmetricCryptoProvider.GenerateIV">
            <summary>
            鐢熸垚鍒濆鍚戦噺IV
            </summary>
            <returns>鍒濊瘯鍚戦噺IV</returns>
        </member>
        <member name="P:Share.Framework.Security.SymmetricCryptoProvider.Algorithm">
            <summary>
            鍔犲瘑绠楁硶
            </summary>
        </member>
        <member name="P:Share.Framework.Security.SymmetricCryptoProvider.Key">
            <summary>
            鑾峰彇/璁剧疆褰撳墠浣跨敤鐨凨ey(Base64String)
            </summary>
        </member>
        <member name="P:Share.Framework.Security.SymmetricCryptoProvider.IV">
            <summary>
            鑾峰彇/璁剧疆褰撳墠浣跨敤鐨処V(Base64String)
            </summary>
        </member>
        <member name="T:Share.Framework.Security.IAsymmetricCryptoKey">
            <summary>
            闈炲绉板姞瀵嗗瘑閽ユ帴鍙?
            </summary>
        </member>
        <member name="M:Share.Framework.Security.IAsymmetricCryptoKey.Save(System.String,System.String)">
            <summary>
            瀵嗛挜淇濆瓨
            </summary>
            <param name="publicKeyFile"></param>
            <param name="privateKeyFile"></param>
        </member>
        <member name="P:Share.Framework.Security.IAsymmetricCryptoKey.PublicKey">
            <summary>
            鍏挜
            </summary>
        </member>
        <member name="P:Share.Framework.Security.IAsymmetricCryptoKey.PrivateKey">
            <summary>
            绉侀挜
            </summary>
        </member>
        <member name="T:Share.Framework.Security.IAsymmetricCryptoProvider">
            <summary>
            闈炲绉板姞瀵哖rovider鎺ュ彛
            </summary>
        </member>
        <member name="M:Share.Framework.Security.IAsymmetricCryptoProvider.Encrypt(System.String)">
            <summary>
            鍔犲瘑
            </summary>
            <param name="data">寰呭姞瀵嗘暟鎹?瀛楃涓?</param>
            <returns>鍔犲瘑鍚庢暟鎹?Base64String)</returns>
        </member>
        <member name="M:Share.Framework.Security.IAsymmetricCryptoProvider.Encrypt(System.Byte[])">
            <summary>
            鍔犲瘑
            </summary>
            <param name="data">寰呭姞瀵嗘暟鎹?byte[])</param>
            <returns>鍔犲瘑鍚庢暟鎹?/returns>
        </member>
        <member name="M:Share.Framework.Security.IAsymmetricCryptoProvider.Decrypt(System.String)">
            <summary>
            瑙ｅ瘑
            </summary>
            <param name="data">寰呰В瀵嗘暟鎹?Base64String)</param>
            <returns>鍔犲瘑鍚庢暟鎹?/returns>
        </member>
        <member name="M:Share.Framework.Security.IAsymmetricCryptoProvider.Decrypt(System.Byte[])">
            <summary>
            瑙ｅ瘑
            </summary>
            <param name="data">寰呰В瀵嗘暟鎹?byte[])</param>
            <returns>瑙ｅ瘑鍚庢暟鎹?/returns>
        </member>
        <member name="M:Share.Framework.Security.IAsymmetricCryptoProvider.GenerateKey(System.String@,System.String@)">
            <summary>
            鐢熸垚瀵嗛挜
            </summary>
            <param name="publicKey">鍏挜</param>
            <param name="publicAndPrivateKeys">鍏閽?/param>
        </member>
        <member name="P:Share.Framework.Security.IAsymmetricCryptoProvider.Key">
            <summary>
            瀵嗛挜
            </summary>
        </member>
        <member name="T:Microsoft.ApplicationBlocks.Data.OracleHelper">
            <summary>
            The OracleHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of OracleClient.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.AttachParameters(System.Data.OracleClient.OracleCommand,System.Data.OracleClient.OracleParameter[])">
            <summary>
            This method is used to attach array's of OracleParameters to an OracleCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">an array of OracleParameters tho be added to command</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.AssignParameterValues(System.Data.OracleClient.OracleParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of OracleParameters.
            </summary>
            <param name="commandParameters">array of OracleParameters to be assigned values</param>
            <param name="parameterValues">array of objects holding the values to be assigned</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.PrepareCommand(System.Data.OracleClient.OracleCommand,System.Data.OracleClient.OracleConnection,System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command.
            </summary>
            <param name="command">the OracleCommand to be prepared</param>
            <param name="connection">a valid OracleConnection, on which to execute this command</param>
            <param name="transaction">a valid OracleTransaction, or 'null'</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OracleParameters to be associated with the command or 'null' if no parameters are required</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteNonQuery(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns no resultset and takes no parameters) against the provided OracleConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteNonQuery(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns no resultset) against the specified OracleConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteNonQuery(System.Data.OracleClient.OracleConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns no resultset) against the specified OracleConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteNonQuery(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns no resultset and takes no parameters) against the provided OracleTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteNonQuery(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns no resultset) against the specified OracleTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteNonQuery(System.Data.OracleClient.OracleTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns no resultset) against the specified 
            OracleTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns a resultset) against the database specified in 
            the conneciton string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteDataset(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns a resultset and takes no parameters) against the provided OracleConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteDataset(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns a resultset) against the specified OracleConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteDataset(System.Data.OracleClient.OracleConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns a resultset) against the specified OracleConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteDataset(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns a resultset and takes no parameters) against the provided OracleTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteDataset(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns a resultset) against the specified OracleTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteDataset(System.Data.OracleClient.OracleTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns a resultset) against the specified 
            OracleTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteReader(System.Data.OracleClient.OracleConnection,System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[],Microsoft.ApplicationBlocks.Data.OracleHelper.OracleConnectionOwnership)">
            <summary>
            Create and prepare an OracleCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">a valid OracleConnection, on which to execute this command</param>
            <param name="transaction">a valid OracleTransaction, or 'null'</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OracleParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">indicates whether the connection parameter was provided by the caller, or created by OracleHelper</param>
            <returns>OracleDataReader containing the results of the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             OracleDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             OracleDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OracleDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteReader(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns a resultset and takes no parameters) against the provided OracleConnection. 
            </summary>
            <remarks>
            e.g.:  
             OracleDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <returns>an OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteReader(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns a resultset) against the specified OracleConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             OracleDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteReader(System.Data.OracleClient.OracleConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns a resultset) against the specified OracleConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OracleDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteReader(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns a resultset and takes no parameters) against the provided OracleTransaction. 
            </summary>
            <remarks>
            e.g.:  
             OracleDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteReader(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns a resultset) against the specified OracleTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              OracleDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteReader(System.Data.OracleClient.OracleTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns a resultset) against the specified
            OracleTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OracleDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-Oracle command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-Oracle command</param>
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns a 1x1 resultset) against the database specified in 
            the conneciton string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteScalar(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns a 1x1 resultset and takes no parameters) against the provided OracleConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-Oracle command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteScalar(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns a 1x1 resultset) against the specified OracleConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteScalar(System.Data.OracleClient.OracleConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns a 1x1 resultset) against the specified OracleConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteScalar(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns a 1x1 resultset and takes no parameters) against the provided OracleTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteScalar(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns a 1x1 resultset) against the specified OracleTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelper.ExecuteScalar(System.Data.OracleClient.OracleTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns a 1x1 resultset) against the specified
            OracleTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="T:Microsoft.ApplicationBlocks.Data.OracleHelper.OracleConnectionOwnership">
            <summary>
            this enum is used to indicate weather the connection was provided by the caller, or created by OracleHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:Microsoft.ApplicationBlocks.Data.OracleHelper.OracleConnectionOwnership.Internal">
            <summary>Connection is owned and managed by OracleHelper</summary>
        </member>
        <member name="F:Microsoft.ApplicationBlocks.Data.OracleHelper.OracleConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:Microsoft.ApplicationBlocks.Data.OracleHelperParameterCache">
            <summary>
            OracleHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelperParameterCache.DiscoverSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            resolve at run-time the appropriate set of OracleParameters for a stored procedure
            </summary>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="includeReturnValueParameter">whether or not to include ther return value parameter</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            add parameter array to the cache
            </summary>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="commandParameters">an array of OracleParameters to be cached</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <returns>an array of OracleParameters</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of OracleParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <returns>an array of OracleParameters</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OracleHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of OracleParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="includeReturnValueParameter">a bool value indicating whether the return value parameter should be included in the results</param>
            <returns>an array of OracleParameters</returns>
        </member>
        <member name="T:Microsoft.ApplicationBlocks.Data.OleDbHelper">
            <summary>
            The OleDbHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of OleDbClient.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.AttachParameters(System.Data.OleDb.OleDbCommand,System.Data.OleDb.OleDbParameter[])">
            <summary>
            This method is used to attach array's of OleDbParameters to an OleDbCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">an array of OleDbParameters tho be added to command</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.AssignParameterValues(System.Data.OleDb.OleDbParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of OleDbParameters.
            </summary>
            <param name="commandParameters">array of OleDbParameters to be assigned values</param>
            <param name="parameterValues">array of objects holding the values to be assigned</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.PrepareCommand(System.Data.OleDb.OleDbCommand,System.Data.OleDb.OleDbConnection,System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command.
            </summary>
            <param name="command">the OleDbCommand to be prepared</param>
            <param name="connection">a valid OleDbConnection, on which to execute this command</param>
            <param name="transaction">a valid OleDbTransaction, or 'null'</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OleDbParameters to be associated with the command or 'null' if no parameters are required</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OleDbParameters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbDbCommand (that returns no resultset and takes no parameters) against the provided OleDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns no resultset) against the specified OleDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns no resultset) against the specified OleDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns no resultset and takes no parameters) against the provided OleDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns no resultset) against the specified OleDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns no resultset) against the specified 
            OleDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns a resultset) against the database specified in 
            the conneciton string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns a resultset and takes no parameters) against the provided OleDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns a resultset) against the specified OleDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns a resultset) against the specified OleDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns a resultset and takes no parameters) against the provided OleDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns a resultset) against the specified OleDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns a resultset) against the specified 
            OleDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[],Microsoft.ApplicationBlocks.Data.OleDbHelper.OleDbConnectionOwnership)">
            <summary>
            Create and prepare an OleDbCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">a valid OleDbConnection, on which to execute this command</param>
            <param name="transaction">a valid OleDbTransaction, or 'null'</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OleDbParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">indicates whether the connection parameter was provided by the caller, or created by OleDbHelper</param>
            <returns>OleDbDataReader containing the results of the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OleDbParameters used to execute the command</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OleDbDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns a resultset and takes no parameters) against the provided OleDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns a resultset) against the specified OleDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns a resultset) against the specified OleDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OleDbDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns a resultset and takes no parameters) against the provided OleDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns a resultset) against the specified OleDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              OleDbDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OleDbParameters used to execute the command</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns a resultset) against the specified
            OleDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OleDbDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a 1x1 resultset) against the database specified in 
            the conneciton string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset and takes no parameters) against the provided OleDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset) against the specified OleDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a 1x1 resultset) against the specified OleDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset and takes no parameters) against the provided OleDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset) against the specified OleDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a 1x1 resultset) against the specified
            OleDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="T:Microsoft.ApplicationBlocks.Data.OleDbHelper.OleDbConnectionOwnership">
            <summary>
            this enum is used to indicate weather the connection was provided by the caller, or created by OleDbHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:Microsoft.ApplicationBlocks.Data.OleDbHelper.OleDbConnectionOwnership.Internal">
            <summary>Connection is owned and managed by OleDbHelper</summary>
        </member>
        <member name="F:Microsoft.ApplicationBlocks.Data.OleDbHelper.OleDbConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:Microsoft.ApplicationBlocks.Data.OleDbHelperParameterCache">
            <summary>
            OleDbHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelperParameterCache.DiscoverSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            resolve at run-time the appropriate set of OleDbParameters for a stored procedure
            </summary>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="includeReturnValueParameter">weather or not to onclude ther return value parameter</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            add parameter array to the cache
            </summary>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="commandParameters">an array of OleDbParamters to be cached</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <returns>an array of OleDbParameters</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of OleDbParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <returns>an array of OleDbParameters</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.OleDbHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of OleDbParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="includeReturnValueParameter">a bool value indicating weather the return value parameter should be included in the results</param>
            <returns>an array of OleDbParameters</returns>
        </member>
        <member name="T:Share.Framework.DataConvert.XmlExport`1">
            <summary>
            灏嗙粰瀹氱殑瀵硅薄浠ml搴忓垪鍖栫殑鏂瑰紡瀵煎嚭
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Share.Framework.IDataExport`1">
            <summary>
            鏁版嵁杞崲锛堣浆鍑猴級鎺ュ彛
            </summary>
            <typeparam name="T">闇€瑕佽浆鎹㈢殑绫诲瀷</typeparam>
        </member>
        <member name="M:Share.Framework.DataConvert.XmlExport`1.#ctor(System.String)">
            <summary>
             灏嗗璞″瓨鏀惧埌鎸囧畾鐩綍涓?
            </summary>
            <param name="fileName">xml鏂囦欢璇︾粏璺緞</param>
        </member>
        <member name="M:Share.Framework.DataConvert.XmlExport`1.Export(`0)">
            <summary>
             灏嗗璞″鍑轰繚瀛樹负xml鏍煎紡鐨勬枃浠?
            </summary>
            <param name="t">闇€瑕佸鍑虹殑瀵硅薄</param>
            <returns>true or false</returns>
        </member>
        <member name="M:Share.Framework.DataConvert.XmlExport`1.Export(`0,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             灏嗗璞″鍑轰繚瀛樹负xml鏍煎紡鐨勬枃浠?
            </summary>
            <param name="t">闇€瑕佸鍑虹殑瀵硅薄</param>
            <param name="namespaceAlias">鍛藉悕绌洪棿鍒悕锛坘ey锛氬埆鍚嶏紝value锛氬懡鍚嶇┖闂达級</param>
            <returns>true or false</returns>
        </member>
        <member name="T:Share.Framework.WebUtility">
            <summary>
            Web鍔熻兘绫?
            </summary>
        </member>
        <member name="M:Share.Framework.WebUtility.GetClientUrl(System.String)">
            <summary>
            鏍规嵁鏈嶅姟鍣ㄧ鍦板潃鑾峰彇瀹㈡埛绔湴鍧€
            锛堝鍔犲簲鐢ㄦ牴璺緞锛?
            </summary>
            <param name="serverUrl">鏈嶅姟鍣ㄧ鍦板潃</param>
            <returns>瀹㈡埛绔湴鍧€</returns>
        </member>
        <member name="M:Share.Framework.WebUtility.ShowMessagePage(System.String)">
            <summary>
            杞埌鎻愮ず淇℃伅椤?
            </summary>
            <param name="msg">鎻愮ず淇℃伅</param>
        </member>
        <member name="M:Share.Framework.WebUtility.ShowMessagePage(System.String,System.String)">
            <summary>
            杞埌鎻愮ず淇℃伅椤?
            </summary>
            <param name="msg">鎻愮ず淇℃伅</param>
            <param name="returnUrl">杩斿洖URL</param>
        </member>
        <member name="M:Share.Framework.WebUtility.ShowMessagePage(System.String,System.String,System.String)">
            <summary>
            杞埌鎻愮ず淇℃伅椤?
            </summary>
            <param name="msg">鎻愮ず淇℃伅</param>
            <param name="returnUrl">杩斿洖URL</param>
            <param name="messagePageUrl">鏄剧ず娑堟伅鐨勯〉闈?/param>
        </member>
        <member name="M:Share.Framework.WebUtility.RemoveAuthCookieForDomain">
            <summary>
            绉婚櫎韬唤楠岃瘉绁?
            锛堝彧鏀寔缃戠珯涓?绾у煙鍚嶇殑鎯呭喌锛?
            </summary>
        </member>
        <member name="M:Share.Framework.WebUtility.SetAuthCookieForDomain(System.String,System.Boolean)">
            <summary>
            鍒涘缓鍩熻韩浠介獙璇丆ookie锛孋ookie璺緞瀛樻斁浜庢牴涓?
            锛堝彧鏀寔缃戠珯涓?绾у煙鍚嶇殑鎯呭喌锛?
            </summary>
            <param name="userName">鐢ㄦ埛鍚?/param>
            <param name="createPersistentCookie">鏄惁鍒涘缓姘镐箙Cookie</param>
        </member>
        <member name="M:Share.Framework.WebUtility.SetAuthCookieForDomain(System.String,System.Boolean,System.String)">
            <summary>
            鍒涘缓鍩熻韩浠介獙璇丆ookie
            锛堝彧鏀寔缃戠珯涓?绾у煙鍚嶇殑鎯呭喌锛?
            </summary>
            <param name="userName">鐢ㄦ埛鍚?/param>
            <param name="createPersistentCookie">鏄惁鍒涘缓姘镐箙Cookie</param>
            <param name="cookiePath">璺緞</param>
        </member>
        <member name="M:Share.Framework.WebUtility.ExportToFile(System.String,System.Web.UI.Control,System.String)">
            <summary>
            瀵煎嚭鍒版枃浠?
            </summary>
            <param name="fileName">鏂囦欢鍚?/param>
            <param name="control">鎺т欢</param>
            <param name="fileType">鏂囦欢绫诲瀷</param>
        </member>
        <member name="M:Share.Framework.WebUtility.ExportToFile(System.String,System.String,System.String)">
            <summary>
            瀵煎嚭鍒版枃浠?
            </summary>
            <param name="fileName">鏂囦欢鍚?/param>
            <param name="content">鍐呭</param>
            <param name="fileType">鏂囦欢绫诲瀷</param>
        </member>
        <member name="M:Share.Framework.WebUtility.DownloadFile(System.String)">
            <summary>
            涓嬭浇鏂囦欢(寮瑰嚭涓嬭浇鏂囦欢)
            </summary>
            <param name="filePath">鏂囦欢</param>
        </member>
        <member name="P:Share.Framework.WebUtility.AppPath">
            <summary>
            搴旂敤璺緞
            </summary>
        </member>
        <member name="P:Share.Framework.WebUtility.MessagePage">
            <summary>
            娑堟伅椤甸潰鍦板潃
            </summary>
        </member>
        <member name="P:Share.Framework.WebUtility.TransferInfo">
            <summary>
            杞悜浼犺緭淇℃伅
            </summary>
        </member>
        <member name="P:Share.Framework.WebUtility.TransferURL">
            <summary>
            杞悜鍦板潃
            </summary>
        </member>
        <member name="P:Share.Framework.WebUtility.CookieDomain">
            <summary>
            鑾峰彇鏈嶅姟鍣ㄤ竴绾у煙鍚?
            </summary>
        </member>
        <member name="T:Share.Framework.ImageThumbnailMode">
            <summary>
            鍥剧墖缂╃暐鏂瑰紡
            </summary>
        </member>
        <member name="F:Share.Framework.ImageThumbnailMode.HW">
            <summary>
            鎸囧畾鐨勯珮瀹界缉鏀撅紙鍙兘鍙樺舰锛?
            </summary>
        </member>
        <member name="F:Share.Framework.ImageThumbnailMode.HWM">
            <summary>
            鎸囧畾鐨勯珮瀹界缉鏀撅紙涓嶅彉褰級
            </summary>
        </member>
        <member name="F:Share.Framework.ImageThumbnailMode.HWO">
            <summary>
            鎸囧畾楂樺缂╂斁锛堝彲鑳藉彉褰級锛堣繃灏忓垯涓嶅彉锛?
            </summary>
        </member>
        <member name="F:Share.Framework.ImageThumbnailMode.W">
            <summary>
            鎸囧畾瀹斤紝楂樻寜姣斾緥
            </summary>
        </member>
        <member name="F:Share.Framework.ImageThumbnailMode.WO">
            <summary>
            鎸囧畾瀹斤紙杩囧皬鍒欎笉鍙橈級锛岄珮鎸夋瘮渚?
            </summary>
        </member>
        <member name="F:Share.Framework.ImageThumbnailMode.H">
            <summary>
            鎸囧畾楂橈紝瀹芥寜姣斾緥
            </summary>
        </member>
        <member name="F:Share.Framework.ImageThumbnailMode.HO">
            <summary>
            鎸囧畾楂橈紙杩囧皬鍒欎笉鍙橈級锛屽鎸夋瘮渚?
            </summary>
        </member>
        <member name="F:Share.Framework.ImageThumbnailMode.CUT">
            <summary>
            鎸囧畾楂樺瑁佸噺锛堜笉鍙樺舰锛?
            </summary>
        </member>
        <member name="T:Share.Framework.ImageUtility">
            <summary>
            鍥剧墖鍔熻兘绫?
            </summary>
        </member>
        <member name="M:Share.Framework.ImageUtility.MakeThumbnail(System.Drawing.Image,System.Int32,System.Int32,Share.Framework.ImageThumbnailMode)">
            <summary>
            鍒朵綔鍥剧墖鐨勭缉鐣ュ浘
            </summary>
            <param name="originalImage">鍘熷浘</param>
            <param name="width">缂╃暐鍥剧殑瀹斤紙鍍忕礌锛?/param>
            <param name="height">缂╃暐鍥剧殑楂橈紙鍍忕礌锛?/param>
            <param name="mode">缂╃暐鏂瑰紡</param>
            <returns>缂╃暐鍥?/returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:Share.Framework.ImageUtility.MakeThumbnail(System.IO.Stream,System.String,System.Int32,System.Int32,Share.Framework.ImageThumbnailMode)">
            <summary>
            鍒朵綔鍥剧墖鐨勭缉鐣ュ浘
            </summary>
            <param name="originalStream">鍘熷浘</param>
            <param name="thumbnailPath">淇濆瓨缂╃暐鍥剧殑璺緞</param>
            <param name="width">缂╃暐鍥剧殑瀹斤紙鍍忕礌锛?/param>
            <param name="height">缂╃暐鍥剧殑楂橈紙鍍忕礌锛?/param>
            <param name="mode">缂╃暐鏂瑰紡</param>
        </member>
        <member name="M:Share.Framework.ImageUtility.MakeThumbnail(System.Drawing.Image,System.String,System.Int32,System.Int32,Share.Framework.ImageThumbnailMode)">
            <summary>
            鍒朵綔鍥剧墖鐨勭缉鐣ュ浘
            </summary>
            <param name="originalImage">鍘熷浘</param>
            <param name="thumbnailPath">淇濆瓨缂╃暐鍥剧殑璺緞</param>
            <param name="width">缂╃暐鍥剧殑瀹斤紙鍍忕礌锛?/param>
            <param name="height">缂╃暐鍥剧殑楂橈紙鍍忕礌锛?/param>
            <param name="mode">缂╃暐鏂瑰紡</param>
        </member>
        <member name="M:Share.Framework.ImageUtility.MakeThumbnail(System.String,System.String,System.Int32,System.Int32,Share.Framework.ImageThumbnailMode)">
            <summary>
            鍒朵綔鍥剧墖鐨勭缉鐣ュ浘
            </summary>
            <param name="originalImagePath">鍘熷浘鐨勮矾寰?/param>
            <param name="thumbnailPath">淇濆瓨缂╃暐鍥剧殑璺緞</param>
            <param name="width">缂╃暐鍥剧殑瀹斤紙鍍忕礌锛?/param>
            <param name="height">缂╃暐鍥剧殑楂橈紙鍍忕礌锛?/param>
            <param name="mode">缂╃暐鏂瑰紡</param>
        </member>
        <member name="P:Share.Framework.IProduct.ICompany">
            <summary>
            鎵€灞炲叕鍙?
            </summary>
        </member>
        <member name="P:Share.Framework.IProduct.SystemName">
            <summary>
            绯荤粺鍐呴儴鍛藉悕
            </summary>
        </member>
        <member name="P:Share.Framework.IProduct.InnerVersion">
            <summary>
            浜у搧鍐呴儴鐗堟湰
            </summary>
        </member>
        <member name="P:Share.Framework.IProduct.ProductName">
            <summary>
            浜у搧鍚嶇О
            </summary>
        </member>
        <member name="P:Share.Framework.IProduct.ProductVersion">
            <summary>
            浜у搧鐗堟湰
            </summary>
        </member>
        <member name="P:Share.Framework.IProduct.ProductSite">
            <summary>
            浜у搧绔欑偣
            </summary>
        </member>
        <member name="P:Share.Framework.IProduct.UpgradeUri">
            <summary>
            绯荤粺鍗囩骇鍦板潃銆?
            </summary>
        </member>
        <member name="T:Share.Framework.Package.FileUnCompress">
            <summary>
            鏂囦欢瑙ｅ帇
            </summary>
        </member>
        <member name="M:Share.Framework.Package.FileUnCompress.#ctor(System.String,System.String)">
            <summary>
            瑙ｅ帇鏂囦欢
            </summary>
            <param name="_zipFile">鏂囦欢鎵€鍦ㄨ矾寰?/param>
            <param name="_directoryToUnCompress">瑙ｅ帇鍒扮殑璺緞</param>
        </member>
        <member name="M:Share.Framework.Package.FileUnCompress.#ctor(System.String,System.String,System.String)">
            <summary>
            瑙ｅ帇鏂囦欢锛屾湁瀵嗙爜
            </summary>
            <param name="_zipFile">鏂囦欢鎵€鍦ㄨ矾寰?/param>
            <param name="_directoryToUnCompree">瑙ｅ帇鍒扮殑璺緞</param>
            <param name="_Password">瑙ｅ帇瀵嗙爜</param>
        </member>
        <member name="M:Share.Framework.Package.FileUnCompress.UnCompress">
            <summary>
            瑙ｅ帇
            </summary>
            <returns></returns>
        </member>
        <member name="T:Share.Framework.Exceptions.PrimaryKeyException">
            <summary>
            涓婚敭锛堝€欓€夐敭锛夊紓甯?
            </summary>
        </member>
        <member name="T:Share.Framework.Exceptions.DBContraintException">
            <summary>
            鏁版嵁搴撶害鏉熷紓甯?
            </summary>
        </member>
        <member name="M:Share.Framework.Exceptions.DBContraintException.#ctor">
            <summary>
            鏋勯€犲紓甯?
            </summary>
        </member>
        <member name="M:Share.Framework.Exceptions.DBContraintException.#ctor(System.String)">
            <summary>
            鏍规嵁鎻愮ず娑堟伅鏋勯€犲紓甯?
            </summary>
            <param name="message">鎻愮ず娑堟伅</param>
        </member>
        <member name="M:Share.Framework.Exceptions.DBContraintException.#ctor(System.String,System.Exception)">
            <summary>
            鏍规嵁鎻愮ず娑堟伅鍙婂師濮嬮敊璇瀯閫犲紓甯?
            </summary>
            <param name="message">鎻愮ず娑堟伅</param>
            <param name="inner">鍘熷閿欒</param>
        </member>
        <member name="M:Share.Framework.Exceptions.DBContraintException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            鏍规嵁搴忓垪鍖栦俊鎭拰涓婁笅鏂囨祦鏋勯€犲紓甯?
            </summary>
            <param name="info">鎻愮ず娑堟伅</param>
            <param name="context">鍘熷閿欒</param>
        </member>
        <member name="M:Share.Framework.Exceptions.PrimaryKeyException.#ctor">
            <summary>
            鏋勯€犲紓甯?
            </summary>
        </member>
        <member name="M:Share.Framework.Exceptions.PrimaryKeyException.#ctor(System.String)">
            <summary>
            鏍规嵁鎻愮ず娑堟伅鏋勯€犲紓甯?
            </summary>
            <param name="message">鎻愮ず娑堟伅</param>
        </member>
        <member name="M:Share.Framework.Exceptions.PrimaryKeyException.#ctor(System.String,System.Exception)">
            <summary>
            鏍规嵁鎻愮ず娑堟伅鍙婂師濮嬮敊璇瀯閫犲紓甯?
            </summary>
            <param name="message">鎻愮ず娑堟伅</param>
            <param name="inner">鍘熷閿欒</param>
        </member>
        <member name="M:Share.Framework.Exceptions.PrimaryKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            鏍规嵁搴忓垪鍖栦俊鎭拰涓婁笅鏂囨祦鏋勯€犲紓甯?
            </summary>
            <param name="info">鎻愮ず娑堟伅</param>
            <param name="context">鍘熷閿欒</param>
        </member>
        <member name="T:Share.Framework.Logging.DataAccess.SQLServer.ErrorLogDataAccess">
            <summary>
            閿欒鏃ュ織鏁版嵁璁块棶
            </summary>
        </member>
        <member name="M:Share.Framework.Logging.DataAccess.IErrorLogDataAccess.GetPagedListByUser(System.Int32,System.Int32,System.String,System.Int32@)">
            <summary>
            鏍规嵁鐢ㄦ埛鍚嶈幏鍙栧璞″垪琛紙鍒嗛〉锛?
            </summary>
        </member>
        <member name="M:Share.Framework.Logging.DataAccess.SQLServer.ErrorLogDataAccess.GetPagedListByUser(System.Int32,System.Int32,System.String,System.Int32@)">
            <summary>
            鏍规嵁鐢ㄦ埛鍚嶈幏鍙栧璞″垪琛紙鍒嗛〉锛?
            </summary>
        </member>
        <member name="M:Share.Framework.Logging.DataAccess.SQLServer.ErrorLogDataAccess.PopulateErrorLogFromDataReader(System.Data.SqlClient.SqlDataReader)">
            <summary>
            浠嶥ataReader涓鍙栨暟鎹埌涓氬姟瀵硅薄
            </summary>
        </member>
        <member name="T:Share.Framework.Security.SymmetricCrypto">
            <summary>
            瀵圭О鍔犲瘑
            </summary>
        </member>
        <member name="M:Share.Framework.Security.SymmetricCrypto.GetProvider">
            <summary>
            鑾峰彇榛樿Provider
            </summary>
            <returns>瀵圭О鍔犲瘑Provider</returns>
        </member>
        <member name="M:Share.Framework.Security.SymmetricCrypto.GetProvider(System.String)">
            <summary>
            鏍规嵁Provider鍚嶇О鑾峰彇Provider
            </summary>
            <param name="providerName">Provider鍚嶇О</param>
            <returns>瀵圭О鍔犲瘑Provider</returns>
        </member>
        <member name="M:Share.Framework.Security.SymmetricCrypto.GetConfigProvider(System.String)">
            <summary>
            鏍规嵁Provider鍚嶇О鑾峰彇Provider
            </summary>
            <param name="providerName">Provider鍚嶇О</param>
            <returns>Provider</returns>
        </member>
        <member name="M:Share.Framework.Security.SymmetricCrypto.GetAlgorithm(Share.Framework.Providers.Provider)">
            <summary>
            鏍规嵁Provider鑾峰彇瀵圭О鍔犲瘑绠楁硶
            </summary>
            <param name="provider">Provider</param>
            <returns>瀵圭О鍔犲瘑绠楁硶</returns>
        </member>
        <member name="P:Share.Framework.Security.SymmetricCrypto.ProviderConfiguration">
            <summary>
            Provider閰嶇疆
            </summary>
        </member>
        <member name="P:Share.Framework.Security.SymmetricCrypto.DefaultProviderName">
            <summary>
            榛樿Provider鍚嶇О
            </summary>
        </member>
        <member name="T:Share.Framework.Security.HashAlgorithmNotSetException">
            <summary>
            鍝堝笇绠楁硶鏈缃紓甯?
            </summary>
        </member>
        <member name="M:Share.Framework.Security.HashAlgorithmNotSetException.#ctor">
            <summary>
            鍝堝笇绠楁硶鏈缃紓甯?
            </summary>
        </member>
        <member name="T:Share.Framework.Data.SqlForeignKeyExceptionHandler">
            <summary>
            SQLServer澶栭敭寮傚父澶勭悊鍣?
            </summary>
        </member>
        <member name="M:Share.Framework.Data.SqlForeignKeyExceptionHandler.Handle(System.Data.SqlClient.SqlException,Share.Framework.Data.DBOperateType,System.String[])">
            <summary>
            寮傚父澶勭悊
            </summary>
            <param name="ex">寮傚父</param>
            <param name="operateType">鎿嶄綔绫诲瀷</param>
            <param name="args">鍙傛暟</param>
        </member>
        <member name="T:Share.Framework.Data.OracleForeignKeyExceptionHandler">
            <summary>
            Oracle澶栭敭寮傚父澶勭悊
            </summary>
        </member>
        <member name="M:Share.Framework.Data.OracleForeignKeyExceptionHandler.Handle(System.Data.OracleClient.OracleException,Share.Framework.Data.DBOperateType,System.String[])">
            <summary>
            寮傚父澶勭悊
            </summary>
            <param name="ex">寮傚父</param>
            <param name="operateType">鎿嶄綔绫诲瀷</param>
            <param name="args">鍙傛暟</param>
        </member>
        <member name="T:Share.Framework.EncodingUtility">
            <summary>
            缂栫爜鍔熻兘绫?
            </summary>
        </member>
        <member name="M:Share.Framework.EncodingUtility.Base64Encode(System.String)">
            <summary>
            Base64鍔犵爜锛圓SCIIEncoding锛?
            </summary>
            <param name="source">寰呭姞鐮佹枃鏈?/param>
            <returns>Base64鍔犵爜鏂囨湰</returns>
        </member>
        <member name="M:Share.Framework.EncodingUtility.Base64Encode(System.String,System.Text.Encoding)">
            <summary>
            Base64鍔犵爜
            </summary>
            <param name="source">寰呭姞鐮佹枃鏈?/param>
            <param name="encoding">缂栫爜鏂瑰紡</param>
            <returns>Base64鍔犵爜鏂囨湰</returns>
        </member>
        <member name="M:Share.Framework.EncodingUtility.Base64Decode(System.String)">
            <summary>
            Base64瑙ｇ爜锛圓SCIIEncoding锛?
            </summary>
            <param name="source">寰呰В鐮佹枃鏈?/param>
            <returns>Base64瑙ｇ爜鏂囨湰</returns>
        </member>
        <member name="M:Share.Framework.EncodingUtility.Base64Decode(System.String,System.Text.Encoding)">
            <summary>
            Base64瑙ｇ爜
            </summary>
            <param name="source">寰呰В鐮佹枃鏈?/param>
            <param name="encoding">缂栫爜鏂瑰紡</param>
            <returns>Base64瑙ｇ爜鏂囨湰</returns>
        </member>
        <member name="T:Share.Framework.ConfigurationUtility">
            <summary>
            閰嶇疆鍔熻兘绫?
            </summary>
        </member>
        <member name="M:Share.Framework.ConfigurationUtility.GetConfigSection(System.String,System.String)">
            <summary>
            鑾峰彇閰嶇疆娈?
            </summary>
            <param name="fileName">閰嶇疆鏂囦欢锛堢墿鐞嗘枃浠跺悕锛?/param>
            <param name="section">閰嶇疆娈?/param>
            <returns>NameValueCollection</returns>
        </member>
        <member name="M:Share.Framework.ConfigurationUtility.GetWebConfigSection(System.String,System.String,System.String)">
            <summary>
            鑾峰彇閰嶇疆娈?
            </summary>
            <param name="virtualFileName">閰嶇疆鏂囦欢锛堣櫄鎷熻矾寰勶級</param>
            <param name="section">閰嶇疆娈?/param>
            <param name="cacheKey">缂撳瓨閿?/param>
            <returns>NameValueCollection</returns>
        </member>
        <member name="T:Share.Framework.Caching.CacheMissedGetDataHandler`1">
            <summary>
            缂撳瓨鏈懡涓椂鑾峰彇鏁版嵁鐨勬柟娉?
            锛堜笉甯﹀弬鏁帮級
            </summary>
            <typeparam name="TResult">杩斿洖绫诲瀷</typeparam>
            <returns>缁撴灉</returns>
        </member>
        <member name="T:Share.Framework.Caching.CacheMissedGetDataHandler`2">
            <summary>
            缂撳瓨鏈懡涓椂鑾峰彇鏁版嵁鐨勬柟娉?
            锛堝甫1涓弬鏁帮級
            </summary>
            <typeparam name="TResult">杩斿洖绫诲瀷</typeparam>
            <typeparam name="TParm1">鍙傛暟1绫诲瀷</typeparam>
            <param name="parm1">鍙傛暟1</param>
            <returns>缁撴灉</returns>
        </member>
        <member name="T:Share.Framework.Caching.CacheMissedGetDataHandler`3">
            <summary>
            缂撳瓨鏈懡涓椂鑾峰彇鏁版嵁鐨勬柟娉?
            锛堝甫2涓弬鏁帮級
            </summary>
            <typeparam name="TResult">杩斿洖绫诲瀷</typeparam>
            <typeparam name="TParm1">鍙傛暟1绫诲瀷</typeparam>
            <typeparam name="TParm2">鍙傛暟2绫诲瀷</typeparam>
            <param name="parm1">鍙傛暟1</param>
            <param name="parm2">鍙傛暟2</param>
            <returns>缁撴灉</returns>
        </member>
        <member name="T:Share.Framework.Caching.CacheMissedGetDataHandler`4">
            <summary>
            缂撳瓨鏈懡涓椂鑾峰彇鏁版嵁鐨勬柟娉?
            锛堝甫3涓弬鏁帮級
            </summary>
            <typeparam name="TResult">杩斿洖绫诲瀷</typeparam>
            <typeparam name="TParm1">鍙傛暟1绫诲瀷</typeparam>
            <typeparam name="TParm2">鍙傛暟2绫诲瀷</typeparam>
            <typeparam name="TParm3">鍙傛暟3绫诲瀷</typeparam>
            <param name="parm1">鍙傛暟1</param>
            <param name="parm2">鍙傛暟2</param>
            <param name="parm3">鍙傛暟3</param>
            <returns>缁撴灉</returns>
        </member>
        <member name="T:Share.Framework.Caching.CacheMissedGetDataHandler`5">
            <summary>
            缂撳瓨鏈懡涓椂鑾峰彇鏁版嵁鐨勬柟娉?
            锛堝甫4涓弬鏁帮級
            </summary>
            <typeparam name="TResult">杩斿洖绫诲瀷</typeparam>
            <typeparam name="TParm1">鍙傛暟1绫诲瀷</typeparam>
            <typeparam name="TParm2">鍙傛暟2绫诲瀷</typeparam>
            <typeparam name="TParm3">鍙傛暟3绫诲瀷</typeparam>
            <typeparam name="TParm4">鍙傛暟3绫诲瀷</typeparam>
            <param name="parm1">鍙傛暟1</param>
            <param name="parm2">鍙傛暟2</param>
            <param name="parm3">鍙傛暟3</param>
            <param name="parm4">鍙傛暟4</param>
            <returns>缁撴灉</returns>
        </member>
        <member name="T:Share.Framework.Caching.CacheMissedGetDataHandler`6">
            <summary>
            缂撳瓨鏈懡涓椂鑾峰彇鏁版嵁鐨勬柟娉?
            锛堝甫5涓弬鏁帮級
            </summary>
            <typeparam name="TResult">杩斿洖绫诲瀷</typeparam>
            <typeparam name="TParm1">鍙傛暟1绫诲瀷</typeparam>
            <typeparam name="TParm2">鍙傛暟2绫诲瀷</typeparam>
            <typeparam name="TParm3">鍙傛暟3绫诲瀷</typeparam>
            <typeparam name="TParm4">鍙傛暟3绫诲瀷</typeparam>
            <param name="parm1">鍙傛暟1</param>
            <param name="parm2">鍙傛暟2</param>
            <param name="parm3">鍙傛暟3</param>
            <param name="parm4">鍙傛暟4</param>
            <param name="parm5">鍙傛暟5</param>
            <returns>缁撴灉</returns>
        </member>
        <member name="T:Share.Framework.Caching.CacheHelper">
            <summary>
            缂撳瓨
            </summary>
        </member>
        <member name="M:Share.Framework.Caching.CacheHelper.GetBizCacheItemConfig">
            <summary>
            浠庨厤缃枃浠惰幏鍙栦笟鍔＄紦瀛橀」
            </summary>
            <returns></returns>
        </member>
        <member name="M:Share.Framework.Caching.CacheHelper.GetConfig(System.String)">
            <summary>
            鑾峰彇涓氬姟缂撳瓨閰嶇疆
            </summary>
            <param name="bizCacheItemName">涓氬姟缂撳瓨椤瑰悕绉?/param>
            <returns>涓氬姟缂撳瓨椤?/returns>
        </member>
        <member name="M:Share.Framework.Caching.CacheHelper.GetDistributedCache(Share.Framework.Caching.DistributedCacheSetting)">
            <summary>
            鏍规嵁閰嶇疆鑾峰彇鍒嗗竷寮忕紦瀛?
            </summary>
            <param name="distributedCacheSetting">鍒嗗竷寮忕紦瀛橀厤缃?/param>
            <returns>鍒嗗竷寮忕紦瀛?/returns>
        </member>
        <member name="M:Share.Framework.Caching.CacheHelper.Add(System.String,System.String[],System.Object)">
            <summary>
            澧炲姞涓氬姟缂撳瓨
            </summary>
            <param name="bizCacheItemName">缂撳瓨椤瑰悕绉?/param>
            <param name="keyArgs">閿弬鏁?/param>
            <param name="value">缂撳瓨鍊?/param>
        </member>
        <member name="M:Share.Framework.Caching.CacheHelper.Add(Share.Framework.Caching.BizCacheItem,System.String,System.Object)">
            <summary>
            澧炲姞涓氬姟缂撳瓨
            </summary>
            <param name="bizCacheItem">缂撳瓨椤?/param>
            <param name="key">缂撳瓨閿?/param>
            <param name="value">缂撳瓨鍊?/param>
        </member>
        <member name="M:Share.Framework.Caching.CacheHelper.Add(System.String,System.Object,System.TimeSpan)">
            <summary>
            鎸夌浉瀵硅繃鏈熸椂闂存柟寮忔坊鍔犵紦瀛橀」
            </summary>
            <param name="key">閿?/param>
            <param name="value">鍊?/param>
            <param name="cacheDuration">鐩稿杩囨湡鏃堕暱</param>
        </member>
        <member name="M:Share.Framework.Caching.CacheHelper.Add(System.String,System.Object,System.TimeSpan,System.Web.Caching.CacheItemPriority)">
            <summary>
            鎸夌浉瀵硅繃鏈熸椂闂存柟寮忔坊鍔犵紦瀛橀」
            </summary>
            <param name="key">閿?/param>
            <param name="value">鍊?/param>
            <param name="cacheDuration">鐩稿杩囨湡鏃堕暱</param>
            <param name="priority">浼樺厛绾?/param>
        </member>
        <member name="M:Share.Framework.Caching.CacheHelper.Add(System.String,System.Object,System.DateTime,System.Web.Caching.CacheItemPriority)">
            <summary>
            鎸夌粷瀵硅繃鏈熸椂闂存柟寮忔坊鍔犵紦瀛橀」
            </summary>
            <param name="key">閿?/param>
            <param name="value">鍊?/param>
            <param name="absoluteExpiration">缁濆杩囨湡鏃堕棿</param>
            <param name="priority">浼樺厛绾?/param>
        </member>
        <member name="M:Share.Framework.Caching.CacheHelper.Add(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            娣诲姞缂撳瓨椤?
            </summary>
            <param name="key">閿?/param>
            <param name="value">鍊?/param>
            <param name="dependencies">渚濊禆椤?/param>
            <param name="absoluteExpiration">缁濆杩囨湡鏃堕棿</param>
            <param name="slidingExpiration">鐩稿杩囨湡鏃堕棿</param>
            <param name="priority">浼樺厛绾?/param>
            <param name="onRemovedCallback">缂撳瓨绉婚櫎鍥炶皟</param>
        </member>
        <member name="M:Share.Framework.Caching.CacheHelper.AddPermanent(System.String,System.Object)">
            <summary>
            鎸変笉杩囨湡鏂瑰紡娣诲姞缂撳瓨椤?
            </summary>
            <param name="key">閿?/param>
            <param name="value">鍊?/param>
        </member>
        <member name="M:Share.Framework.Caching.CacheHelper.AddPermanent(System.String,System.Object,System.Web.Caching.CacheDependency)">
            <summary>
            鎸変笉杩囨湡鏂瑰紡娣诲姞缂撳瓨椤?
            </summary>
            <param name="key">閿?/param>
            <param name="value">鍊?/param>
            <param name="dependencies">渚濊禆椤?/param>
        </member>
        <member name="M:Share.Framework.Caching.CacheHelper.Remove(System.String,System.String[])">
            <summary>
            绉婚櫎缂撳瓨椤?
            </summary>
            <param name="bizCacheItemName">缂撳瓨椤瑰悕绉?/param>
            <param name="keyArgs">閿弬鏁?/param>
        </member>
        <member name="M:Share.Framework.Caching.CacheHelper.Remove(System.String,System.String[],System.Boolean)">
            <summary>
            绉婚櫎缂撳瓨椤?
            锛堜緷鎹産izCacheItem鐨凴emoveAfterModify灞炴€у喅瀹氭槸鍚﹂渶瑕佺Щ闄ょ紦瀛橈級
            </summary>
            <param name="bizCacheItemName">缂撳瓨椤瑰悕绉?/param>
            <param name="keyArgs">閿弬鏁?/param>
            <param name="dependOnConfig">渚濊禆閰嶇疆鍐冲畾鏄惁绉婚櫎缂撳瓨</param>
        </member>
        <member name="M:Share.Framework.Caching.CacheHelper.Remove(Share.Framework.Caching.BizCacheItem,System.String)">
            <summary>
            绉婚櫎缂撳瓨椤?
            </summary>
            <param name="bizCacheItem">缂撳瓨椤?/param>
            <param name="key">閿?/param>
        </member>
        <member name="M:Share.Framework.Caching.CacheHelper.Remove(System.String)">
            <summary>
            绉婚櫎缂撳瓨椤?
            </summary>
            <param name="key">閿?/param>
        </member>
        <member name="M:Share.Framework.Caching.CacheHelper.Get(System.String,System.String[])">
            <summary>
            鑾峰彇缂撳瓨椤?
            </summary>
            <param name="bizCacheItemName">缂撳瓨椤瑰悕绉?/param>
            <param name="keyArgs">閿弬鏁?/param>
            <returns>缂撳瓨鍊?/returns>
        </member>
        <member name="M:Share.Framework.Caching.CacheHelper.Get(Share.Framework.Caching.BizCacheItem,System.String)">
            <summary>
            鑾峰彇缂撳瓨椤?
            </summary>
            <param name="bizCacheItem">缂撳瓨椤?/param>
            <param name="key">閿?/param>
            <returns>缂撳瓨鍊?/returns>
        </member>
        <member name="M:Share.Framework.Caching.CacheHelper.Get(System.String)">
            <summary>
            鑾峰彇缂撳瓨椤?
            </summary>
            <param name="key">閿?/param>
            <returns>缂撳瓨鍊?/returns>
        </member>
        <member name="M:Share.Framework.Caching.CacheHelper.Get``1(System.String,Share.Framework.Caching.CacheMissedGetDataHandler{``0})">
            <summary>
            鑾峰彇鏁版嵁
            </summary>
            <typeparam name="TResult">杩斿洖鐨勬暟鎹被鍨?/typeparam>
            <param name="bizCacheItemName">涓氬姟缂撳瓨椤瑰悕绉?/param>
            <param name="getDataMethod">鑾峰彇鏁版嵁鐨勬柟娉曪紙缂撳瓨鏈懡涓椂浣跨敤姝ゆ柟娉曡幏鍙栨暟鎹苟濉叆缂撳瓨锛?/param>
            <returns>鏁版嵁</returns>
        </member>
        <member name="M:Share.Framework.Caching.CacheHelper.Get``2(System.String,``1,Share.Framework.Caching.CacheMissedGetDataHandler{``0,``1})">
            <summary>
            鑾峰彇鏁版嵁
            </summary>
            <typeparam name="TResult">杩斿洖鐨勬暟鎹被鍨?/typeparam>
            <typeparam name="TParm1">鍙傛暟1绫诲瀷</typeparam>
            <param name="bizCacheItemName">涓氬姟缂撳瓨椤瑰悕绉?/param>
            <param name="parm1">鍙傛暟1锛堟棦鏄笟鍔＄紦瀛橀」鍙傛暟锛屼篃鏄幏鍙栨暟鎹柟娉曞弬鏁帮級</param>
            <param name="getDataMethod">鑾峰彇鏁版嵁鏂规硶锛堢紦瀛樻湭鍛戒腑鏃朵娇鐢ㄦ鏂规硶鑾峰彇鏁版嵁骞跺～鍏ョ紦瀛橈級</param>
            <returns>鏁版嵁</returns>
        </member>
        <member name="M:Share.Framework.Caching.CacheHelper.Get``3(System.String,``1,``2,Share.Framework.Caching.CacheMissedGetDataHandler{``0,``1,``2})">
            <summary>
            鑾峰彇鏁版嵁
            </summary>
            <typeparam name="TResult">杩斿洖鐨勬暟鎹被鍨?/typeparam>
            <typeparam name="TParm1">鍙傛暟1绫诲瀷</typeparam>
            <typeparam name="TParm2">鍙傛暟2绫诲瀷</typeparam>
            <param name="bizCacheItemName">涓氬姟缂撳瓨椤瑰悕绉?/param>
            <param name="parm1">鍙傛暟1锛堟棦鏄笟鍔＄紦瀛橀」鍙傛暟锛屼篃鏄幏鍙栨暟鎹柟娉曞弬鏁帮級</param>
            <param name="parm2">鍙傛暟2锛堟棦鏄笟鍔＄紦瀛橀」鍙傛暟锛屼篃鏄幏鍙栨暟鎹柟娉曞弬鏁帮級</param>
            <param name="getDataMethod">鑾峰彇鏁版嵁鏂规硶锛堢紦瀛樻湭鍛戒腑鏃朵娇鐢ㄦ鏂规硶鑾峰彇鏁版嵁骞跺～鍏ョ紦瀛橈級</param>
            <returns>鏁版嵁</returns>
        </member>
        <member name="M:Share.Framework.Caching.CacheHelper.Get``4(System.String,``1,``2,``3,Share.Framework.Caching.CacheMissedGetDataHandler{``0,``1,``2,``3})">
            <summary>
            鑾峰彇鏁版嵁
            </summary>
            <typeparam name="TResult">杩斿洖鐨勬暟鎹被鍨?/typeparam>
            <typeparam name="TParm1">鍙傛暟1绫诲瀷</typeparam>
            <typeparam name="TParm2">鍙傛暟2绫诲瀷</typeparam>
            <typeparam name="TParm3">鍙傛暟3绫诲瀷</typeparam>
            <param name="bizCacheItemName">涓氬姟缂撳瓨椤瑰悕绉?/param>
            <param name="parm1">鍙傛暟1锛堟棦鏄笟鍔＄紦瀛橀」鍙傛暟锛屼篃鏄幏鍙栨暟鎹柟娉曞弬鏁帮級</param>
            <param name="parm2">鍙傛暟2锛堟棦鏄笟鍔＄紦瀛橀」鍙傛暟锛屼篃鏄幏鍙栨暟鎹柟娉曞弬鏁帮級</param>
            <param name="parm3">鍙傛暟3锛堟棦鏄笟鍔＄紦瀛橀」鍙傛暟锛屼篃鏄幏鍙栨暟鎹柟娉曞弬鏁帮級</param>
            <param name="getDataMethod">鑾峰彇鏁版嵁鏂规硶锛堢紦瀛樻湭鍛戒腑鏃朵娇鐢ㄦ鏂规硶鑾峰彇鏁版嵁骞跺～鍏ョ紦瀛橈級</param>
            <returns>鏁版嵁</returns>
        </member>
        <member name="M:Share.Framework.Caching.CacheHelper.Get``5(System.String,``1,``2,``3,``4,Share.Framework.Caching.CacheMissedGetDataHandler{``0,``1,``2,``3,``4})">
            <summary>
            鑾峰彇鏁版嵁
            </summary>
            <typeparam name="TResult">杩斿洖鐨勬暟鎹被鍨?/typeparam>
            <typeparam name="TParm1">鍙傛暟1绫诲瀷</typeparam>
            <typeparam name="TParm2">鍙傛暟2绫诲瀷</typeparam>
            <typeparam name="TParm3">鍙傛暟3绫诲瀷</typeparam>
            <typeparam name="TParm4">鍙傛暟4绫诲瀷</typeparam>
            <param name="bizCacheItemName">涓氬姟缂撳瓨椤瑰悕绉?/param>
            <param name="parm1">鍙傛暟1锛堟棦鏄笟鍔＄紦瀛橀」鍙傛暟锛屼篃鏄幏鍙栨暟鎹柟娉曞弬鏁帮級</param>
            <param name="parm2">鍙傛暟2锛堟棦鏄笟鍔＄紦瀛橀」鍙傛暟锛屼篃鏄幏鍙栨暟鎹柟娉曞弬鏁帮級</param>
            <param name="parm3">鍙傛暟3锛堟棦鏄笟鍔＄紦瀛橀」鍙傛暟锛屼篃鏄幏鍙栨暟鎹柟娉曞弬鏁帮級</param>
            <param name="parm4">鍙傛暟4锛堟棦鏄笟鍔＄紦瀛橀」鍙傛暟锛屼篃鏄幏鍙栨暟鎹柟娉曞弬鏁帮級</param>
            <param name="getDataMethod">鑾峰彇鏁版嵁鏂规硶锛堢紦瀛樻湭鍛戒腑鏃朵娇鐢ㄦ鏂规硶鑾峰彇鏁版嵁骞跺～鍏ョ紦瀛橈級</param>
            <returns>鏁版嵁</returns>
        </member>
        <member name="M:Share.Framework.Caching.CacheHelper.Get``6(System.String,``1,``2,``3,``4,``5,Share.Framework.Caching.CacheMissedGetDataHandler{``0,``1,``2,``3,``4,``5})">
            <summary>
            鑾峰彇鏁版嵁
            </summary>
            <typeparam name="TResult">杩斿洖鐨勬暟鎹被鍨?/typeparam>
            <typeparam name="TParm1">鍙傛暟1绫诲瀷</typeparam>
            <typeparam name="TParm2">鍙傛暟2绫诲瀷</typeparam>
            <typeparam name="TParm3">鍙傛暟3绫诲瀷</typeparam>
            <typeparam name="TParm4">鍙傛暟4绫诲瀷</typeparam>
            <typeparam name="TParm5">鍙傛暟5绫诲瀷</typeparam>
            <param name="bizCacheItemName">涓氬姟缂撳瓨椤瑰悕绉?/param>
            <param name="parm1">鍙傛暟1锛堟棦鏄笟鍔＄紦瀛橀」鍙傛暟锛屼篃鏄幏鍙栨暟鎹柟娉曞弬鏁帮級</param>
            <param name="parm2">鍙傛暟2锛堟棦鏄笟鍔＄紦瀛橀」鍙傛暟锛屼篃鏄幏鍙栨暟鎹柟娉曞弬鏁帮級</param>
            <param name="parm3">鍙傛暟3锛堟棦鏄笟鍔＄紦瀛橀」鍙傛暟锛屼篃鏄幏鍙栨暟鎹柟娉曞弬鏁帮級</param>
            <param name="parm4">鍙傛暟4锛堟棦鏄笟鍔＄紦瀛橀」鍙傛暟锛屼篃鏄幏鍙栨暟鎹柟娉曞弬鏁帮級</param>
            <param name="parm5">鍙傛暟5锛堟棦鏄笟鍔＄紦瀛橀」鍙傛暟锛屼篃鏄幏鍙栨暟鎹柟娉曞弬鏁帮級</param>
            <param name="getDataMethod">鑾峰彇鏁版嵁鏂规硶锛堢紦瀛樻湭鍛戒腑鏃朵娇鐢ㄦ鏂规硶鑾峰彇鏁版嵁骞跺～鍏ョ紦瀛橈級</param>
            <returns>鏁版嵁</returns>
        </member>
        <member name="P:Share.Framework.Caching.CacheHelper.FileName">
            <summary>
            涓氬姟缂撳瓨閰嶇疆鏂囦欢鍚嶇О
            </summary>
        </member>
        <member name="P:Share.Framework.Caching.CacheHelper.DistributedCacheSettings">
            <summary>
            鎵€鏈夊垎甯冨紡缂撳瓨閰嶇疆椤?
            </summary>
        </member>
        <member name="P:Share.Framework.Caching.CacheHelper.BizCacheItems">
            <summary>
            鎵€鏈変笟鍔＄紦瀛橀」
            </summary>
        </member>
        <member name="P:Share.Framework.ICompany.CompanyName">
            <summary>
            鍏徃鍚嶇О
            </summary>
        </member>
        <member name="P:Share.Framework.ICompany.CompanyCode">
            <summary>
            鍏徃浠ｇ爜
            </summary>
        </member>
        <member name="P:Share.Framework.ICompany.CompanyTele">
            <summary>
            鍏徃鑱旂郴鏂瑰紡
            </summary>
        </member>
        <member name="P:Share.Framework.ICompany.CompanySite">
            <summary>
            鍏徃绔欑偣
            </summary>
        </member>
        <member name="P:Share.Framework.ICompany.CompanyRemark">
            <summary>
            鍏徃绠€浠?
            </summary>
        </member>
        <member name="T:Share.Framework.Logging.BizLogUtility">
            <summary>
            涓氬姟鏃ュ織鍔熻兘绫?
            </summary>
        </member>
        <member name="M:Share.Framework.Logging.BizLogUtility.GetLoggingConfig">
            <summary>
            浠庨厤缃枃浠惰幏鍙栦笟鍔℃棩蹇楅」
            </summary>
            <returns></returns>
        </member>
        <member name="M:Share.Framework.Logging.BizLogUtility.GetConfig(System.String)">
            <summary>
            鑾峰彇涓氬姟鏃ュ織閰嶇疆
            </summary>
            <param name="bizLogItemName">涓氬姟鏃ュ織椤瑰悕绉?/param>
            <returns>涓氬姟鏃ュ織椤?/returns>
        </member>
        <member name="P:Share.Framework.Logging.BizLogUtility.FileName">
            <summary>
            涓氬姟鏃ュ織閰嶇疆鏂囦欢鍚嶇О
            </summary>
        </member>
        <member name="P:Share.Framework.Logging.BizLogUtility.BizLogItems">
            <summary>
            鎵€鏈変笟鍔℃棩蹇楅」
            </summary>
        </member>
        <member name="T:Share.Framework.Exceptions.QueryStringException">
            <summary>
            QueryString寮傚父
            </summary>
        </member>
        <member name="M:Share.Framework.Exceptions.QueryStringException.#ctor">
            <summary>
            鏋勯€犲紓甯?
            </summary>
        </member>
        <member name="M:Share.Framework.Exceptions.QueryStringException.#ctor(System.String)">
            <summary>
            鏍规嵁鎻愮ず娑堟伅鏋勯€犲紓甯?
            </summary>
            <param name="message">鎻愮ず娑堟伅</param>
        </member>
        <member name="M:Share.Framework.Exceptions.QueryStringException.#ctor(System.String,System.Exception)">
            <summary>
            鏍规嵁鎻愮ず娑堟伅鍙婂師濮嬮敊璇瀯閫犲紓甯?
            </summary>
            <param name="message">鎻愮ず娑堟伅</param>
            <param name="inner">鍘熷閿欒</param>
        </member>
        <member name="M:Share.Framework.Exceptions.QueryStringException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            鏍规嵁搴忓垪鍖栦俊鎭拰涓婁笅鏂囨祦鏋勯€犲紓甯?
            </summary>
            <param name="info">鎻愮ず娑堟伅</param>
            <param name="context">鍘熷閿欒</param>
        </member>
        <member name="T:Share.Framework.Security.Certificate">
            <summary>
            鏁板瓧璇佷功
            </summary>
        </member>
        <member name="M:Share.Framework.Security.Certificate.#ctor(System.String)">
            <summary>
            鏋勯€犳暟瀛楄瘉涔?
            </summary>
            <param name="certificateFile">璇佷功鏂囦欢</param>
        </member>
        <member name="M:Share.Framework.Security.Certificate.#ctor(System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
            <summary>
            鏋勯€犳暟瀛楄瘉涔?
            </summary>
            <param name="certificateFile">璇佷功鏂囦欢</param>
            <param name="keyStorageFlags">瀛樺偍鍖烘爣璁?/param>
        </member>
        <member name="M:Share.Framework.Security.Certificate.#ctor(System.String,System.String)">
            <summary>
            鏋勯€犳暟瀛楄瘉涔?
            锛堟彁渚涘瘑鐮侊級
            </summary>
            <param name="certificateFile">璇佷功鏂囦欢</param>
            <param name="password">璇佷功瀵嗙爜</param>
        </member>
        <member name="M:Share.Framework.Security.Certificate.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
            <summary>
            鏋勯€犳暟瀛楄瘉涔?
            锛堟彁渚涘瘑鐮侊級
            </summary>
            <param name="certificateFile">璇佷功鏂囦欢</param>
            <param name="password">璇佷功瀵嗙爜</param>
            <param name="keyStorageFlags">瀛樺偍鍖烘爣璁?/param>
        </member>
        <member name="M:Share.Framework.Security.Certificate.#ctor(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.String)">
            <summary>
            鏋勯€犳暟瀛楄瘉涔?
            </summary>
            <param name="storeLocation">瀛樺偍鍖哄煙</param>
            <param name="storeName">瀛樺偍鍚嶇О</param>
            <param name="subjectName">涓婚锛堜娇鐢ㄨ€咃級鍚嶇О</param>
        </member>
        <member name="M:Share.Framework.Security.Certificate.#ctor(System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.String)">
            <summary>
            鏋勯€犳暟瀛楄瘉涔?
            </summary>
            <param name="storeLocation">瀛樺偍鍖哄煙</param>
            <param name="storeName">瀛樺偍鍚嶇О</param>
            <param name="subjectName">涓婚锛堜娇鐢ㄨ€咃級鍚嶇О</param>
        </member>
        <member name="M:Share.Framework.Security.Certificate.#ctor(System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.String,System.Boolean)">
            <summary>
            鏋勯€犳暟瀛楄瘉涔?
            </summary>
            <param name="storeLocation">瀛樺偍鍖哄煙</param>
            <param name="storeName">瀛樺偍鍚嶇О</param>
            <param name="subjectName">涓婚锛堜娇鐢ㄨ€咃級鍚嶇О</param>
            <param name="validOnly">鏄惁鍙娇鐢ㄦ湁鏁堢姸鎬佺殑璇佷功</param>
        </member>
        <member name="M:Share.Framework.Security.Certificate.Encrypt(System.String)">
            <summary>
            鍔犲瘑
            </summary>
            <param name="data">寰呭姞瀵嗘暟鎹?瀛楃涓?</param>
            <returns>鍔犲瘑鍚庢暟鎹?Base64String)</returns>
        </member>
        <member name="M:Share.Framework.Security.Certificate.Encrypt(System.Byte[])">
            <summary>
            鍔犲瘑
            </summary>
            <param name="data">寰呭姞瀵嗘暟鎹?byte[])</param>
            <returns>鍔犲瘑鍚庢暟鎹?/returns>
        </member>
        <member name="M:Share.Framework.Security.Certificate.Decrypt(System.String)">
            <summary>
            瑙ｅ瘑
            </summary>
            <param name="data">寰呰В瀵嗘暟鎹?Base64String)</param>
            <returns>瑙ｅ瘑鍚庢暟鎹?/returns>
        </member>
        <member name="M:Share.Framework.Security.Certificate.Decrypt(System.Byte[])">
            <summary>
            瑙ｅ瘑
            </summary>
            <param name="data">寰呰В瀵嗘暟鎹?byte[])</param>
            <returns>瑙ｅ瘑鍚庢暟鎹?/returns>
        </member>
        <member name="M:Share.Framework.Security.Certificate.Signature(System.String,System.Byte[])">
            <summary>
            绛惧悕
            </summary>
            <param name="hashAlgorithmName">鍝堝笇绠楁硶鍚嶇О</param>
            <param name="data">闇€瑕佽繘琛岀鍚嶇殑鏁版嵁(byte[])</param>
            <returns>绛惧悕鍊?byte[])</returns>
        </member>
        <member name="M:Share.Framework.Security.Certificate.Signature(System.String)">
            <summary>
            绛惧悕
            </summary>
            <param name="data">闇€瑕佽繘琛岀鍚嶇殑鏁版嵁</param>
            <returns>绛惧悕鍊?Base64String)</returns>
        </member>
        <member name="M:Share.Framework.Security.Certificate.Signature(System.String,System.String)">
            <summary>
            绛惧悕
            </summary>
            <param name="hashAlgorithmName">鍝堝笇绠楁硶鍚嶇О</param>
            <param name="data">闇€瑕佽繘琛岀鍚嶇殑鏁版嵁</param>
            <returns>绛惧悕鍊?Base64String)</returns>
        </member>
        <member name="M:Share.Framework.Security.Certificate.VerifySignature(System.String,System.Byte[],System.Byte[])">
            <summary>
            绛惧悕楠岃瘉
            </summary>
            <param name="hashAlgorithmName">鍝堝笇绠楁硶鍚嶇О</param>
            <param name="data">闇€瑕佽繘琛岀鍚嶉獙璇佺殑鏁版嵁</param>
            <param name="signature">绛惧悕</param>
            <returns>绛惧悕鏄惁姝ｇ‘</returns>
        </member>
        <member name="M:Share.Framework.Security.Certificate.VerifySignature(System.String,System.String)">
            <summary>
            绛惧悕楠岃瘉
            </summary>
            <param name="data">闇€瑕佽繘琛岀鍚嶉獙璇佺殑鏁版嵁</param>
            <param name="signature">绛惧悕(Base64String)</param>
            <returns>绛惧悕鏄惁姝ｇ‘</returns>
        </member>
        <member name="M:Share.Framework.Security.Certificate.VerifySignature(System.String,System.String,System.String)">
            <summary>
            绛惧悕楠岃瘉
            </summary>
            <param name="hashAlgorithmName">鍝堝笇绠楁硶鍚嶇О</param>
            <param name="data">闇€瑕佽繘琛岀鍚嶉獙璇佺殑鏁版嵁</param>
            <param name="signature">绛惧悕(Base64String)</param>
            <returns>绛惧悕鏄惁姝ｇ‘</returns>
        </member>
        <member name="T:Share.Framework.Package.IPackage">
            <summary>
            鏂囦欢鍖呯殑鎺ュ彛
            </summary>
        </member>
        <member name="M:Share.Framework.Package.IPackage.Pack(System.Object)">
            <summary>
            鎵撳寘鎿嶄綔绾﹀畾
            </summary>
        </member>
        <member name="M:Share.Framework.Package.IPackage.UnPack(System.Object)">
            <summary>
            瑙ｅ寘鎿嶄綔绾﹀畾
            </summary>
        </member>
        <member name="T:Share.Framework.Logging.ErrorLogLayout">
            <summary>
            閿欒鏃ュ織鏍煎紡
            </summary>
        </member>
        <member name="M:Share.Framework.Logging.ErrorLogLayout.#ctor">
            <summary>
            鏋勯€犻敊璇棩蹇楁牸寮?
            </summary>
        </member>
        <member name="T:Share.Framework.IO.DirectoryUtility">
            <summary>
            鐩綍鍔熻兘绫?
            </summary>
        </member>
        <member name="M:Share.Framework.IO.DirectoryUtility.CreateDirectory(System.String)">
            <summary>
            鍒涘缓鏂囦欢澶?
            </summary>
            <param name="path">闇€瑕佸垱寤虹殑鏂囦欢澶圭粷瀵硅矾寰?/param>
        </member>
        <member name="M:Share.Framework.IO.DirectoryUtility.CreateDirectoryFromFileName(System.String)">
            <summary>
            鏍规嵁鏂囦欢鍚嶇О鍒涘缓鏂囦欢澶?
            </summary>
            <param name="fileName">鏂囦欢鍚嶇О</param>
        </member>
        <member name="M:Share.Framework.IO.DirectoryUtility.CopyDirectory(System.String,System.String)">
            <summary>
            澶嶅埗鏂囦欢澶逛腑鐨勫瓙鐩綍銆佹枃浠跺埌鎸囧畾鏂囦欢澶?
            锛堜繚鐣欑涓€涓枃浠跺す鐩綍锛岃鐩栨枃浠讹級
            </summary>
            <param name="sourceDir">婧愭枃浠跺す缁濆璺緞</param>
            <param name="destDir">鐩爣鏂囦欢澶圭粷瀵硅矾寰?/param>
        </member>
        <member name="M:Share.Framework.IO.DirectoryUtility.CopyDirectory(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            澶嶅埗鏂囦欢澶逛腑鐨勫瓙鐩綍銆佹枃浠跺埌鎸囧畾鏂囦欢澶?
            </summary>
            <param name="sourceDir">婧愭枃浠跺す璺緞</param>
            <param name="destDir">淇濆瓨璺緞</param>
            <param name="keepFirstDir">鏄惁淇濈暀绗竴涓枃浠跺す鐩綍</param>
            <param name="overwrite">鏄惁瑕嗙洊宸叉湁鏂囦欢</param>
        </member>
        <member name="M:Share.Framework.IO.DirectoryUtility.DeleteDirectory(System.String)">
            <summary>
            鎻愪緵缁濆璺緞锛屽垹闄ょ洰褰?
            </summary>
            <param name="path">闇€瑕佸垹闄ょ殑鐩綍</param>
        </member>
        <member name="T:Share.Framework.Exceptions.UniqueIndexException">
            <summary>
            鎯熶竴绱㈠紩寮傚父
            </summary>
        </member>
        <member name="M:Share.Framework.Exceptions.UniqueIndexException.#ctor">
            <summary>
            鏋勯€犲紓甯?
            </summary>
        </member>
        <member name="M:Share.Framework.Exceptions.UniqueIndexException.#ctor(System.String)">
            <summary>
            鏍规嵁鎻愮ず娑堟伅鏋勯€犲紓甯?
            </summary>
            <param name="message">鎻愮ず娑堟伅</param>
        </member>
        <member name="M:Share.Framework.Exceptions.UniqueIndexException.#ctor(System.String,System.Exception)">
            <summary>
            鏍规嵁鎻愮ず娑堟伅鍙婂師濮嬮敊璇瀯閫犲紓甯?
            </summary>
            <param name="message">鎻愮ず娑堟伅</param>
            <param name="inner">鍘熷閿欒</param>
        </member>
        <member name="M:Share.Framework.Exceptions.UniqueIndexException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            鏍规嵁搴忓垪鍖栦俊鎭拰涓婁笅鏂囨祦鏋勯€犲紓甯?
            </summary>
            <param name="info">鎻愮ず娑堟伅</param>
            <param name="context">鍘熷閿欒</param>
        </member>
        <member name="T:Share.Framework.DataConvert.XmlImport`1">
            <summary>
            灏嗙粰瀹氱殑瀵硅薄浠ml搴忓垪鍖栫殑鏂瑰紡瀵煎叆
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Share.Framework.DataConvert.XmlImport`1.#ctor(Share.Framework.DataConvert.ConvertObjectType)">
            <summary>
             鎸囧畾杞崲绫诲埆
            </summary>        
        </member>
        <member name="M:Share.Framework.DataConvert.XmlImport`1.Import(System.Object)">
            <summary>
             灏嗘寚瀹歺ml杞崲涓哄璞?
            </summary>
            <param name="_object">xml璺緞</param>
            <returns>T</returns>
        </member>
        <member name="T:Share.Framework.JsUtility">
            <summary>
            JavaScript鍔熻兘绫?
            </summary>
        </member>
        <member name="M:Share.Framework.JsUtility.MessageBox(System.String,System.Web.UI.Page)">
            <summary>
            寮瑰嚭娑堟伅绐?
            </summary>
            <param name="message">娑堟伅</param>
            <param name="page">椤甸潰</param>
        </member>
        <member name="M:Share.Framework.JsUtility.MessageBoxAndReload(System.String,System.Web.UI.Page)">
            <summary>
            寮瑰嚭娑堟伅绐楀苟閲嶆柊鍔犺浇绐楀彛
            </summary>
            <param name="message">娑堟伅</param>
            <param name="page">椤甸潰</param>
        </member>
        <member name="M:Share.Framework.JsUtility.MessageBoxAndGoBack(System.String,System.Web.UI.Page)">
            <summary>
            寮瑰嚭娑堟伅绐楀苟鍚庨€€
            </summary>
            <param name="message">娑堟伅</param>
            <param name="page">椤甸潰</param>
        </member>
        <member name="M:Share.Framework.JsUtility.MessageBoxAndRedirect(System.String,System.String,System.Web.UI.Page)">
            <summary>
            寮瑰嚭娑堟伅绐楀苟杞悜鐩爣鍦板潃
            </summary>
            <param name="message">娑堟伅</param>
            <param name="targetURL">鐩爣鍦板潃</param>
            <param name="page">椤甸潰</param>
        </member>
        <member name="M:Share.Framework.JsUtility.MessageBoxAndClose(System.String,System.Web.UI.Page)">
            <summary>
            寮瑰嚭娑堟伅绐楀苟鍏抽棴绐楀彛
            </summary>
            <param name="message">娑堟伅</param>
            <param name="page">椤甸潰</param>
        </member>
        <member name="M:Share.Framework.JsUtility.MessageBoxAndCloseAndReloadParent(System.String,System.Web.UI.Page)">
            <summary>
            寮瑰嚭娑堟伅绐椼€佸叧闂獥鍙ｅ苟閲嶆柊鍔犺浇鐖剁獥鍙ｏ紙Parent锛?
            </summary>
            <param name="message">娑堟伅</param>
            <param name="page">椤甸潰</param>
        </member>
        <member name="M:Share.Framework.JsUtility.MessageBoxAndCloseAndReloadOpener(System.String,System.Web.UI.Page)">
            <summary>
            寮瑰嚭娑堟伅绐椼€佸叧闂獥鍙ｅ苟閲嶆柊鍔犺浇寮€鍚獥鍙ｏ紙Opener锛?
            </summary>
            <param name="message">娑堟伅</param>
            <param name="page">椤甸潰</param>
        </member>
        <member name="M:Share.Framework.JsUtility.MessageBoxAndCloseAndReloadTop(System.String,System.Web.UI.Page)">
            <summary>
            寮瑰嚭娑堟伅绐椼€佸叧闂獥鍙ｅ苟閲嶆柊鍔犺浇椤剁骇绐楀彛锛圱op锛?
            </summary>
            <param name="message">娑堟伅</param>
            <param name="page">椤甸潰</param>
        </member>
        <member name="M:Share.Framework.JsUtility.PopupWindow(System.String,System.Int32,System.Int32,System.Web.UI.Page)">
            <summary>
            寮瑰嚭绐楀彛
            </summary>
            <param name="url">绐楀彛鍦板潃</param>
            <param name="height">绐楀彛楂樺害</param>
            <param name="width">绐楀彛瀹藉害</param>
            <param name="page">椤甸潰</param>
        </member>
        <member name="M:Share.Framework.JsUtility.CloseWindow(System.Web.UI.Page)">
            <summary>
            鍏抽棴绐楀彛
            </summary>
            <param name="page">椤甸潰</param>
        </member>
        <member name="M:Share.Framework.JsUtility.RegisterScript(System.String,System.Web.UI.Page)">
            <summary>
            鎵ц鑴氭湰
            </summary>
            <param name="script">鑴氭湰</param>
            <param name="page">椤甸潰</param>
        </member>
        <member name="M:Share.Framework.JsUtility.FormatMessage(System.String)">
            <summary>
            鏍煎紡鍖栨秷鎭?
            </summary>
            <param name="source">婧愬唴瀹?/param>
            <returns>鏇挎崲鍚庣殑鍐呭</returns>
        </member>
        <member name="T:Share.Framework.Caching.BizCacheItem">
            <summary>
            涓氬姟缂撳瓨椤?
            </summary>
        </member>
        <member name="M:Share.Framework.Caching.BizCacheItem.#ctor">
            <summary>
            涓氬姟缂撳瓨椤瑰垵濮嬪寲
            </summary>
        </member>
        <member name="M:Share.Framework.Caching.BizCacheItem.#ctor(Share.Framework.Caching.BizCacheTypeEnum,System.String,System.String,System.Boolean,System.Boolean,System.TimeSpan,System.String,System.String,System.String,Share.Framework.Caching.DistributedCacheSetting)">
            <summary>
            涓氬姟缂撳瓨椤瑰垵濮嬪寲锛屾彁渚涘悇灞炴€у弬鏁?
            </summary>
            <param name="cacheType">缂撳瓨绫诲瀷</param>
            <param name="name">缂撳瓨椤瑰悕绉?/param>
            <param name="cacheKey">缂撳瓨閿?/param>
            <param name="enabled">鏄惁鍚敤</param>
            <param name="removeAfterModify">淇敼鏁版嵁鍚庢槸鍚︾Щ闄ょ紦瀛?/param>
            <param name="cacheDuration">鐩稿杩囨湡鏃堕暱</param>
            <param name="fileName">渚濊禆鐨勬枃浠跺悕</param>
            <param name="dbEntry">渚濊禆鐨勬暟鎹簱杩炴帴鍚?/param>
            <param name="table">渚濊禆鐨勬暟鎹簱琛ㄥ悕</param>
            <param name="distributedCacheSetting">鍒嗗竷寮忕紦瀛樿缃?/param>
        </member>
        <member name="P:Share.Framework.Caching.BizCacheItem.CacheType">
            <summary>
            缂撳瓨绫诲瀷
            </summary>
        </member>
        <member name="P:Share.Framework.Caching.BizCacheItem.Name">
            <summary>
            缂撳瓨椤瑰悕绉?
            </summary>
        </member>
        <member name="P:Share.Framework.Caching.BizCacheItem.Enabled">
            <summary>
            鏄惁鍚敤
            </summary>
        </member>
        <member name="P:Share.Framework.Caching.BizCacheItem.RemoveAfterModify">
            <summary>
            淇敼鏁版嵁鍚庢槸鍚︾Щ闄ょ紦瀛?
            </summary>
        </member>
        <member name="P:Share.Framework.Caching.BizCacheItem.CacheKey">
            <summary>
            缂撳瓨閿?
            </summary>
        </member>
        <member name="P:Share.Framework.Caching.BizCacheItem.CacheDuration">
            <summary>
            鐩稿杩囨湡鏃堕暱
            </summary>
        </member>
        <member name="P:Share.Framework.Caching.BizCacheItem.FileName">
            <summary>
            渚濊禆鐨勬枃浠跺悕
            </summary>
        </member>
        <member name="P:Share.Framework.Caching.BizCacheItem.DbEntry">
            <summary>
            渚濊禆鐨勬暟鎹簱杩炴帴鍚?
            </summary>
        </member>
        <member name="P:Share.Framework.Caching.BizCacheItem.Table">
            <summary>
            渚濊禆鐨勬暟鎹簱琛ㄥ悕
            </summary>
        </member>
        <member name="P:Share.Framework.Caching.BizCacheItem.DistributedCacheSetting">
            <summary>
            鍒嗗竷寮忕紦瀛樿缃?
            </summary>
        </member>
        <member name="T:Share.Framework.Security.IHashProvider">
            <summary>
            鍝堝笇Provider鎺ュ彛
            </summary>
        </member>
        <member name="M:Share.Framework.Security.IHashProvider.ComputeHash(System.Byte[])">
            <summary>
            鑾峰彇鍝堝笇
            </summary>
            <param name="data">闇€瑕佽绠楀搱甯岀殑婧愶紙byte[]锛?/param>
            <returns>鍝堝笇</returns>
        </member>
        <member name="M:Share.Framework.Security.IHashProvider.ComputeHash(System.String)">
            <summary>
            鑾峰彇鍝堝笇
            </summary>
            <param name="data">闇€瑕佽绠楀搱甯岀殑婧愶紙瀛楃涓诧級</param>
            <returns>鍝堝笇</returns>
        </member>
        <member name="M:Share.Framework.Security.IHashProvider.ComputeHash(System.IO.FileStream)">
            <summary>
            鑾峰彇鍝堝笇
            </summary>
            <param name="fileStream">闇€瑕佽绠楀搱甯岀殑婧愶紙鏂囦欢娴侊級</param>
            <returns>鍝堝笇</returns>
        </member>
        <member name="P:Share.Framework.Security.IHashProvider.HashAlgorithmName">
            <summary>
            鍝堝笇绠楁硶鍚嶇О
            </summary>
        </member>
        <member name="T:Share.Framework.Security.DecryptWithoutPrivateKeyException">
            <summary>
            瑙ｅ瘑鏈彁渚涚閽ュ紓甯?
            </summary>
        </member>
        <member name="M:Share.Framework.Security.DecryptWithoutPrivateKeyException.#ctor">
            <summary>
            瑙ｅ瘑鏈彁渚涚閽ュ紓甯?
            </summary>
        </member>
        <member name="T:Share.Framework.Package.Zip">
            <summary>
            鍘嬬缉鍣?
            </summary>
        </member>
        <member name="F:Share.Framework.Package.Zip.crc">
            <summary>
            寰幆鍐椾綑鏍￠獙
            </summary>
        </member>
        <member name="F:Share.Framework.Package.Zip.BlockSize">
            <summary>
            璇诲彇鏂囦欢鐨勫潡澶у皬
            </summary>
        </member>
        <member name="M:Share.Framework.Package.Zip.#ctor(System.String)">
            <summary>
            鏋勯€犲帇缂╁櫒
            锛堥粯璁ゅ帇缂╃骇鍒紝鏃犲瘑鐮侊級
            </summary>
            <param name="zippedFileName">鍘嬬缉鏂囦欢鍚?/param>
        </member>
        <member name="M:Share.Framework.Package.Zip.#ctor(System.String,Share.Framework.Package.Zip.CompressionLevel)">
            <summary>
            鏋勯€犲帇缂╁櫒
            锛堟寚瀹氬帇缂╃骇鍒紝鏃犲瘑鐮侊級
            </summary>
            <param name="zippedFileName">鍘嬬缉鏂囦欢鍚?/param>
            <param name="level">鍘嬬缉绾у埆</param>
        </member>
        <member name="M:Share.Framework.Package.Zip.#ctor(System.String,Share.Framework.Package.Zip.CompressionLevel,System.String)">
            <summary>
            鏋勯€犲帇缂╁櫒
            锛堟寚瀹氬帇缂╃骇鍒拰瀵嗙爜锛?
            </summary>
            <param name="zippedFileName">鍘嬬缉鏂囦欢鍚?/param>
            <param name="level">鍘嬬缉绾у埆</param>
            <param name="password">瀵嗙爜</param>
        </member>
        <member name="M:Share.Framework.Package.Zip.#ctor(System.String,Share.Framework.Package.Zip.CompressionLevel,System.String,System.String)">
            <summary>
            鏋勯€犲帇缂╁櫒
            锛堟寚瀹氬帇缂╃骇鍒€佸瘑鐮佸拰娉ㄩ噴锛?
            </summary>
            <param name="zippedFileName">鍘嬬缉鏂囦欢鍚?/param>
            <param name="level">鍘嬬缉绾у埆</param>
            <param name="password">瀵嗙爜</param>
            <param name="comments">娉ㄩ噴</param>
        </member>
        <member name="M:Share.Framework.Package.Zip.Finalize">
            <summary>
            鏋愭瀯
            </summary>
        </member>
        <member name="M:Share.Framework.Package.Zip.SetComments(System.String)">
            <summary>
            璁剧疆娉ㄩ噴
            </summary>
            <param name="comments">娉ㄩ噴</param>
        </member>
        <member name="M:Share.Framework.Package.Zip.AppendFile(System.String,System.String)">
            <summary>
            灏嗘枃浠舵坊鍔犺繘鍘嬬缉鍖?
            </summary>
            <param name="filename">寰呭帇缂╂枃浠?/param>
            <param name="entry">鍖呭唴鑺傜偣鍚?/param>
        </member>
        <member name="M:Share.Framework.Package.Zip.AppendFileWithNewName(System.String,System.String,System.String)">
            <summary>
            灏嗘枃浠舵坊鍔犺繘鍘嬬缉鍖?骞舵敼鍙樻枃浠跺悕
            </summary>
            <param name="filename">寰呭帇缂╂枃浠讹紝鍏ㄨ矾寰?/param>
            <param name="entry">鍖呭唴鑺傜偣鍚?/param>
            <param name="newName">鏂版枃浠跺悕</param>
        </member>
        <member name="M:Share.Framework.Package.Zip.AppendFile(System.String)">
            <summary>
            灏嗘枃浠舵坊鍔犺繘鍘嬬缉鍖?
            </summary>
            <param name="filename">寰呭帇缂╂枃浠?/param>
        </member>
        <member name="M:Share.Framework.Package.Zip.AppendDirectory(System.String,System.String)">
            <summary>
            灏嗘枃浠跺す鍙婂叾涓嬫墍鏈夋枃浠舵坊鍔犺繘鍘嬬缉鍖?
            </summary>
            <param name="directory">寰呭帇缂╂枃浠跺す</param>
            <param name="entry">鍖呭唴鑺傜偣鍚?/param>
        </member>
        <member name="M:Share.Framework.Package.Zip.AppendDirectory(System.String)">
            <summary>
             灏嗘枃浠跺す鍙婂叾涓嬫墍鏈夋枃浠舵坊鍔犺繘鍘嬬缉鍖?
            </summary>
            <param name="directoryPath">寰呭帇缂╂枃浠跺す</param>
        </member>
        <member name="M:Share.Framework.Package.Zip.AppendString(System.String,System.String)">
            <summary>
            灏嗘枃鏈唴瀹圭洿鎺ヤ互鏂囦欢褰㈠紡娣诲姞杩涘帇缂╁寘
            </summary>
            <param name="content">鏂囨湰鍐呭</param>
            <param name="entry">鍖呭唴鑺傜偣鍚?/param>
        </member>
        <member name="M:Share.Framework.Package.Zip.AppendString(System.String,System.String,System.Text.Encoding)">
            <summary>
            灏嗘枃鏈唴瀹圭洿鎺ヤ互鏂囦欢褰㈠紡娣诲姞杩涘帇缂╁寘锛屽苟鏀寔鎸囧畾缂栫爜
            </summary>
            <param name="content">鏂囨湰鍐呭</param>
            <param name="entry">鍖呭唴鑺傜偣鍚?/param>
            <param name="enc">缂栫爜绫诲瀷</param>
        </member>
        <member name="M:Share.Framework.Package.Zip.AppendBytes(System.Byte[],System.String)">
            <summary>
            灏嗗瓧鑺傛祦鐩存帴浠ユ枃浠跺舰寮忔坊鍔犺繘鍘嬬缉鍖?
            </summary>
            <param name="buffer">瀛楄妭娴?/param>
            <param name="entry">鍖呭唴鑺傜偣鍚?/param>
        </member>
        <member name="M:Share.Framework.Package.Zip.ZipAppend(System.String,System.String)">
            <summary>
            娣诲姞鏂囦欢鍒板帇缂╁寘
            </summary>
            <param name="fileToZip">鏂囦欢鍚?/param>
            <param name="entry">鍖呭唴鑺傜偣鍚?/param>
        </member>
        <member name="M:Share.Framework.Package.Zip.AddFilesToZip(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            娣诲姞澶氫釜鏂囦欢鍒板帇缂╁寘涓?
            </summary>
            <param name="zipFilename">Name of the zip file. If it does not exist, it will be created. If it exists, it will be updated.</param>
            <param name="sourceFolder">Name of the folder from which to add files.</param>
            <param name="fileMask">Name of the file to add to the zip file. Can include wildcards.</param>
            <param name="recursive">Specifies if the files in the sub-folders of <paramref name="sourceFolder"/> should also be added.</param>
            <param name="password">Specifies the password to be used for the zip file.  If blank, don't use a password</param>
            <returns>True if successfull</returns>
        </member>
        <member name="M:Share.Framework.Package.Zip.ExtractFilesFromZip(System.String,System.String,System.String)">
            <summary>
            浠庡帇缂╂枃浠朵腑瑙ｅ帇缂╋紝骞朵繚鐣欐簮鐩綍缁撴瀯
            </summary>
            <param name="zipFilename">Name of the zip file</param>
            <param name="destFolder">Name of the folder to extract to</param>
            <param name="password">Password for the zip file.  If blank there is no password.</param>
            <returns>True if successfull</returns>
        </member>
        <member name="M:Share.Framework.Package.Zip._AddFilesToZip(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            娣诲姞澶氫釜鏂囦欢鍒板帇缂╁寘涓?
            </summary>
            <param name="zipFilename">Name of the zip file. If it does not exist, it will be created. If it exists, it will be updated.</param>
            <param name="sourceFolder">Name of the folder from which to add files.</param>
            <param name="fileMask">Name of the file to add to the zip file. Can include wildcards.</param>
            <param name="recursive">Specifies if the files in the sub-folders of <paramref name="sourceFolder"/> should also be added.</param>
            <param name="password">Specifies the password to be used for the zip file.  If blank, don't use a password</param>
        </member>
        <member name="M:Share.Framework.Package.Zip.ZipDirectory(ICSharpCode.SharpZipLib.Zip.ZipInputStream,System.String,System.String,ICSharpCode.SharpZipLib.Zip.ZipOutputStream,System.Boolean)">
            <summary>
            娣诲姞鐩綍鍒板帇缂╁寘.
            </summary>
            <param name="zipInputStream">Specifies input stream of the zip file for the update strategy.</param>
            <param name="sourceFolder">Name of the folder from which to add files.</param>
            <param name="fileMask">Name of the file to add to the zip file. Can include wildcards.</param>
            <param name="zipOutputStream">Specifies output stream to archive data.</param>
            <param name="processSubDirs">Specifies if the files in the sub-folders of <paramref name="sourceFolder"/> should also be added.</param>
        </member>
        <member name="M:Share.Framework.Package.Zip.ZipFile(System.String,System.String,ICSharpCode.SharpZipLib.Zip.ZipOutputStream)">
            <summary>
            娣诲姞鐩綍涓殑鏂囦欢鍒板帇缂╁寘.
            </summary>
            <param name="sourceFolder">Name of the folder from which to add files.</param>
            <param name="fileName">Name of the file to add</param>
            <param name="zipOutputStream">Specifies output stream to archive data.</param>
        </member>
        <member name="M:Share.Framework.Package.Zip.MakePathRelative(System.String,System.String)">
            <summary>
            灏嗗叏璺緞鏀规垚鐩稿璺緞.
            </summary>
            <param name="baseFolder">Name of the folder that will be cut from path</param>
            <param name="path">File full path that you need to make relative.</param>
            <returns>Relative path to file (from base folder) or full path if the file is not belong to <paramref name="baseFolder"/></returns>
        </member>
        <member name="M:Share.Framework.Package.Zip.AddDataToZip(ICSharpCode.SharpZipLib.Zip.ZipOutputStream,ICSharpCode.SharpZipLib.Zip.ZipEntry,System.IO.Stream)">
            <summary>
            娣诲姞娴佸埌鍘嬬缉鍖?
            </summary>
            <param name="zipOutputStream">Specifies output stream to archive data.</param>
            <param name="zipEntry">Describe the data that will be added to archive.</param>
            <param name="dataStream">Specifies the data that will be added to archive</param>
        </member>
        <member name="M:Share.Framework.Package.Zip.PatchKnownProblems(System.String)">
            <summary>
            琛ヤ竵锛氭敼姝harpZipLib鐜板湪鐗堟湰涓鐞嗚矾寰勭殑閿欒锛屽皢鏉ュ彲鑳戒細鍙栨秷璇ユ柟娉?
            </summary>
            <param name="fileName">The name of the file</param>
            <returns>Patched file name</returns>
        </member>
        <member name="M:Share.Framework.Package.Zip.EncodeFileName(System.String)">
            <summary>
            澧炲姞涓枃鏂囦欢鍚嶅鐞?
            </summary>
            <param name="fileName">The name of the file</param>
            <returns>Patched file name</returns>
        </member>
        <member name="M:Share.Framework.Package.Zip.GetListOfFilesToZip(System.String,System.String,System.Boolean)">
            <summary>
            杩斿洖瑕佹坊鍔犲埌鍘嬬缉鍖呯殑鏂囦欢鍒楄〃.
            </summary>
            <param name="sourceFolder">Name of the folder from which to add files.</param>
            <param name="fileMask">Name of the file to add to the zip file. Can include wildcards.</param>
            <param name="processSubDirsRecursively">鏄惁灏嗗瓙鐩綍 <paramref name="sourceFolder"/> 鍐呭涔熸坊鍔犺繘鏉?</param>
            <returns>The list of file names that must be added to archive.</returns>
        </member>
        <member name="M:Share.Framework.Package.Zip._ExtractFilesFromZip(System.String,System.String,System.String,System.Boolean)">
            <summary>
            浠庡帇缂╂枃浠朵腑瑙ｅ帇缂╋紝骞朵繚鐣欐簮鐩綍缁撴瀯
            </summary>
            <param name="zipFilename">Name of the zip file</param>
            <param name="destFolder">Name of the folder to extract to</param>
            <param name="password">Password for the zip file.  If blank there is no password.</param>
            <param name="overwrite">Specify the action for existing files in the <paramref name="destFolder"/> during extract process.</param>
        </member>
        <member name="M:Share.Framework.Package.Zip.SaveFile(System.IO.Stream,System.String,System.Int64)">
            <summary>
            灏嗘枃浠朵粠娴佷腑淇濆瓨鍒扮鐩?
            </summary>
            <param name="stream">Specify the stream to save on disk</param>
            <param name="fullName">Specify the filename for correspondent <paramref name="stream"/>.</param>
            <param name="uncompressedSize">The size of the stream.</param>
        </member>
        <member name="M:Share.Framework.Package.Zip.ZipFile(System.Byte[],System.String,System.String)">
            <summary>
            鍘嬬缉鏂囦欢
            锛堜娇鐢ㄥ瓧鑺傛祦杩涜鍘嬬缉锛?
            </summary>
            <param name="buffer">瀛楄妭娴?/param>
            <param name="entry">鍖呭唴鑺傜偣鍚?/param>
            <param name="zipfile">鍘嬬缉鏂囦欢鍚?/param>
        </member>
        <member name="M:Share.Framework.Package.Zip.ZipFile(System.String,System.String,System.String)">
            <summary>
            鍘嬬缉鏂囦欢
            锛堜娇鐢ㄦ枃浠跺悕杩涜鍘嬬缉锛?
            </summary>
            <param name="filename">婧愭枃浠跺悕</param>
            <param name="zipfile">鍘嬬缉鏂囦欢鍚?/param>
            <param name="password">瀵嗙爜</param>
        </member>
        <member name="M:Share.Framework.Package.Zip.ZipFile(System.String,System.String)">
            <summary>
            鍘嬬缉鏂囦欢
            锛堟棤瀵嗙爜锛?
            </summary>
            <param name="filename">婧愭枃浠跺悕</param>
            <param name="zipfile">鍘嬬缉鏂囦欢鍚?/param>
        </member>
        <member name="M:Share.Framework.Package.Zip.ZipFile(System.String)">
            <summary>
            鍘嬬缉鏂囦欢
            锛堟棤鍘嬬缉鏂囦欢鍚嶅拰瀵嗙爜锛?
            </summary>
            <param name="filename">婧愭枃浠跺悕</param>
        </member>
        <member name="M:Share.Framework.Package.Zip.ZipFile(System.String,System.String,System.String,System.Boolean)">
            <summary>
            鍘嬬缉鏂囦欢
            锛堝彲鍒犻櫎婧愭枃浠讹級
            </summary>
            <param name="filename">婧愭枃浠跺悕</param>
            <param name="zipfile">鍘嬬缉鏂囦欢鍚?/param>
            <param name="password">瀵嗙爜</param>
            <param name="delSource">鏄惁鍒犻櫎婧愭枃浠?/param>
        </member>
        <member name="M:Share.Framework.Package.Zip.ZipFile(System.String,System.String,System.Boolean)">
            <summary>
            鍘嬬缉鏂囦欢
            锛堝彲鍒犻櫎婧愭枃浠? 鏃犲瘑鐮侊級
            </summary>
            <param name="filename">婧愭枃浠跺悕</param>
            <param name="zipfile">鍘嬬缉鏂囦欢鍚?/param>
            <param name="delSource">鏄惁鍒犻櫎婧愭枃浠?/param>
        </member>
        <member name="M:Share.Framework.Package.Zip.ZipFile(ICSharpCode.SharpZipLib.Zip.ZipOutputStream,System.String,System.String)">
            <summary>
            鍘嬬缉鏂囦欢
            </summary>
            <param name="zipOutputStream">鍘嬬缉娴?/param>
            <param name="filename">婧愭枃浠跺悕</param>
            <param name="entry">鍖呭唴鑺傜偣鍚?/param>
        </member>
        <member name="M:Share.Framework.Package.Zip.BeginZipFile(System.String)">
            <summary>
            寮€濮嬪帇缂╂枃浠?寮傛)
            </summary>
            <param name="filename">鏂囦欢鍚?/param>
            <remarks>鏈疄鐜?/remarks>
        </member>
        <member name="M:Share.Framework.Package.Zip.BeginZipDirectory(System.String,System.String@,System.AsyncCallback,System.Object)">
            <summary>
            寮€濮嬪帇缂╃洰褰?寮傛)
            </summary>
            <param name="path">鐩綍鍚?/param>
            <param name="msg">锛堣緭鍑猴級娑堟伅</param>
            <param name="callback">鍥炶皟鏂规硶</param>
            <param name="AsyncState">寮傛鐘舵€?/param>
            <returns>寮傛鎵ц缁撴灉</returns>
        </member>
        <member name="M:Share.Framework.Package.Zip.EndZipDirectory(System.String@,System.IAsyncResult)">
            <summary>
            缁撴潫鍘嬬缉鐩綍(寮傛)
            </summary>
            <param name="msg">锛堣緭鍑猴級娑堟伅</param>
            <param name="ia">寮傛鎵ц缁撴灉</param>
            <returns>鏄惁鎴愬姛</returns>
        </member>
        <member name="M:Share.Framework.Package.Zip.beginZipDirectory(System.String,System.String@)">
            <summary>
            寮€濮嬪帇缂╃洰褰?寮傛)
            </summary>
            <param name="path">鐩綍鍚?/param>
            <param name="msg">锛堣緭鍑猴級娑堟伅</param>
            <returns>鏄惁鎴愬姛</returns>
        </member>
        <member name="M:Share.Framework.Package.Zip.ZipDirectory(System.String,System.String,System.String)">
            <summary>
            鍘嬬缉鏂囦欢澶?
            锛堟彁渚涘瘑鐮侊級
            </summary>
            <param name="path">璺緞</param>
            <param name="zipfile">鍘嬬缉鏂囦欢鍚?/param>
            <param name="password">瀵嗙爜</param>
        </member>
        <member name="M:Share.Framework.Package.Zip.ZipDirectory(System.String,System.String)">
            <summary>
            鍘嬬缉鏂囦欢澶?
            锛堟棤瀵嗙爜锛?
            </summary>
            <param name="path">璺緞</param>
            <param name="zipfile">鍘嬬缉鏂囦欢鍚?/param>
        </member>
        <member name="M:Share.Framework.Package.Zip.ZipDirectory(System.String)">
            <summary>
            鍘嬬缉鏂囦欢澶?
            锛堟棤瀵嗙爜锛屼互璺緞鍚嶄綔涓哄帇缂╂枃浠跺悕锛?
            </summary>
            <param name="path">璺緞</param>
        </member>
        <member name="M:Share.Framework.Package.Zip.ZipDirectory(System.String,System.String,System.Boolean)">
            <summary>
            鍘嬬缉鏂囦欢澶?
            锛堝彲鎸囧畾鏄惁鍒犻櫎婧愭枃浠跺す锛?
            </summary>
            <param name="path">璺緞</param>
            <param name="zipfile">鍘嬬缉鏂囦欢鍚?/param>
            <param name="delSource">鏄惁鍒犻櫎婧愭枃浠跺す</param>
        </member>
        <member name="M:Share.Framework.Package.Zip.ZipDirectory(ICSharpCode.SharpZipLib.Zip.ZipOutputStream,System.String,System.String)">
            <summary>
            鍘嬬缉鏂囦欢澶?
            </summary>
            <param name="zipOutputStream">鍘嬬缉娴?/param>
            <param name="path">璺緞</param>
            <param name="entry">鍖呭唴鑺傜偣鍚?/param>
        </member>
        <member name="M:Share.Framework.Package.Zip.CombinEntry(System.String,System.String)">
            <summary>
            鍚堝苟鐖跺瓙鑺傜偣瀛楃涓?
            </summary>
            <param name="parentEntry">鐖惰妭鐐?/param>
            <param name="childEntry">瀛愮粨鐐?/param>
            <returns></returns>
        </member>
        <member name="M:Share.Framework.Package.Zip.Dispose">
            <summary>
            閿€姣?
            </summary>
        </member>
        <member name="M:Share.Framework.Package.Zip.Dispose(System.Boolean)">
            <summary>
            閿€姣?
            </summary>
            <param name="disposing">鏄惁姝ｅ湪閿€姣?/param>
        </member>
        <member name="M:Share.Framework.Package.Zip.Close">
            <summary>
            鍏抽棴
            </summary>
        </member>
        <member name="T:Share.Framework.Package.Zip.ZipFileDelegate">
            <summary>
            鍘嬬缉鏂囦欢浠ｇ悊
            </summary>
            <param name="path">璺緞</param>
            <param name="msg">锛堣緭鍑猴級娑堟伅</param>
            <returns>鏄惁鎴愬姛</returns>
        </member>
        <member name="T:Share.Framework.Package.Zip.CompressionLevel">
            <summary>
            鍘嬬缉绾у埆
            </summary>
        </member>
        <member name="F:Share.Framework.Package.Zip.CompressionLevel.None">
            <summary>
            涓嶅帇缂?
            </summary>
        </member>
        <member name="F:Share.Framework.Package.Zip.CompressionLevel.Fastest">
            <summary>
            浠ユ渶蹇€熷害鍘嬬缉锛屽帇缂╂瘮杈冨皬锛岀浉褰撲簬 Level1
            </summary>
        </member>
        <member name="F:Share.Framework.Package.Zip.CompressionLevel.Level2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Share.Framework.Package.Zip.CompressionLevel.Level3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Share.Framework.Package.Zip.CompressionLevel.Level4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Share.Framework.Package.Zip.CompressionLevel.Level5">
            <summary>
            
            </summary>
        </member>
        <member name="F:Share.Framework.Package.Zip.CompressionLevel.Default">
            <summary>
            榛樿鍘嬬缉鏁堟灉锛?鍗?Level6
            </summary>
        </member>
        <member name="F:Share.Framework.Package.Zip.CompressionLevel.Level7">
            <summary>
            
            </summary>
        </member>
        <member name="F:Share.Framework.Package.Zip.CompressionLevel.Level8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Share.Framework.Package.Zip.CompressionLevel.Maximum">
            <summary>
            鏈€澶у帇缂╂瘮锛屼絾閫熷害鐩稿杈冩參銆傚嵆 Level9
            </summary>
        </member>
        <member name="T:Share.Framework.Logging.ErrorLog">
            <summary>
            閿欒鏃ュ織
            </summary>
        </member>
        <member name="M:Share.Framework.Logging.ErrorLog.#ctor">
            <summary>
            鏋勯€犲嚱鏁?-榛樿
            </summary>
        </member>
        <member name="M:Share.Framework.Logging.ErrorLog.#ctor(System.Int32,System.DateTime,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            鏋勯€犲嚱鏁?-鎵€鏈夊睘鎬?
            </summary>
        </member>
        <member name="P:Share.Framework.Logging.ErrorLog.LogId">
            <summary>
            鏃ュ織ID
            </summary>
        </member>
        <member name="P:Share.Framework.Logging.ErrorLog.CreateTime">
            <summary>
            寮傚父鍒涘缓鏃堕棿
            </summary>
        </member>
        <member name="P:Share.Framework.Logging.ErrorLog.UserName">
            <summary>
            鎿嶄綔浜?
            </summary>
        </member>
        <member name="P:Share.Framework.Logging.ErrorLog.ServerName">
            <summary>
            Web鏈嶅姟鍣ㄥ悕绉?
            </summary>
        </member>
        <member name="P:Share.Framework.Logging.ErrorLog.IpAddress">
            <summary>
            IP鍦板潃
            </summary>
        </member>
        <member name="P:Share.Framework.Logging.ErrorLog.NotifyMessage">
            <summary>
            鎻愮ず淇℃伅
            </summary>
        </member>
        <member name="P:Share.Framework.Logging.ErrorLog.BaseErrorMessage">
            <summary>
            鍘熷寮傚父淇℃伅
            </summary>
        </member>
        <member name="P:Share.Framework.Logging.ErrorLog.Trace">
            <summary>
            閿欒鍫嗘爤
            </summary>
        </member>
        <member name="P:Share.Framework.Logging.ErrorLog.ErrorSource">
            <summary>
            寮傚父鏉ユ簮
            </summary>
        </member>
        <member name="P:Share.Framework.Logging.ErrorLog.Remark">
            <summary>
            澶囨敞
            </summary>
        </member>
        <member name="T:Share.Framework.Data.SqlPrimaryKeyExceptionHandler">
            <summary>
            SQLServer涓婚敭锛堝€欓€夐敭锛夊紓甯稿鐞嗗櫒
            </summary>
        </member>
        <member name="M:Share.Framework.Data.SqlPrimaryKeyExceptionHandler.Handle(System.Data.SqlClient.SqlException)">
            <summary>
            寮傚父澶勭悊
            </summary>
            <param name="ex">寮傚父</param>
        </member>
        <member name="T:Share.Framework.Data.OraclePrimaryKeyExceptionHandler">
            <summary>
            Oracle涓婚敭锛堝€欓€夐敭锛夊紓甯稿鐞嗗櫒
            </summary>
        </member>
        <member name="T:Share.Framework.DataConvert.ConvertObjectType">
            <summary>
             杞崲绫诲埆
            </summary>
        </member>
        <member name="F:Share.Framework.DataConvert.ConvertObjectType.XmlFileToObject">
            <summary>
             璇诲彇xml绫诲瀷鐨勬枃浠惰浆鎹负瀵硅薄杩斿洖
            </summary>
        </member>
        <member name="F:Share.Framework.DataConvert.ConvertObjectType.StringToObject">
            <summary>
             灏唜ml绫诲瀷鐨剆tring杞崲涓哄璞¤繑鍥?
            </summary>
        </member>
        <member name="F:Share.Framework.DataConvert.ConvertObjectType.ObjectToString">
            <summary>
             灏嗗璞¤浆鎹负xml绫诲瀷鐨剆tring杩斿洖
            </summary>
        </member>
        <member name="T:Share.Framework.XMLUtility">
            <summary>
            XML鍔熻兘绫?
            </summary>
        </member>
        <member name="M:Share.Framework.XMLUtility.GuidStringDecode(System.String)">
            <summary>
            GUID瀛楃涓茶浆鎹负鏍囧噯GUID鏍煎紡瀛楃涓?
            </summary>
            <param name="sourceGuidString">婧怗UID瀛楃涓?/param>
            <returns>鏍囧噯GUID鏍煎紡鐨勫瓧绗︿覆</returns>
            <remarks>
            XML涓暟瀛楀紑澶寸殑GUID浼氭樉绀烘垚_x00寮€澶?
            濡傦細_x0031_3587752-33e2-46bb-a26b-0f4377838332
            </remarks>
        </member>
        <member name="M:Share.Framework.XMLUtility.GuidDecode(System.String)">
            <summary>
            GUID瀛楃涓茶浆鎹负GUID
            </summary>
            <param name="sourceGuidString">婧怗UID瀛楃涓?/param>
            <returns>GUID</returns>
            <remarks>
            XML涓暟瀛楀紑澶寸殑GUID浼氭樉绀烘垚_x00寮€澶?
            濡傦細_x0031_3587752-33e2-46bb-a26b-0f4377838332
            </remarks>
        </member>
        <member name="M:Share.Framework.XMLUtility.GuidEncode(System.Guid)">
            <summary>
            GUID杞负搴忓垪鍖栧悗鐨凣UID瀛楃涓?
            </summary>
            <param name="source">婧怗UID</param>
            <returns>搴忓垪鍖栧悗鐨凣UID瀛楃涓?/returns>
            <remarks>
            XML涓暟瀛楀紑澶寸殑GUID闇€瑕佹樉绀烘垚_x00寮€澶?
            濡傦細_x0031_3587752-33e2-46bb-a26b-0f4377838332
            </remarks>
        </member>
        <member name="T:Share.Framework.ReflectionUtility">
            <summary>
            鍙嶅皠鍔熻兘绫?
            </summary>
        </member>
        <member name="M:Share.Framework.ReflectionUtility.CreateInstance(System.String)">
            <summary>
            鍒涘缓瀹炰緥
            </summary>
            <param name="typeName">绫诲悕绉?/param>
            <returns>瀹炰緥</returns>
        </member>
        <member name="M:Share.Framework.ReflectionUtility.CreateInstance(System.String,System.Boolean)">
            <summary>
            鍒涘缓瀹炰緥
            锛堟寚瀹氭槸鍚︿娇鐢ㄧ紦瀛橈級
            </summary>
            <param name="typeName">绫诲悕绉?/param>
            <param name="useCache">鏄惁浣跨敤缂撳瓨</param>
            <returns>瀹炰緥</returns>
        </member>
        <member name="M:Share.Framework.ReflectionUtility.CreateInstance(System.String,System.String)">
            <summary>
            鍒涘缓瀹炰緥
            锛堟寚瀹氱紦瀛橀敭锛?
            </summary>
            <param name="typeName">绫诲悕绉?/param>
            <param name="cacheKey">缂撳瓨閿?/param>
            <returns>瀹炰緥</returns>
        </member>
        <member name="M:Share.Framework.ReflectionUtility.CreateInstance(System.String,System.String,System.Boolean)">
            <summary>
            鍒涘缓瀹炰緥
            锛堟寚瀹氱紦瀛橀敭锛屾槸鍚︿娇鐢ㄧ紦瀛橈級
            </summary>
            <param name="typeName">绫诲悕绉?/param>
            <param name="cacheKey">缂撳瓨閿?/param>
            <param name="useCache">鏄惁浣跨敤缂撳瓨</param>
            <returns>瀹炰緥</returns>
        </member>
        <member name="M:Share.Framework.ReflectionUtility.CreateInstance(System.Type)">
            <summary>
            鍒涘缓瀹炰緥
            </summary>
            <param name="type">绫诲瀷</param>
            <returns>瀹炰緥</returns>
        </member>
        <member name="M:Share.Framework.ReflectionUtility.CreateInstance``1">
            <summary>
            鍒涘缓瀹炰緥
            锛堟硾鍨嬫寚瀹氱被鍨嬶級
            </summary>
            <typeparam name="T">绫诲瀷</typeparam>
            <returns>鎸囧畾绫诲瀷鐨勫疄渚?/returns>
        </member>
        <member name="M:Share.Framework.ReflectionUtility.CreateProvider(System.String)">
            <summary>
            鍒涘缓Provider瀹炰緥
            </summary>
            <param name="objectProviderType">Provider绫诲瀷</param>
            <returns>Provider瀹炰緥</returns>
        </member>
        <member name="M:Share.Framework.ReflectionUtility.CreateProvider(System.String,System.Boolean)">
            <summary>
            鍒涘缓Provider瀹炰緥
            </summary>
            <param name="objectProviderType">Provider绫诲瀷</param>
            <param name="useCache">鏄惁浣跨敤缂撳瓨</param>
            <returns>Provider瀹炰緥</returns>
        </member>
        <member name="M:Share.Framework.ReflectionUtility.CreateProvider(System.String,System.String,System.String)">
            <summary>
            鍒涘缓Provider瀹炰緥
            </summary>
            <param name="objectProviderType">Provider绫诲瀷</param>
            <param name="objectNamespace">鍛藉悕绌洪棿</param>
            <param name="objectAssemblyName">绋嬪簭闆嗗悕绉?/param>
            <returns>Provider瀹炰緥</returns>
        </member>
        <member name="M:Share.Framework.ReflectionUtility.CreateProvider(System.String,System.String,System.String,System.Boolean)">
            <summary>
            鍒涘缓Provider瀹炰緥
            </summary>
            <param name="objectProviderType">Provider绫诲瀷</param>
            <param name="objectNamespace">鍛藉悕绌洪棿</param>
            <param name="objectAssemblyName">绋嬪簭闆嗗悕绉?/param>
            <param name="useCache">鏄惁浣跨敤缂撳瓨</param>
            <returns>Provider瀹炰緥</returns>
        </member>
        <member name="M:Share.Framework.ReflectionUtility.CreateProvider(System.String,System.String,System.String,System.String)">
            <summary>
            鍒涘缓Provider瀹炰緥
            </summary>
            <param name="objectProviderType">Provider绫诲瀷</param>
            <param name="objectProviderName">Provider鍚嶇О</param>
            <param name="objectNamespace">鍛藉悕绌洪棿</param>
            <param name="objectAssemblyName">绋嬪簭闆嗗悕绉?/param>
            <returns>Provider瀹炰緥</returns>
        </member>
        <member name="M:Share.Framework.ReflectionUtility.CreateProvider(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            鍒涘缓Provider瀹炰緥
            </summary>
            <param name="objectProviderType">Provider绫诲瀷</param>
            <param name="objectProviderName">Provider鍚嶇О</param>
            <param name="objectNamespace">鍛藉悕绌洪棿</param>
            <param name="objectAssemblyName">绋嬪簭闆嗗悕绉?/param>
            <param name="useCache">鏄惁浣跨敤缂撳瓨</param>
            <returns>Provider瀹炰緥</returns>
        </member>
        <member name="M:Share.Framework.ReflectionUtility.CreateType(System.String)">
            <summary>
            鍒涘缓绫诲瀷
            锛堝拷鐣ラ敊璇級
            </summary>
            <param name="typeName">绫诲瀷鍚嶇О</param>
            <returns>绫诲瀷</returns>
        </member>
        <member name="M:Share.Framework.ReflectionUtility.CreateType(System.String,System.Boolean)">
            <summary>
            鍒涘缓绫诲瀷
            </summary>
            <param name="typeName">绫诲瀷鍚嶇О</param>
            <param name="ignoreErrors">鏄惁蹇界暐閿欒</param>
            <returns>绫诲瀷</returns>
        </member>
        <member name="M:Share.Framework.ReflectionUtility.CreateType(System.String,System.String,System.Boolean)">
            <summary>
            鍒涘缓绫诲瀷
            </summary>
            <param name="typeName">绫诲瀷鍚嶇О</param>
            <param name="cacheKey">缂撳瓨閿?/param>
            <param name="useCache">鏄惁浣跨敤缂撳瓨</param>
            <returns>绫诲瀷</returns>
        </member>
        <member name="M:Share.Framework.ReflectionUtility.CreateType(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            鍒涘缓绫诲瀷
            </summary>
            <param name="typeName">绫诲瀷鍚嶇О</param>
            <param name="cacheKey">缂撳瓨閿?/param>
            <param name="useCache">鏄惁浣跨敤缂撳瓨</param>
            <param name="ignoreErrors">鏄惁蹇界暐閿欒</param>
            <returns>绫诲瀷</returns>
        </member>
        <member name="M:Share.Framework.ReflectionUtility.GetProperty(System.Type,System.String,System.Object)">
            <summary>
            鑾峰彇灞炴€у€?
            </summary>
            <param name="type">绫诲瀷</param>
            <param name="propertyName">灞炴€у悕绉?/param>
            <param name="target">鐩爣瀵硅薄</param>
            <returns>灞炴€у€?/returns>
        </member>
        <member name="M:Share.Framework.ReflectionUtility.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            璁剧疆灞炴€у€?
            </summary>
            <param name="target">鐩爣瀵硅薄</param>
            <param name="propertyName">灞炴€у悕绉?/param>
            <param name="arg">锛堝崟涓級鍙傛暟</param>
        </member>
        <member name="M:Share.Framework.ReflectionUtility.SetProperty(System.Object,System.String,System.Object[])">
            <summary>
            璁剧疆灞炴€у€?
            </summary>
            <param name="target">鐩爣瀵硅薄</param>
            <param name="propertyName">灞炴€у悕绉?/param>
            <param name="args">锛堝涓級鍙傛暟</param>
        </member>
        <member name="M:Share.Framework.ReflectionUtility.SetProperty(System.Type,System.Object,System.String,System.Object)">
            <summary>
            璁剧疆灞炴€у€?
            </summary>
            <param name="type">绫诲瀷</param>
            <param name="target">鐩爣瀵硅薄</param>
            <param name="propertyName">灞炴€у悕绉?/param>
            <param name="arg">锛堝崟涓級鍙傛暟</param>
        </member>
        <member name="M:Share.Framework.ReflectionUtility.SetProperty(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            璁剧疆灞炴€у€?
            </summary>
            <param name="type">绫诲瀷</param>
            <param name="target">鐩爣瀵硅薄</param>
            <param name="propertyName">灞炴€у悕绉?/param>
            <param name="args">锛堝涓級鍙傛暟</param>
        </member>
        <member name="M:Share.Framework.ReflectionUtility.InvokeMethod(System.Type,System.String,System.Object,System.Object[])">
            <summary>
            璋冪敤鏂规硶
            </summary>
            <param name="type">绫诲瀷</param>
            <param name="methodName">鏂规硶鍚?/param>
            <param name="target">鐩爣瀵硅薄</param>
            <param name="args">鍙傛暟</param>
            <returns>鏂规硶鐨勮繑鍥炲€?/returns>
        </member>
        <member name="M:Share.Framework.ReflectionUtility.InvokeMethod(System.String,System.String,System.Boolean,System.Object[])">
            <summary>
            璋冪敤鏂规硶
            </summary>
            <param name="typeName">绫诲悕</param>
            <param name="methodName">鏂规硶鍚?/param>
            <param name="isStatic">鏄惁鏄潤鎬佹柟娉?/param>
            <param name="args">鍙傛暟</param>
            <returns>鏂规硶鐨勮繑鍥炲€?/returns>
        </member>
        <member name="M:Share.Framework.ReflectionUtility.InvokeMethod(System.String,System.String,System.Object[])">
            <summary>
            璋冪敤鏂规硶锛堥潪闈欐€佹柟娉曪級
            </summary>
            <param name="typeName">绫诲悕</param>
            <param name="methodName">鏂规硶鍚?/param>
            <param name="args">鍙傛暟</param>
            <returns>鏂规硶鐨勮繑鍥炲€?/returns>
        </member>
        <member name="T:Share.Framework.Security.RSACryptoProvider">
            <summary>
            RSA鍔犲瘑Provider
            </summary>
        </member>
        <member name="M:Share.Framework.Security.RSACryptoProvider.#ctor">
            <summary>
            RSA鍔犲瘑Provider
            </summary>
        </member>
        <member name="M:Share.Framework.Security.RSACryptoProvider.#ctor(System.String)">
            <summary>
            RSA鍔犲瘑Provider
            </summary>
            <param name="key">瀵嗛挜</param>
        </member>
        <member name="M:Share.Framework.Security.RSACryptoProvider.Encrypt(System.String)">
            <summary>
            鍔犲瘑
            </summary>
            <param name="data">寰呭姞瀵嗘暟鎹?瀛楃涓?</param>
            <returns>鍔犲瘑鍚庢暟鎹?Base64String)</returns>
        </member>
        <member name="M:Share.Framework.Security.RSACryptoProvider.Encrypt(System.Byte[])">
            <summary>
            鍔犲瘑
            </summary>
            <param name="data">寰呭姞瀵嗘暟鎹?byte[])</param>
            <returns>鍔犲瘑鍚庢暟鎹?/returns>
        </member>
        <member name="M:Share.Framework.Security.RSACryptoProvider.Decrypt(System.String)">
            <summary>
            瑙ｅ瘑
            </summary>
            <param name="data">寰呰В瀵嗘暟鎹?Base64String)</param>
            <returns>瑙ｅ瘑鍚庢暟鎹?/returns>
        </member>
        <member name="M:Share.Framework.Security.RSACryptoProvider.Decrypt(System.Byte[])">
            <summary>
            瑙ｅ瘑
            </summary>
            <param name="data">寰呰В瀵嗘暟鎹?byte[])</param>
            <returns>瑙ｅ瘑鍚庢暟鎹?/returns>
        </member>
        <member name="M:Share.Framework.Security.RSACryptoProvider.GenerateKey(System.String@,System.String@)">
            <summary>
            鐢熸垚瀵嗛挜
            </summary>
            <param name="publicKey">鍏挜</param>
            <param name="publicAndPrivateKeys">鍏閽?/param>
        </member>
        <member name="P:Share.Framework.Security.RSACryptoProvider.Key">
            <summary>
            瀵嗛挜
            </summary>
        </member>
        <member name="T:Share.Framework.Providers.ProviderConfigurationHandler">
            <summary>
            Provider閰嶇疆澶勭悊鍣?
            </summary>
        </member>
        <member name="M:Share.Framework.Providers.ProviderConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            鍒涘缓Provider閰嶇疆澶勭悊鍣?
            </summary>
            <param name="parent">鐖跺璞?/param>
            <param name="context">閰嶇疆涓婁笅鏂?/param>
            <param name="node">XML鑺傜偣</param>
            <returns>Provider閰嶇疆澶勭悊鍣?/returns>
        </member>
        <member name="T:Share.Framework.Package.ZipPasswordCreater">
            <summary>
             鍘嬬缉鍖呭瘑鐮?
            </summary>
        </member>
        <member name="M:Share.Framework.Package.ZipPasswordCreater.ZipPassword">
            <summary>
            鑾峰彇鎵撳寘瀵嗙爜
            </summary>
            <returns></returns>
        </member>
        <member name="T:Share.Framework.Package.FileAndPathCompress">
            <summary>
            鏂囦欢鍜岃矾寰勫帇缂?
            </summary>
        </member>
        <member name="M:Share.Framework.Package.FileAndPathCompress.#ctor">
            <summary>
            鏋勯€犳枃浠跺拰璺緞鍘嬬缉
            </summary>
        </member>
        <member name="M:Share.Framework.Package.FileAndPathCompress.#ctor(System.Collections.ArrayList,System.String)">
            <summary>
            鏋勯€犳枃浠跺拰璺緞鍘嬬缉
            </summary>
            <param name="fileList">鏂囦欢璺緞鍒楄〃</param>
            <param name="zipFile">鍘嬬缉鍒扮殑瀹屾暣璺緞鍙婃枃浠跺悕(.zip)</param>
        </member>
        <member name="M:Share.Framework.Package.FileAndPathCompress.#ctor(System.Collections.ArrayList,System.String,System.String)">
            <summary>
            鏋勯€犳枃浠跺拰璺緞鍘嬬缉锛屾湁瀵嗙爜
            </summary>
            <param name="fileList">鏂囦欢璺緞鍒楄〃</param>
            <param name="zipFile">鍘嬬缉鍒扮殑瀹屾暣璺緞鍙婃枃浠跺悕(.zip)</param>
            <param name="password">瀵嗙爜</param>
        </member>
        <member name="M:Share.Framework.Package.FileAndPathCompress.#ctor(System.Collections.ArrayList,System.String,System.String,System.String)">
            <summary>
            鏋勯€犳枃浠跺拰璺緞鍘嬬缉锛屾湁瀵嗙爜鍜屾敞閲?
            </summary>
            <param name="fileList">鏂囦欢璺緞鍒楄〃</param>
            <param name="zipFile">鍘嬬缉鍒扮殑瀹屾暣璺緞鍙婃枃浠跺悕(.zip)</param>
            <param name="password">瀵嗙爜</param>
            <param name="comment">娉ㄩ噴</param>
        </member>
        <member name="M:Share.Framework.Package.FileAndPathCompress.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.String)">
            <summary>
            鏋勯€犳枃浠跺拰璺緞鍘嬬缉锛屾湁瀵嗙爜鍜屾敞閲?
            </summary>
            <param name="fileDic">婧愭枃浠惰矾寰勫強鐩爣璺緞瀛楀吀</param>
            <param name="zipFile">鍘嬬缉鍒扮殑瀹屾暣璺緞鍙婃枃浠跺悕(.zip)</param>
            <param name="password">瀵嗙爜</param>
            <param name="comment">娉ㄩ噴</param>
        </member>
        <member name="M:Share.Framework.Package.FileAndPathCompress.Compress">
            <summary>
            瀵瑰涓枃浠舵垨鐩綍杩涜鍘嬬缉锛屽彲浠ュ鍘嬬缉鏂囦欢璁剧疆瀵嗙爜銆?
            </summary>
            <returns>鍘嬬缉鎿嶄綔鏄惁鎴愬姛</returns>
        </member>
        <member name="M:Share.Framework.Package.FileAndPathCompress.DirectoryCompress(ICSharpCode.SharpZipLib.Zip.ZipOutputStream,System.String,System.String)">
            <summary>
            浣跨敤閫掑綊锛屽鐩綍涓嬬殑鎵€鏈夋枃浠朵互鍙婂瓙鐩綍杩涜鍘嬬缉
            </summary>
            <param name="s">杈撳嚭娴佸帇缂╁璞?/param>
            <param name="path">瑕佸帇缂╃殑鐩綍鐨勮矾寰?/param>
        </member>
        <member name="M:Share.Framework.Package.FileAndPathCompress.FileCompress(ICSharpCode.SharpZipLib.Zip.ZipOutputStream,System.String,System.String)">
            <summary>
            瀵瑰崟涓枃浠惰繘琛屽帇缂?
            </summary>
            <param name="s">杈撳嚭娴佸帇缂╁璞?/param>
            <param name="path">瑕佸帇缂╃殑鏂囦欢璺緞</param>
            <param name="zipEntry">鏂囦欢鐨勭浉瀵硅矾寰?/param>
        </member>
        <member name="M:Share.Framework.Package.StringUnCompress.UnCompress(System.String)">
            <summary>
            瑙ｅ帇瀛楃涓?
            </summary>
            <param name="stringArg"></param>
            <returns></returns>
        </member>
        <member name="T:Share.Framework.Exceptions.ForeignKeyException">
            <summary>
            澶栭敭寮傚父
            </summary>
        </member>
        <member name="M:Share.Framework.Exceptions.ForeignKeyException.#ctor">
            <summary>
            鏋勯€犲紓甯?
            </summary>
        </member>
        <member name="M:Share.Framework.Exceptions.ForeignKeyException.#ctor(System.String)">
            <summary>
            鏍规嵁鎻愮ず娑堟伅鏋勯€犲紓甯?
            </summary>
            <param name="message">鎻愮ず娑堟伅</param>
        </member>
        <member name="M:Share.Framework.Exceptions.ForeignKeyException.#ctor(System.String,System.Exception)">
            <summary>
            鏍规嵁鎻愮ず娑堟伅鍙婂師濮嬮敊璇瀯閫犲紓甯?
            </summary>
            <param name="message">鎻愮ず娑堟伅</param>
            <param name="inner">鍘熷閿欒</param>
        </member>
        <member name="M:Share.Framework.Exceptions.ForeignKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            鏍规嵁搴忓垪鍖栦俊鎭拰涓婁笅鏂囨祦鏋勯€犲紓甯?
            </summary>
            <param name="info">鎻愮ず娑堟伅</param>
            <param name="context">鍘熷閿欒</param>
        </member>
        <member name="T:Share.Framework.Caching.BizCacheTypeEnum">
            <summary>
            涓氬姟缂撳瓨绫诲瀷
            </summary>
        </member>
        <member name="F:Share.Framework.Caching.BizCacheTypeEnum.TimeSlidingExpiration">
            <summary>
            鏃堕棿婊氬姩杩囨湡
            </summary>
        </member>
        <member name="F:Share.Framework.Caching.BizCacheTypeEnum.FileDependency">
            <summary>
            鏂囦欢渚濊禆
            </summary>
        </member>
        <member name="F:Share.Framework.Caching.BizCacheTypeEnum.SqlDependency">
            <summary>
            SQL鏁版嵁搴撲緷璧?
            </summary>
        </member>
        <member name="F:Share.Framework.Caching.BizCacheTypeEnum.MsDistributedCache">
            <summary>
            MS鍒嗗竷寮忕紦瀛橈紙Velocity锛?
            </summary>
        </member>
        <member name="T:Share.Framework.Package.ZipTools">
            <summary>
            鍘嬬缉宸ュ叿
            </summary>
        </member>
        <member name="M:Share.Framework.Package.ZipTools.ReadFileByName(ICSharpCode.SharpZipLib.Zip.ZipFile,System.String)">
            <summary>
             璇诲彇鍖呭唴鏂囦欢
            </summary>
            <returns>鍖呭唴鏂囦欢娴?/returns>
        </member>
        <member name="M:Share.Framework.Package.ZipTools.ReadFileByName(ICSharpCode.SharpZipLib.Zip.ZipFile,System.String,System.String)">
            <summary>
            鏍规嵁鍖呭唴鏂囦欢鍚嶇О璇诲彇鍖呭唴鏂囦欢
            锛堟彁渚涘帇缂╁瘑鐮侊級
            </summary>
            <param name="zipFile">鍘嬬缉鏂囦欢</param>
            <param name="readFileName">鍖呭唴鏂囦欢鍚嶇О</param>
            <param name="password">鍘嬬缉瀵嗙爜</param>
            <returns>鍖呭唴鏂囦欢娴?/returns>
        </member>
        <member name="M:Share.Framework.Package.ZipTools.ReadFileByName(System.IO.Stream,System.String)">
            <summary>
             璇诲彇鍖呭唴鏂囦欢
            寰呭簾闄わ細鍥燴ipFile鏈叧闂紝鍙兘閫犳垚閿欒锛岄渶瑕佸簾闄ゆ鏂规硶骞朵慨鏀硅皟鐢ㄥ锛堟敼涓轰紶鍏ipFile鍙傛暟锛夈€?
            </summary>
            <returns></returns>
        </member>
        <member name="M:Share.Framework.Package.ZipTools.ReadFileByName(System.IO.Stream,System.String,System.String)">
            <summary>
             璇诲彇鍖呭唴鏂囦欢
            寰呭簾闄わ細鍥燴ipFile鏈叧闂紝鍙兘閫犳垚閿欒锛岄渶瑕佸簾闄ゆ鏂规硶骞朵慨鏀硅皟鐢ㄥ锛堟敼涓轰紶鍏ipFile鍙傛暟锛夈€?
            </summary>
            <returns></returns>
        </member>
        <member name="M:Share.Framework.Package.ZipTools.ReadFileByStartsWithName(System.IO.Stream,System.String)">
            <summary>
             璇诲彇鍖呭唴鏂囦欢
            </summary>
            <returns>鍖呭唴鏂囦欢娴?/returns>
        </member>
        <member name="M:Share.Framework.Package.ZipTools.AddDirectoryToZipPackage(System.String,System.String,System.String,System.String)">
            <summary>
            娣诲姞鏂囦欢澶瑰埌鍘嬬缉鍖?
            </summary>
            <param name="examPlanPackageFilename"></param>
            <param name="password"></param>
            <param name="addZipDirectory"></param>
            <param name="addDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:Share.Framework.Package.ZipTools.AddDirectoryToZipPackage(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            娣诲姞鏂囦欢澶瑰埌鍘嬬缉鍖?
            </summary>
            <param name="examPlanPackageFilename"></param>
            <param name="password"></param>
            <param name="addZipDirectory"></param>
            <param name="addDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:Share.Framework.Package.ZipTools.AddDirectoryToZipPackage(ICSharpCode.SharpZipLib.Zip.ZipFile,System.String,System.String)">
            <summary>
            娣诲姞鏂囦欢澶瑰埌鍘嬬缉鍖?
            </summary>
            <param name="zipPackageFile">鍘嬬缉鍖呮枃浠?/param>
            <param name="addDirectory">娣诲姞鍒板帇缂╁寘鐨勬枃浠跺す璺緞</param>
            <param name="isCurrentDirectory">鏄惁鍖呮嫭褰撳墠鐩綍</param>
            <returns></returns>
        </member>
        <member name="M:Share.Framework.Package.ZipTools.AddDirectoryToZipPackage(ICSharpCode.SharpZipLib.Zip.ZipFile,System.String,System.String,System.Boolean)">
            <summary>
            娣诲姞鏂囦欢澶瑰埌鍘嬬缉鍖?
            </summary>
            <param name="examPlanPackageZipFile">鍘嬬缉鍖呮枃浠?/param>
            <param name="addZipDirectory">鏂囦欢澶瑰湪鍘嬬缉鍖呬腑浣嶇疆</param>
            <param name="addDirectory">娣诲姞鍒板帇缂╁寘鐨勬枃浠跺す璺緞</param>
            <returns></returns>
        </member>
        <member name="M:Share.Framework.Package.ZipTools.AddDirectoryToZipPackage(ICSharpCode.SharpZipLib.Zip.ZipFile,System.String,System.IO.DirectoryInfo)">
            <summary>
            娣诲姞鏂囦欢澶瑰埌鍘嬬缉鍖?
            </summary>
            <param name="examPlanPackageZipFile">鍘嬬缉鍖呮枃浠?/param>
            <param name="addZipDirectory">鏂囦欢澶瑰湪鍘嬬缉鍖呬腑浣嶇疆</param>
            <param name="addDirectoryInfo">娣诲姞鍒板帇缂╁寘鐨勬枃浠跺す淇℃伅</param>
            <returns></returns>
        </member>
        <member name="M:Share.Framework.Package.ZipTools.AddDirectoryFileToZipPackage(ICSharpCode.SharpZipLib.Zip.ZipFile,System.String,System.IO.FileInfo)">
            <summary>
            娣诲姞鏂囦欢鍒板帇缂╁寘
            </summary>
            <param name="examPlanPackageZipFile">鍘嬬缉鍖呮枃浠?/param>
            <param name="addZipDirectory">鏂囦欢鍦ㄥ帇缂╁寘涓綅缃?/param>
            <param name="addFileInfo">娣诲姞鍒板帇缂╁寘鐨勬枃浠朵俊鎭?/param>
            <returns></returns>
        </member>
        <member name="M:Share.Framework.Package.ZipTools.AddFileToZipPackage(System.String,System.String,System.String,System.String)">
            <summary>
            灏嗘枃浠跺啓鍏ュ埌鍘嬬缉鍖呭唴
            </summary>
            <param name="examPlanZipOutputStream">鑰冭瘯璁″垝鍖呮祦</param>
            <param name="filename">鍐欏叆鍒板帇缂╁寘鍐呯殑鏂囦欢鍚嶏紙鐩綍锛?/param>
            <returns>true:鎴愬姛;false:澶辫触</returns>
        </member>
        <member name="M:Share.Framework.Package.ZipTools.AddFileToZipPackage(System.String,System.String,System.IO.Stream,System.String)">
            <summary>
            灏嗘枃浠跺啓鍏ュ埌鍘嬬缉鍖呭唴
            </summary>
            <param name="examPlanZipOutputStream">鑰冭瘯璁″垝鍖呮祦</param>
            <param name="filename">鍐欏叆鍒板帇缂╁寘鍐呯殑鏂囦欢鍚嶏紙鐩綍锛?/param>
            <returns>true:鎴愬姛;false:澶辫触</returns>
        </member>
        <member name="M:Share.Framework.Package.ZipTools.AddFileToZipPackage(ICSharpCode.SharpZipLib.Zip.ZipOutputStream,System.IO.Stream,System.Int64,System.String)">
            <summary>
            灏嗘枃浠舵祦鍐欏叆鍒板帇缂╁寘鍐?
            </summary>
            <param name="examPlanZipOutputStream">鑰冭瘯璁″垝鍖呮祦</param>
            <param name="stream">鏂囦欢娴?/param>
            <param name="filesize">鏂囦欢澶у皬</param>
            <param name="filename">瑕佷繚瀛樼殑鏂囦欢鍚?/param>
            <returns>true:鎴愬姛;false:澶辫触</returns>
        </member>
        <member name="M:Share.Framework.Package.ZipTools.AddFileToZipPackage(ICSharpCode.SharpZipLib.Zip.ZipOutputStream,System.Byte[],System.Int64,System.String)">
            <summary>
            灏嗘枃浠舵祦鍐欏叆鍒板帇缂╁寘鍐?
            </summary>
            <param name="examPlanZipOutputStream">鑰冭瘯璁″垝鍖呮祦</param>
            <param name="stream">鏂囦欢娴?/param>
            <param name="filesize">鏂囦欢澶у皬</param>
            <param name="filename">瑕佷繚瀛樼殑鏂囦欢鍚?/param>
            <returns>true:鎴愬姛;false:澶辫触</returns>
        </member>
        <member name="T:Share.Framework.Logging.SecureAdoNetAppender">
            <summary>
            瀹夊叏鐨凙doNet闄勫姞鍣?
            锛堝厑璁镐娇鐢ㄥ姞瀵嗙殑杩炴帴涓诧級
            </summary>
        </member>
        <member name="P:Share.Framework.Logging.SecureAdoNetAppender.ConnectionStringName">
            <summary>
            杩炴帴瀛楃涓插悕绉?
            </summary>
        </member>
        <member name="T:Share.Framework.Logging.BizLogItem">
            <summary>
            涓氬姟鏃ュ織閰嶇疆椤?
            </summary>
        </member>
        <member name="M:Share.Framework.Logging.BizLogItem.#ctor">
            <summary>
            鏋勯€犱笟鍔℃棩蹇楅厤缃」
            </summary>
        </member>
        <member name="M:Share.Framework.Logging.BizLogItem.#ctor(System.String,System.Boolean)">
            <summary>
            鏋勯€犱笟鍔℃棩蹇楅厤缃」
            </summary>
            <param name="name">閰嶇疆椤瑰悕绉?/param>
            <param name="enabled">鏄惁鍚敤</param>
        </member>
        <member name="M:Share.Framework.Logging.BizLogItem.#ctor(System.Xml.XmlNode)">
            <summary>
            鏋勯€犱笟鍔℃棩蹇楅厤缃」
            </summary>
            <param name="bizLogItemNode">涓氬姟鏃ュ織椤筙ML鑺傜偣</param>
        </member>
        <member name="P:Share.Framework.Logging.BizLogItem.Name">
            <summary>
            鍚嶇О
            </summary>
        </member>
        <member name="P:Share.Framework.Logging.BizLogItem.Enabled">
            <summary>
            鏄惁鍚敤
            </summary>
        </member>
        <member name="P:Share.Framework.Logging.BizLogItem.Logger">
            <summary>
            鏃ュ織璁板綍鍣ㄥ悕绉?
            </summary>
        </member>
        <member name="P:Share.Framework.Logging.BizLogItem.Level">
            <summary>
            鏃ュ織绾у埆
            </summary>
        </member>
        <member name="T:Share.Framework.Data.DBOperateType">
            <summary>
            鏁版嵁鎿嶄綔绫诲瀷
            </summary>
        </member>
        <member name="F:Share.Framework.Data.DBOperateType.Insert">
            <summary>
            鎻掑叆
            </summary>
        </member>
        <member name="F:Share.Framework.Data.DBOperateType.Update">
            <summary>
            鏇存柊
            </summary>
        </member>
        <member name="F:Share.Framework.Data.DBOperateType.Delete">
            <summary>
            鍒犻櫎
            </summary>
        </member>
        <member name="T:Share.Framework.MSOffice.WordUtility">
            <summary>
            Word鍔熻兘绫?
            </summary>
        </member>
        <member name="M:Share.Framework.MSOffice.WordUtility.ExportData(System.String,System.String)">
            <summary>
            瀵煎嚭鏁版嵁
            </summary>
            <param name="fileName">鏂囦欢鍚嶇О</param>
            <param name="content">鍐呭</param>
        </member>
        <member name="M:Share.Framework.MSOffice.WordUtility.ExportData(System.String,System.Web.UI.Control)">
            <summary>
            瀵煎嚭鏁版嵁
            </summary>
            <param name="fileName">鏂囦欢鍚嶇О</param>
            <param name="sourceControl">婧愭帶浠?/param>
        </member>
        <member name="M:Share.Framework.MSOffice.WordUtility.ExportData(System.String,System.Web.UI.WebControls.GridView)">
            <summary>
            瀵煎嚭鏁版嵁
            </summary>
            <param name="fileName">鏂囦欢鍚嶇О</param>
            <param name="sourceControl">婧愭帶浠?GridView)</param>
        </member>
        <member name="M:Share.Framework.MSOffice.WordUtility.ExportData(System.String,System.Web.UI.WebControls.GridView,System.Boolean,System.Boolean)">
            <summary>
            瀵煎嚭鏁版嵁
            </summary>
            <param name="fileName">鏂囦欢鍚嶇О</param>
            <param name="sourceControl">婧愭帶浠?GridView)</param>
            <param name="exportFirstColumn">鏄惁瀵煎嚭绗竴鍒?/param>
            <param name="exportLastColumn">鏄惁瀵煎嚭鏈€鍚庝竴鍒?/param>
        </member>
        <member name="T:Share.Framework.Xml.IMultiNamespaceObject">
            <summary>
            澶氬懡鍚嶇┖闂村璞℃帴鍙?
            </summary>
        </member>
        <member name="P:Share.Framework.Xml.IMultiNamespaceObject.NamespaceAlias">
            <summary>
            鍛藉悕绌洪棿鍒悕锛坘ey锛氬埆鍚嶏紝value锛氬懡鍚嶇┖闂达級
            璇锋爣璇哰XmlIgnore]浠ラ槻姝㈠簭鍒楀寲姝ゅ睘鎬?
            </summary>
        </member>
        <member name="T:Share.Framework.Providers.Provider">
            <summary>
            Provider
            </summary>
        </member>
        <member name="M:Share.Framework.Providers.Provider.#ctor(System.Xml.XmlAttributeCollection)">
            <summary>
            Provider鍒濆鍖?
            </summary>
            <param name="attributes"></param>
        </member>
        <member name="P:Share.Framework.Providers.Provider.Name">
            <summary>
            Provider鍚嶇О
            </summary>
        </member>
        <member name="P:Share.Framework.Providers.Provider.Type">
            <summary>
            Provider绫诲瀷鍚嶇О
            </summary>
        </member>
        <member name="P:Share.Framework.Providers.Provider.Attributes">
            <summary>
            Provider灞炴€?
            </summary>
        </member>
        <member name="T:Share.Framework.Net.IPUtility">
            <summary>
            IP鍔熻兘绫?
            </summary>
        </member>
        <member name="M:Share.Framework.Net.IPUtility.IsIP(System.String)">
            <summary>
            鍒ゆ柇瀛楃涓叉槸鍚︽槸IP瀛楃涓?
            </summary>
            <param name="ipString">瀛楃涓?/param>
            <returns>鏄惁鏄疘P瀛楃涓?/returns>
        </member>
        <member name="M:Share.Framework.Net.IPUtility.IpFormat(System.String)">
            <summary>
            杩涜IP鏍煎紡鍖栵紙浣跨敤0浣滀负鏍煎紡鍖栫鍙凤級,渚嬪锛?92.168.0.1锛屾牸寮忓寲涓?92.168.000.001
            </summary>
            <param name="ipString">寰呮牸寮忓寲鐨処P瀛楃涓?/param>
            <returns>鏍煎紡鍖栫殑IP瀛楃涓?/returns>
        </member>
        <member name="M:Share.Framework.Net.IPUtility.IpFormat(System.String,System.Char)">
            <summary>
            杩涜IP鏍煎紡鍖栵紙鎸囧畾鏍煎紡鍖栫鍙凤級,渚嬪锛?92.168.0.1锛屾牸寮忓寲涓?92.168.000.001
            </summary>
            <param name="ipString">寰呮牸寮忓寲鐨処P瀛楃涓?/param>
            <param name="paddingChar">鏍煎紡鍖栫鍙?/param>
            <returns>鏍煎紡鍖栫殑IP瀛楃涓?/returns>
        </member>
        <member name="M:Share.Framework.Net.IPUtility.IpUnformat(System.String)">
            <summary>
            杩涜IP鏍煎紡鍖栫殑瀛楃涓叉仮澶嶏紙浣跨敤0浣滀负鏍煎紡鍖栫鍙凤級,渚嬪锛?92.168.000.001锛屾仮澶嶄负192.168.0.1
            </summary>
            <param name="ipString">寰呮仮澶嶆牸寮忓寲鐨処P瀛楃涓?/param>
            <returns>鎭㈠鏍煎紡鍖栫殑IP瀛楃涓?/returns>
        </member>
        <member name="M:Share.Framework.Net.IPUtility.GetIPCollection(System.String,System.String)">
            <summary>
            鑾峰彇鎸囧畾IP鑼冨洿涓墍鏈塈P鍦板潃
            璋冪敤渚嬪瓙锛欳ommonFun.getIPPoint("123.123.123.123", "123.123.123.125")
            </summary>
            <param name="startIP">璧峰ip</param>   
            <param name="endIP">缁撴潫ip</param>
            <returns>鎸囧畾IP鑼冨洿涓墍鏈塈P鍦板潃</returns>
        </member>
        <member name="T:Share.Framework.Security.DatabaseRecordSignature">
            <summary>
            鏁版嵁搴撹褰曠鍚?
            </summary>
            <remarks>
            ZhouYonghua, 2010-4-12
            </remarks>
        </member>
        <member name="M:Share.Framework.Security.DatabaseRecordSignature.PrepareSignature(System.Data.CommandType,System.String,System.Data.SqlClient.SqlCommand@,System.Data.SqlClient.SqlParameter[])">
            <summary>
            鍑嗗绛惧悕
            </summary>
            <param name="commandType">婧愬懡浠ょ被鍨?/param>
            <param name="commandText">婧愬懡浠ゅ唴瀹?/param>
            <param name="signatureCommand">绛惧悕鍛戒护</param>
            <param name="commandParameters">婧愬懡浠ゅ弬鏁?/param>
            <returns>鏄惁闇€瑕佺鍚?/returns>
        </member>
        <member name="M:Share.Framework.Security.DatabaseRecordSignature.GetValidateKey(System.String)">
            <summary>
            鑾峰彇瀵规簮鏂囨湰杩涜绛惧悕鍚庣殑鏍￠獙淇℃伅
            </summary>
            <param name="source">婧愭枃鏈?/param>
            <returns>鏍￠獙淇℃伅</returns>
        </member>
        <member name="M:Share.Framework.Security.DatabaseRecordSignature.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of SqlParameters to be added to command</param>
        </member>
        <member name="T:Share.Framework.DataConvert.BinaryExport`1">
            <summary>
            瀵硅薄杩涜浜岃繘鍒跺簭鍒楀寲鐨勭被
            </summary>
            <typeparam name="T">闇€瑕佽浆鎹㈢殑绫诲瀷</typeparam>
        </member>
        <member name="F:Share.Framework.DataConvert.BinaryExport`1.log">
            <summary>
            
            </summary>
        </member>
        <member name="F:Share.Framework.DataConvert.BinaryExport`1.FileSavePath">
            <summary>
            
            </summary>
        </member>
        <member name="M:Share.Framework.DataConvert.BinaryExport`1.#ctor(System.String)">
            <summary>
            灏嗗璞″瓨鏀惧埌鎸囧畾鐩綍涓?
            </summary>
            <param name="fileName">鏂囦欢璇︾粏璺緞</param>
        </member>
        <member name="M:Share.Framework.DataConvert.BinaryExport`1.Export(`0)">
            <summary>
             灏嗗璞″鍑轰繚瀛樹负浜岃繘鍒舵牸寮忕殑鏂囦欢
            </summary>
            <param name="t">闇€瑕佸鍑虹殑瀵硅薄</param>
            <returns>true or false</returns>
        </member>
        <member name="T:Share.Framework.WebImageRequestAuthentication">
            <summary>
            鍥剧墖璇锋眰楠岃瘉绫?
            </summary>
            <remarks>
            鍙厑璁告潵鑷狝ppSettings["WebRequestAllowedHost"]涓寘鍚殑鍩熷悕鐨勮姹?
            鐩楅摼寮曠敤锛岃繑鍥炵粰瀹㈡埛绔瘇/ImageRequestDisallowed.jpg
            </remarks>
        </member>
        <member name="M:Share.Framework.WebImageRequestAuthentication.ProcessRequest(System.Web.HttpContext)">
            <summary>
            澶勭悊璇锋眰
            </summary>
            <param name="context">璇锋眰涓婁笅鏂?/param>
        </member>
        <member name="P:Share.Framework.WebImageRequestAuthentication.IsReusable">
            <summary>
            鏄惁鍙噸鐢?
            </summary>
        </member>
        <member name="T:Share.Framework.Caching.OpenCache`2">
            <summary>
            鍙敤浜庡瓨鏀句换浣曟暟鎹被鍨嬬殑缂撳瓨锛?
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Share.Framework.Security.SignatureWithoutPrivateKeyException">
            <summary>
            绛惧悕鏈彁渚涚閽ュ紓甯?
            </summary>
        </member>
        <member name="M:Share.Framework.Security.SignatureWithoutPrivateKeyException.#ctor">
            <summary>
            绛惧悕鏈彁渚涚閽ュ紓甯?
            </summary>
        </member>
        <member name="T:Share.Framework.Security.HashProvider">
            <summary>
            鍝堝笇Provider
            </summary>
        </member>
        <member name="M:Share.Framework.Security.HashProvider.#ctor">
            <summary>
            鍝堝笇Provider
            </summary>
        </member>
        <member name="M:Share.Framework.Security.HashProvider.#ctor(System.String)">
            <summary>
            鍝堝笇Provider
            </summary>
            <param name="hashAlgorithmName">鍝堝笇绠楁硶鍚嶇О</param>
        </member>
        <member name="M:Share.Framework.Security.HashProvider.ComputeHash(System.Byte[])">
            <summary>
            鑾峰彇鍝堝笇
            </summary>
            <param name="data">闇€瑕佽绠楀搱甯岀殑婧愶紙byte[]锛?/param>
            <returns>鍝堝笇</returns>
        </member>
        <member name="M:Share.Framework.Security.HashProvider.ComputeHash(System.String)">
            <summary>
            鑾峰彇鍝堝笇
            </summary>
            <param name="data">闇€瑕佽绠楀搱甯岀殑婧愶紙瀛楃涓诧級</param>
            <returns>鍝堝笇</returns>
        </member>
        <member name="M:Share.Framework.Security.HashProvider.ComputeHash(System.IO.FileStream)">
            <summary>
            鑾峰彇鍝堝笇
            </summary>
            <param name="fileStream">闇€瑕佽绠楀搱甯岀殑婧愶紙鏂囦欢娴侊級</param>
            <returns>鍝堝笇</returns>
        </member>
        <member name="M:Share.Framework.Security.HashProvider.InitCheck">
            <summary>
            鍒濆鍖栨鏌?
            </summary>
        </member>
        <member name="P:Share.Framework.Security.HashProvider.HashAlgorithmName">
            <summary>
            鍝堝笇绠楁硶鍚嶇О
            </summary>
        </member>
        <member name="M:Share.Framework.Package.ByteUnCompress.UnCompress(System.Byte[])">
            <summary>
            鍘嬬缉/瑙ｅ帇缂╂暟鎹€?
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Share.Framework.IO.FileUtility">
            <summary>
            鏂囦欢鍔熻兘绫?
            </summary>
        </member>
        <member name="M:Share.Framework.IO.FileUtility.Copy(System.String,System.String)">
            <summary>
            Copy鏂囦欢
            </summary>
            <param name="sourceFileName">婧愭枃浠?/param>
            <param name="destFileName">鐩爣鏂囦欢</param>
        </member>
        <member name="M:Share.Framework.IO.FileUtility.WriteFile(System.String,System.IO.Stream)">
            <summary>
             鍒涘缓鏂囦欢锛屽啓鍏ユ祦
            </summary>
            <param name="fileName">鏂囦欢鐨勭粷瀵硅矾寰?/param>
            <param name="_FileStream">闇€瑕佸啓鍏ョ殑娴?/param>
        </member>
        <member name="M:Share.Framework.IO.FileUtility.OpenFile(System.String)">
            <summary>
            鎵撳紑鏂囦欢銆佽幏鍙栨枃浠舵祦
            </summary>
            <param name="fileName">鏂囦欢鍚嶇О</param>
            <returns>鏂囦欢娴?/returns>
        </member>
        <member name="M:Share.Framework.IO.FileUtility.GetFileNameChangeExtension(System.String,System.String)">
            <summary>
             鑾峰彇鏇存敼鍚庣紑鍚嶇殑鏂囦欢
            </summary>
            <returns></returns>
        </member>
        <member name="M:Share.Framework.IO.FileUtility.GetFileName(System.String)">
            <summary>
            鏍规嵁鏂囦欢璺緞鑾峰彇鏂囦欢鍚?
            </summary>
            <param name="filePath">鏂囦欢璺緞</param>
            <returns>鏂囦欢鍚?/returns>
        </member>
        <member name="M:Share.Framework.IO.FileUtility.IsFileInUse(System.String)">
            <summary>
             鍒ゆ柇鏂囦欢鏄惁姝ｅ湪浣跨敤涓?
            </summary>
            <param name="fileName">鏂囦欢璺緞</param>
            <returns>true or false</returns>
        </member>
        <member name="M:Share.Framework.IO.FileUtility.GetExtension(System.String)">
            <summary>
            鑾峰彇铏氭嫙璺緞鏂囦欢鐨勬墿灞曞悕
            </summary>
            <param name="file">铏氭嫙璺緞鐨勬枃浠?/param>
            <returns></returns>
        </member>
        <member name="M:Share.Framework.IO.FileUtility.GetFileExtension(System.String)">
            <summary>
            鑾峰彇灏忓啓鐨勬枃浠舵墿灞曞悕(鍚?.")
            </summary>
            <param name="file">鏂囦欢鍚?/param>
            <returns>灏忓啓鐨勬枃浠舵墿灞曞悕(鍚?.")</returns>
        </member>
        <member name="M:Share.Framework.IO.FileUtility.DeleteAllInDirectory(System.String)">
            <summary>
            鍒犻櫎鐩綍涓嬬殑鎵€鏈夋枃浠?
            </summary>
            <param name="strDir"></param>
        </member>
    </members>
</doc>

